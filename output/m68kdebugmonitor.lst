680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 05 Apr 2025      Time: 22:00:28          Source: C:\COSMICIMPALASM68K\OUTPUT\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0796   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 07A8   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 07BA   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 07CC   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 07DE   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 07F0   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 0802   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0814   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0826   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 0838   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 084A   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 084A   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 084A   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 084A   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 084A   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 084A   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 084A   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 084A   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 084A   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 084A   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 084A   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 084A   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 084A   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 042E   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 0440   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 0452   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 0464   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 0476   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 0580   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 0592   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 05A4   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 05B6   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 05C8   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 05DA   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 05EC   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 05FE   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 0610   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 0622   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 0634   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 0646   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 0658   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 066A   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 067C   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 068E   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 06A0   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 0790   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             ;set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; some important initialisation do not modify
00000404  23FC FFFF   89                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000408  FFFF 0803 
0000040C  00C0      
0000040E  23FC 0000   90                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000412  0000 0803 
00000416  00C4      
00000418  23FC 0803   91                   move.l    #heap,__heap    ; pointer to free memory
0000041C  0778 0803 
00000420  00C4      
00000422  46FC 2000   92                   move.w    #$2000,SR       ; enable interrupts
                      93   
00000426  4EB9 0000   94   mainloop        jsr       _main
0000042A  0D42      
0000042C  60F8        95                   bra       mainloop
                      96   
                      97   *********************************************************************************************************
                      98   * Code to call Ram Based Interrupt handler and other exeception handler code
                      99   *********************************************************************************************************
0000042E  48E7 FFFE  100   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000432  2079 0803  101                   move.l    VL1IRQ,a0               get ram based address into a0
00000436  0064      
00000438  4E90       102                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000043A  4CDF 7FFF  103                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000043E  4E73       104                   rte
00000440  48E7 FFFE  105   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000444  2079 0803  106                   move.l    VL2IRQ,a0               get ram based address into a0
00000448  0068      
0000044A  4E90       107                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000044C  4CDF 7FFF  108                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000450  4E73       109                   rte
00000452  48E7 FFFE  110   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000456  2079 0803  111                   move.l    VL3IRQ,a0               get ram based address into a0
0000045A  006C      
0000045C  4E90       112                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000045E  4CDF 7FFF  113                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000462  4E73       114                   rte
00000464  48E7 FFFE  115   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000468  2079 0803  116                   move.l    VL4IRQ,a0               get ram based address into a0
0000046C  0070      
0000046E  4E90       117                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
00000470  4CDF 7FFF  118                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000474  4E73       119                   rte
                     120   
                     121   * Trace trap Handler
                     122   
                     123   Level5RamISR
                     124   *
                     125   **         Copy 68000 registers from debug monitor Variables,
                     126   *
                     127   *
00000476  23FC 0000  128                   move.l    #1,_Trace              switch on Trace Mode
0000047A  0001 0803 
0000047E  00D8      
00000480  13FC 0000  129                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
00000484  0040 000A 
00000488  33DF 0803  130                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
0000048C  012C      
0000048E  23DF 0803  131                   move.l    (sp)+,_PC              get at the users program counter and copy
00000492  0120      
                     132   *
00000494  23CF 0803  133                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000498  0124      
0000049A  23C0 0803  134                   move.l    d0,_d0
0000049E  00E4      
000004A0  23C1 0803  135                   move.l    d1,_d1
000004A4  00E8      
000004A6  23C2 0803  136                   move.l    d2,_d2
000004AA  00EC      
000004AC  23C3 0803  137                   move.l    d3,_d3
000004B0  00F0      
000004B2  23C4 0803  138                   move.l    d4,_d4
000004B6  00F4      
000004B8  23C5 0803  139                   move.l    d5,_d5
000004BC  00F8      
000004BE  23C6 0803  140                   move.l    d6,_d6
000004C2  00FC      
000004C4  23C7 0803  141                   move.l    d7,_d7
000004C8  0100      
                     142   *
000004CA  23C8 0803  143                   move.l    a0,_a0
000004CE  0104      
000004D0  23C9 0803  144                   move.l    a1,_a1
000004D4  0108      
000004D6  23CA 0803  145                   move.l    a2,_a2
000004DA  010C      
000004DC  23CB 0803  146                   move.l    a3,_a3
000004E0  0110      
000004E2  23CC 0803  147                   move.l    a4,_a4
000004E6  0114      
000004E8  23CD 0803  148                   move.l    a5,_a5
000004EC  0118      
000004EE  23CE 0803  149                   move.l    a6,_a6
000004F2  011C      
000004F4  4E68       150                   move.l    usp,a0
000004F6  23C8 0803  151                   move.l    a0,_USP
000004FA  0128      
                     152   *
000004FC  2079 0803  153                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
00000500  0074      
00000502  4E90       154                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     155   
                     156   ** After trace, reload 68000 registers with new values before continuing
                     157   
00000504  2039 0803  158                   move.l   _d0,d0
00000508  00E4      
0000050A  2239 0803  159                   move.l   _d1,d1
0000050E  00E8      
00000510  2439 0803  160                   move.l   _d2,d2
00000514  00EC      
00000516  2639 0803  161                   move.l   _d3,d3
0000051A  00F0      
0000051C  2839 0803  162                   move.l   _d4,d4
00000520  00F4      
00000522  2A39 0803  163                   move.l   _d5,d5
00000526  00F8      
00000528  2C39 0803  164                   move.l   _d6,d6
0000052C  00FC      
0000052E  2E39 0803  165                   move.l   _d7,d7
00000532  0100      
                     166   
00000534  2079 0803  167                   move.l   _USP,a0
00000538  0128      
0000053A  4E60       168                   move.l   a0,USP                     load user stack pointer
0000053C  2079 0803  169                   move.l   _a0,a0
00000540  0104      
00000542  2279 0803  170                   move.l   _a1,a1
00000546  0108      
00000548  2479 0803  171                   move.l   _a2,a2
0000054C  010C      
0000054E  2679 0803  172                   move.l   _a3,a3
00000552  0110      
00000554  2879 0803  173                   move.l   _a4,a4
00000558  0114      
0000055A  2A79 0803  174                   move.l   _a5,a5
0000055E  0118      
00000560  2C79 0803  175                   move.l   _a6,a6
00000564  011C      
                     176   
00000566  2E79 0803  177                   move.l   _SSP,sp
0000056A  0124      
0000056C  2F39 0803  178                   move.l   _PC,-(sp)
00000570  0120      
00000572  3F39 0803  179                   move.w   _SR,-(sp)
00000576  012C      
00000578  11F8 0074  180                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
0000057C  0000      
0000057E  4E73       181                   rte
                     182   
                     183   * address trap handler
                     184   
00000580  48E7 FFFE  185   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000584  2079 0803  186                   move.l    VL6IRQ,a0               get ram based address into a0
00000588  0078      
0000058A  4E90       187                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000058C  4CDF 7FFF  188                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000590  4E73       189                   rte
                     190   
00000592  48E7 FFFE  191   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000596  2079 0803  192                   move.l    VL7IRQ,a0               get ram based address into a0
0000059A  007C      
0000059C  4E90       193                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000059E  4CDF 7FFF  194                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005A2  4E73       195                   rte
                     196   
                     197   
                     198   ********************************************************************************************************
                     199   * Ram based Trap handler and other exeception handler code
                     200   *********************************************************************************************************
                     201   
000005A4  48E7 FFFE  202   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005A8  2079 0803  203                   move.l    VTrap0,a0                get ram based address into a0
000005AC  0080      
000005AE  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005B0  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005B4  4E73       206                   rte
                     207   
000005B6  48E7 FFFE  208   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005BA  2079 0803  209                   move.l    VTrap1,a0                get ram based address into a0
000005BE  0084      
000005C0  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005C2  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005C6  4E73       212                   rte
                     213   
000005C8  48E7 FFFE  214   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005CC  2079 0803  215                   move.l    VTrap2,a0                get ram based address into a0
000005D0  0088      
000005D2  4E90       216                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005D4  4CDF 7FFF  217                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005D8  4E73       218                   rte
                     219   
000005DA  48E7 FFFE  220   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005DE  2079 0803  221                   move.l    VTrap3,a0                get ram based address into a0
000005E2  008C      
000005E4  4E90       222                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005E6  4CDF 7FFF  223                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005EA  4E73       224                   rte
                     225   
000005EC  48E7 FFFE  226   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  227                   move.l    VTrap4,a0                get ram based address into a0
000005F4  0090      
000005F6  4E90       228                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005F8  4CDF 7FFF  229                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       230                   rte
                     231   
000005FE  48E7 FFFE  232   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  233                   move.l    VTrap5,a0                get ram based address into a0
00000606  0094      
00000608  4E90       234                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000060A  4CDF 7FFF  235                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       236                   rte
                     237   
00000610  48E7 FFFE  238   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  239                   move.l    VTrap6,a0                get ram based address into a0
00000618  0098      
0000061A  4E90       240                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  241                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       242                   rte
                     243   
00000622  48E7 FFFE  244   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  245                   move.l    VTrap7,a0                get ram based address into a0
0000062A  009C      
0000062C  4E90       246                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  247                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       248                   rte
                     249   
00000634  48E7 FFFE  250   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  251                   move.l    VTrap8,a0                get ram based address into a0
0000063C  00A0      
0000063E  4E90       252                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  253                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       254                   rte
                     255   
00000646  48E7 FFFE  256   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  257                   move.l    VTrap9,a0                get ram based address into a0
0000064E  00A4      
00000650  4E90       258                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  259                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       260                   rte
                     261   
00000658  48E7 FFFE  262   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  263                   move.l    VTrap10,a0                get ram based address into a0
00000660  00A8      
00000662  4E90       264                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  265                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       266                   rte
                     267   
0000066A  48E7 FFFE  268   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  269                   move.l    VTrap11,a0                get ram based address into a0
00000672  00AC      
00000674  4E90       270                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  271                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       272                   rte
                     273   
0000067C  48E7 FFFE  274   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  275                   move.l    VTrap12,a0                get ram based address into a0
00000684  00B0      
00000686  4E90       276                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  277                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       278                   rte
                     279   
0000068E  48E7 FFFE  280   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  281                   move.l    VTrap13,a0                get ram based address into a0
00000696  00B4      
00000698  4E90       282                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  283                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       284                   rte
                     285   
                     286   Trap14RamISR    ;Break Point Handler
                     287   *
                     288   **         Copy 68000 registers from debug monitor Variables
                     289   *
000006A0  23FC 0000  290                   move.l    #1,_Trace      switch on Trace Mode
000006A4  0001 0803 
000006A8  00D8      
000006AA  33DF 0803  291                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
000006AE  012C      
000006B0  23DF 0803  292                   move.l    (sp)+,_PC      get at the users program counter and copy
000006B4  0120      
                     293   *
000006B6  23C0 0803  294                   move.l    d0,_d0
000006BA  00E4      
000006BC  23C1 0803  295                   move.l    d1,_d1
000006C0  00E8      
000006C2  23C2 0803  296                   move.l    d2,_d2
000006C6  00EC      
000006C8  23C3 0803  297                   move.l    d3,_d3
000006CC  00F0      
000006CE  23C4 0803  298                   move.l    d4,_d4
000006D2  00F4      
000006D4  23C5 0803  299                   move.l    d5,_d5
000006D8  00F8      
000006DA  23C6 0803  300                   move.l    d6,_d6
000006DE  00FC      
000006E0  23C7 0803  301                   move.l    d7,_d7
000006E4  0100      
                     302   *
000006E6  23C8 0803  303                   move.l    a0,_a0
000006EA  0104      
000006EC  23C9 0803  304                   move.l    a1,_a1
000006F0  0108      
000006F2  23CA 0803  305                   move.l    a2,_a2
000006F6  010C      
000006F8  23CB 0803  306                   move.l    a3,_a3
000006FC  0110      
000006FE  23CC 0803  307                   move.l    a4,_a4
00000702  0114      
00000704  23CD 0803  308                   move.l    a5,_a5
00000708  0118      
0000070A  23CE 0803  309                   move.l    a6,_a6
0000070E  011C      
00000710  4E68       310                   move.l    USP,a0
00000712  23C8 0803  311                   move.l    a0,_USP
00000716  0128      
                     312   *
00000718  2079 0803  313                   move.l    VTrap14,a0             get ram based address into a0
0000071C  00B8      
0000071E  4E90       314                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     315   
                     316   ** After breakpoint reload 68000 registers with new values before continuing
                     317   
                     318   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
00000720  2039 0803  319                   move.l   _d0,d0
00000724  00E4      
00000726  2239 0803  320                   move.l   _d1,d1
0000072A  00E8      
0000072C  2439 0803  321                   move.l   _d2,d2
00000730  00EC      
00000732  2639 0803  322                   move.l   _d3,d3
00000736  00F0      
00000738  2839 0803  323                   move.l   _d4,d4
0000073C  00F4      
0000073E  2A39 0803  324                   move.l   _d5,d5
00000742  00F8      
00000744  2C39 0803  325                   move.l   _d6,d6
00000748  00FC      
0000074A  2E39 0803  326                   move.l   _d7,d7
0000074E  0100      
                     327   
00000750  2079 0803  328                   move.l   _USP,a0
00000754  0128      
00000756  4E60       329                   move.l   a0,USP        load user stack pointer A7
00000758  2079 0803  330                   move.l   _a0,a0
0000075C  0104      
0000075E  2279 0803  331                   move.l   _a1,a1
00000762  0108      
00000764  2479 0803  332                   move.l   _a2,a2
00000768  010C      
0000076A  2679 0803  333                   move.l   _a3,a3
0000076E  0110      
00000770  2879 0803  334                   move.l   _a4,a4
00000774  0114      
00000776  2A79 0803  335                   move.l   _a5,a5
0000077A  0118      
0000077C  2C79 0803  336                   move.l   _a6,a6
00000780  011C      
                     337   
00000782  2F39 0803  338                   move.l   _PC,-(sp)
00000786  0120      
00000788  3F39 0803  339                   move.w   _SR,-(sp)
0000078C  012C      
0000078E  4E73       340                   rte
                     341   
00000790  4EF9 0000  342   Trap15RamISR    jmp     _CallDebugMonitor
00000794  0AF6      
                     343   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     344   *                move.l    VTrap15,a0                get ram based address into a0
                     345   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     346   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     347   *                rte
                     348   
                     349   *********************************************************************************************************
                     350   *Default exception handler for everything without a specific handler
                     351   *********************************************************************************************************
                     352   
                     353   *
                     354   **              Jump here for each unhandled exception
                     355   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     356   *
                     357   
00000796  48E7 FFFE  358   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000079A  2079 0803  359                   move.l    VBusError,a0            get ram based address into a0
0000079E  0008      
000007A0  4E90       360                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007A2  4CDF 7FFF  361                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007A6  4E73       362                   rte
000007A8  48E7 FFFE  363   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007AC  2079 0803  364                   move.l    VAddressError,a0        get ram based address into a0
000007B0  000C      
000007B2  4E90       365                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007B4  4CDF 7FFF  366                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007B8  4E73       367                   rte
000007BA  48E7 FFFE  368   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007BE  2079 0803  369                   move.l    VIllegalInstr,a0        get ram based address into a0
000007C2  0010      
000007C4  4E90       370                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007C6  4CDF 7FFF  371                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007CA  4E73       372                   rte
000007CC  48E7 FFFE  373   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007D0  2079 0803  374                   move.l    VDividebyZero,a0        get ram based address into a0
000007D4  0014      
000007D6  4E90       375                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007D8  4CDF 7FFF  376                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007DC  4E73       377                   rte
000007DE  48E7 FFFE  378   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007E2  2079 0803  379                   move.l    VCheck,a0               get ram based address into a0
000007E6  0018      
000007E8  4E90       380                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007EA  4CDF 7FFF  381                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007EE  4E73       382                   rte
000007F0  48E7 FFFE  383   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007F4  2079 0803  384                   move.l    VTrapV,a0               get ram based address into a0
000007F8  001C      
000007FA  4E90       385                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007FC  4CDF 7FFF  386                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000800  4E73       387                   rte
00000802  48E7 FFFE  388   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  389                   move.l    VPrivilege,a0           get ram based address into a0
0000080A  0020      
0000080C  4E90       390                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  391                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       392                   rte
00000814  48E7 FFFE  393   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  394                   move.l    VTrace,a0               get ram based address into a0
0000081C  0024      
0000081E  4E90       395                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  396                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       397                   rte
00000826  48E7 FFFE  398   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  399                   move.l    VLine1010emul,a0        get ram based address into a0
0000082E  0028      
00000830  4E90       400                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  401                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       402                   rte
00000838  48E7 FFFE  403   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  404                   move.l    VLine1111emul,a0        get ram based address into a0
00000840  002C      
00000842  4E90       405                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  406                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       407                   rte
                     408   E_Unnas1
                     409   E_Unnas2
                     410   E_Unnas3
                     411   E_UnitI
                     412   E_Unnas4
                     413   E_Unnas5
                     414   E_Unnas6
                     415   E_Unnas7
                     416   E_Unnas8
                     417   E_Unnas9
                     418   E_Unnas10
                     419   E_Unnas11
                     420   E_Spuri
0000084A  60FE       421   _stop            bra _stop                         stop
                     422   ***************************************************************************************************
                     423   * Go() function in debug monitor
                     424   ***************************************************************************************************
                     425   _go
0000084C  2E79 0803  426                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
00000850  0124      
00000852  2F39 0803  427                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
00000856  0120      
00000858  3F39 0803  428                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
0000085C  012C      
                     429   
0000085E  1038 0078  430                   move.b   $00000078,d0  remove any spurious address exception arising after power on
00000862  2039 0803  431                   move.l   _d0,d0
00000866  00E4      
00000868  2239 0803  432                   move.l   _d1,d1
0000086C  00E8      
0000086E  2439 0803  433                   move.l   _d2,d2
00000872  00EC      
00000874  2639 0803  434                   move.l   _d3,d3
00000878  00F0      
0000087A  2839 0803  435                   move.l   _d4,d4
0000087E  00F4      
00000880  2A39 0803  436                   move.l   _d5,d5
00000884  00F8      
00000886  2C39 0803  437                   move.l   _d6,d6
0000088A  00FC      
0000088C  2E39 0803  438                   move.l   _d7,d7
00000890  0100      
                     439   
00000892  2079 0803  440                   move.l   _USP,a0
00000896  0128      
00000898  4E60       441                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
0000089A  2079 0803  442                   move.l   _a0,a0
0000089E  0104      
000008A0  2279 0803  443                   move.l   _a1,a1
000008A4  0108      
000008A6  2479 0803  444                   move.l   _a2,a2
000008AA  010C      
000008AC  2679 0803  445                   move.l   _a3,a3
000008B0  0110      
000008B2  2879 0803  446                   move.l   _a4,a4
000008B6  0114      
000008B8  2A79 0803  447                   move.l   _a5,a5
000008BC  0118      
000008BE  2C79 0803  448                   move.l   _a6,a6
000008C2  011C      
000008C4  4E73       449                   rte                    load the status reg and PC from the stack and commence running
                     450                                          *used to be rte but this didn't load the status byte
                     451   
                     452   ; C:\COSMICIMPALASM68K\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     453   ; #include "DebugMonitor.h"
                     454   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     455   ; #define StartOfExceptionVectorTable 0x08030000
                     456   ; //#define StartOfExceptionVectorTable 0x0B000000
                     457   ; // use 0C000000 for dram or hex 08040000 for sram
                     458   ; #define TopOfStack 0x08040000
                     459   ; //#define TopOfStack 0x0C000000
                     460   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     461   ; unsigned int i, x, y, z, PortA_Count;
                     462   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     463   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     464   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     465   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     466   ; unsigned int PC, SSP, USP ;
                     467   ; unsigned short int SR;
                     468   ; // Breakpoint variables
                     469   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     470   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     471   ; unsigned int BreakPointSetOrCleared[8] ;
                     472   ; unsigned int InstructionSize ;
                     473   ; // watchpoint variables
                     474   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     475   ; unsigned int WatchPointSetOrCleared[8] ;
                     476   ; int clock_count_ms;
                     477   ; char    TempString[100] ;
                     478   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     479   ; {
                     480   _InstallExceptionHandler:
000008C6  4E56 FFFC  481          link      A6,#-4
                     482   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
000008CA  2D7C 0803  483          move.l    #134414336,-4(A6)
000008CE  0000 FFFC 
                     484   ; RamVectorAddress[level] = (long int *)(function_ptr);
000008D2  206E FFFC  485          move.l    -4(A6),A0
000008D6  202E 000C  486          move.l    12(A6),D0
000008DA  E588       487          lsl.l     #2,D0
000008DC  21AE 0008  488          move.l    8(A6),0(A0,D0.L)
000008E0  0800      
000008E2  4E5E       489          unlk      A6
000008E4  4E75       490          rts
                     491   ; }
                     492   ; /*********************************************************************************************
                     493   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     494   ; *********************************************************************************************/
                     495   ; void Init_RS232(void)
                     496   ; {
                     497   _Init_RS232:
                     498   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
000008E6  13FC 0015  499          move.b    #21,4194368
000008EA  0040 0040 
                     500   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
000008EE  13FC 0001  501          move.b    #1,4194372
000008F2  0040 0044 
000008F6  4E75       502          rts
                     503   ; }
                     504   ; int kbhit(void)
                     505   ; {
                     506   _kbhit:
                     507   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
000008F8  1039 0040  508          move.b    4194368,D0
000008FC  0040      
000008FE  C03C 0001  509          and.b     #1,D0
00000902  0C00 0001  510          cmp.b     #1,D0
00000906  6604       511          bne.s     kbhit_1
                     512   ; return 1 ;
00000908  7001       513          moveq     #1,D0
0000090A  6002       514          bra.s     kbhit_3
                     515   kbhit_1:
                     516   ; else
                     517   ; return 0 ;
0000090C  4280       518          clr.l     D0
                     519   kbhit_3:
0000090E  4E75       520          rts
                     521   ; }
                     522   ; /*********************************************************************************************************
                     523   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     524   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     525   ; **  to allow the board to communicate with HyperTerminal Program
                     526   ; **
                     527   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     528   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     529   ; **  call _putch() also
                     530   ; *********************************************************************************************************/
                     531   ; int _putch( int c)
                     532   ; {
                     533   __putch:
00000910  4E56 0000  534          link      A6,#0
                     535   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     536   _putch_1:
00000914  1039 0040  537          move.b    4194368,D0
00000918  0040      
0000091A  C03C 0002  538          and.b     #2,D0
0000091E  0C00 0002  539          cmp.b     #2,D0
00000922  6702       540          beq.s     _putch_3
00000924  60EE       541          bra       _putch_1
                     542   _putch_3:
                     543   ; ;
                     544   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000926  202E 0008  545          move.l    8(A6),D0
0000092A  C03C 007F  546          and.b     #127,D0
0000092E  13C0 0040  547          move.b    D0,4194370
00000932  0042      
                     548   ; return c ;                                              // putchar() expects the character to be returned
00000934  202E 0008  549          move.l    8(A6),D0
00000938  4E5E       550          unlk      A6
0000093A  4E75       551          rts
                     552   ; }
                     553   ; /*********************************************************************************************************
                     554   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     555   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     556   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     557   ; **
                     558   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     559   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     560   ; **  call _getch() also
                     561   ; *********************************************************************************************************/
                     562   ; int _getch( void )
                     563   ; {
                     564   __getch:
0000093C  2F02       565          move.l    D2,-(A7)
                     566   ; int c ;
                     567   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     568   _getch_1:
0000093E  1039 0040  569          move.b    4194368,D0
00000942  0040      
00000944  C03C 0001  570          and.b     #1,D0
00000948  0C00 0001  571          cmp.b     #1,D0
0000094C  6702       572          beq.s     _getch_3
0000094E  60EE       573          bra       _getch_1
                     574   _getch_3:
                     575   ; ;
                     576   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000950  1039 0040  577          move.b    4194370,D0
00000954  0042      
00000956  C0BC 0000  578          and.l     #255,D0
0000095A  00FF      
0000095C  C0BC 0000  579          and.l     #127,D0
00000960  007F      
00000962  2400       580          move.l    D0,D2
                     581   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     582   ; if(Echo)
00000964  4AB9 0803  583          tst.l     _Echo.L
00000968  00E0      
0000096A  6708       584          beq.s     _getch_4
                     585   ; _putch(c);
0000096C  2F02       586          move.l    D2,-(A7)
0000096E  4EB8 0910  587          jsr       __putch
00000972  584F       588          addq.w    #4,A7
                     589   _getch_4:
                     590   ; return c ;
00000974  2002       591          move.l    D2,D0
00000976  241F       592          move.l    (A7)+,D2
00000978  4E75       593          rts
                     594   ; }
                     595   ; int _waitch( void )
                     596   ; {
                     597   __waitch:
0000097A  2F02       598          move.l    D2,-(A7)
                     599   ; int c ;
                     600   ; if (((char)(RS232_Status) & (char)(0x01)) != (char)(0x01)) {
0000097C  1039 0040  601          move.b    4194368,D0
00000980  0040      
00000982  C03C 0001  602          and.b     #1,D0
00000986  0C00 0001  603          cmp.b     #1,D0
0000098A  6704       604          beq.s     _waitch_1
                     605   ; return 1;
0000098C  7001       606          moveq     #1,D0
0000098E  6026       607          bra.s     _waitch_3
                     608   _waitch_1:
                     609   ; }
                     610   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000990  1039 0040  611          move.b    4194370,D0
00000994  0042      
00000996  C0BC 0000  612          and.l     #255,D0
0000099A  00FF      
0000099C  C0BC 0000  613          and.l     #127,D0
000009A0  007F      
000009A2  2400       614          move.l    D0,D2
                     615   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     616   ; if(Echo)
000009A4  4AB9 0803  617          tst.l     _Echo.L
000009A8  00E0      
000009AA  6708       618          beq.s     _waitch_4
                     619   ; _putch(c);
000009AC  2F02       620          move.l    D2,-(A7)
000009AE  4EB8 0910  621          jsr       __putch
000009B2  584F       622          addq.w    #4,A7
                     623   _waitch_4:
                     624   ; return c ;
000009B4  2002       625          move.l    D2,D0
                     626   _waitch_3:
000009B6  241F       627          move.l    (A7)+,D2
000009B8  4E75       628          rts
                     629   ; }
                     630   ; // flush the input stream for any unread characters
                     631   ; void FlushKeyboard(void)
                     632   ; {
                     633   _FlushKeyboard:
000009BA  4E56 FFFC  634          link      A6,#-4
                     635   ; char c ;
                     636   ; while(1)    {
                     637   FlushKeyboard_1:
                     638   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
000009BE  1039 0040  639          move.b    4194368,D0
000009C2  0040      
000009C4  C03C 0001  640          and.b     #1,D0
000009C8  0C00 0001  641          cmp.b     #1,D0
000009CC  6610       642          bne.s     FlushKeyboard_4
                     643   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
000009CE  1039 0040  644          move.b    4194370,D0
000009D2  0042      
000009D4  C03C 007F  645          and.b     #127,D0
000009D8  1D40 FFFF  646          move.b    D0,-1(A6)
000009DC  6002       647          bra.s     FlushKeyboard_5
                     648   FlushKeyboard_4:
                     649   ; else
                     650   ; return ;
000009DE  6002       651          bra.s     FlushKeyboard_6
                     652   FlushKeyboard_5:
000009E0  60DC       653          bra       FlushKeyboard_1
                     654   FlushKeyboard_6:
000009E2  4E5E       655          unlk      A6
000009E4  4E75       656          rts
                     657   ; }
                     658   ; }
                     659   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     660   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     661   ; char xtod(int c)
                     662   ; {
                     663   _xtod:
000009E6  4E56 0000  664          link      A6,#0
000009EA  2F02       665          move.l    D2,-(A7)
000009EC  242E 0008  666          move.l    8(A6),D2
                     667   ; if ((char)(c) <= (char)('9'))
000009F0  0C02 0039  668          cmp.b     #57,D2
000009F4  6E08       669          bgt.s     xtod_1
                     670   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
000009F6  1002       671          move.b    D2,D0
000009F8  0400 0030  672          sub.b     #48,D0
000009FC  6014       673          bra.s     xtod_3
                     674   xtod_1:
                     675   ; else if((char)(c) > (char)('F'))    // assume lower case
000009FE  0C02 0046  676          cmp.b     #70,D2
00000A02  6F08       677          ble.s     xtod_4
                     678   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000A04  1002       679          move.b    D2,D0
00000A06  0400 0057  680          sub.b     #87,D0
00000A0A  6006       681          bra.s     xtod_3
                     682   xtod_4:
                     683   ; else
                     684   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000A0C  1002       685          move.b    D2,D0
00000A0E  0400 0037  686          sub.b     #55,D0
                     687   xtod_3:
00000A12  241F       688          move.l    (A7)+,D2
00000A14  4E5E       689          unlk      A6
00000A16  4E75       690          rts
                     691   ; }
                     692   ; int Get2HexDigits(char *CheckSumPtr)
                     693   ; {
                     694   _Get2HexDigits:
00000A18  4E56 0000  695          link      A6,#0
00000A1C  2F02       696          move.l    D2,-(A7)
                     697   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000A1E  2F00       698          move.l    D0,-(A7)
00000A20  4EB8 093C  699          jsr       __getch
00000A24  2200       700          move.l    D0,D1
00000A26  201F       701          move.l    (A7)+,D0
00000A28  2F01       702          move.l    D1,-(A7)
00000A2A  4EB8 09E6  703          jsr       _xtod
00000A2E  584F       704          addq.w    #4,A7
00000A30  C0BC 0000  705          and.l     #255,D0
00000A34  00FF      
00000A36  E980       706          asl.l     #4,D0
00000A38  2F00       707          move.l    D0,-(A7)
00000A3A  2F01       708          move.l    D1,-(A7)
00000A3C  4EB8 093C  709          jsr       __getch
00000A40  221F       710          move.l    (A7)+,D1
00000A42  2F00       711          move.l    D0,-(A7)
00000A44  4EB8 09E6  712          jsr       _xtod
00000A48  584F       713          addq.w    #4,A7
00000A4A  2200       714          move.l    D0,D1
00000A4C  201F       715          move.l    (A7)+,D0
00000A4E  C2BC 0000  716          and.l     #255,D1
00000A52  00FF      
00000A54  8081       717          or.l      D1,D0
00000A56  2400       718          move.l    D0,D2
                     719   ; if(CheckSumPtr)
00000A58  4AAE 0008  720          tst.l     8(A6)
00000A5C  6706       721          beq.s     Get2HexDigits_1
                     722   ; *CheckSumPtr += i ;
00000A5E  206E 0008  723          move.l    8(A6),A0
00000A62  D510       724          add.b     D2,(A0)
                     725   Get2HexDigits_1:
                     726   ; return i ;
00000A64  2002       727          move.l    D2,D0
00000A66  241F       728          move.l    (A7)+,D2
00000A68  4E5E       729          unlk      A6
00000A6A  4E75       730          rts
                     731   ; }
                     732   ; int Get4HexDigits(char *CheckSumPtr)
                     733   ; {
                     734   _Get4HexDigits:
00000A6C  4E56 0000  735          link      A6,#0
                     736   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000A70  2F2E 0008  737          move.l    8(A6),-(A7)
00000A74  4EB8 0A18  738          jsr       _Get2HexDigits
00000A78  584F       739          addq.w    #4,A7
00000A7A  E180       740          asl.l     #8,D0
00000A7C  2F00       741          move.l    D0,-(A7)
00000A7E  2F2E 0008  742          move.l    8(A6),-(A7)
00000A82  4EB8 0A18  743          jsr       _Get2HexDigits
00000A86  584F       744          addq.w    #4,A7
00000A88  2200       745          move.l    D0,D1
00000A8A  201F       746          move.l    (A7)+,D0
00000A8C  8081       747          or.l      D1,D0
00000A8E  4E5E       748          unlk      A6
00000A90  4E75       749          rts
                     750   ; }
                     751   ; int Get6HexDigits(char *CheckSumPtr)
                     752   ; {
                     753   _Get6HexDigits:
00000A92  4E56 0000  754          link      A6,#0
                     755   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000A96  2F2E 0008  756          move.l    8(A6),-(A7)
00000A9A  4EB8 0A6C  757          jsr       _Get4HexDigits
00000A9E  584F       758          addq.w    #4,A7
00000AA0  E180       759          asl.l     #8,D0
00000AA2  2F00       760          move.l    D0,-(A7)
00000AA4  2F2E 0008  761          move.l    8(A6),-(A7)
00000AA8  4EB8 0A18  762          jsr       _Get2HexDigits
00000AAC  584F       763          addq.w    #4,A7
00000AAE  2200       764          move.l    D0,D1
00000AB0  201F       765          move.l    (A7)+,D0
00000AB2  8081       766          or.l      D1,D0
00000AB4  4E5E       767          unlk      A6
00000AB6  4E75       768          rts
                     769   ; }
                     770   ; int Get8HexDigits(char *CheckSumPtr)
                     771   ; {
                     772   _Get8HexDigits:
00000AB8  4E56 0000  773          link      A6,#0
                     774   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000ABC  2F2E 0008  775          move.l    8(A6),-(A7)
00000AC0  4EB8 0A6C  776          jsr       _Get4HexDigits
00000AC4  584F       777          addq.w    #4,A7
00000AC6  E180       778          asl.l     #8,D0
00000AC8  E180       779          asl.l     #8,D0
00000ACA  2F00       780          move.l    D0,-(A7)
00000ACC  2F2E 0008  781          move.l    8(A6),-(A7)
00000AD0  4EB8 0A6C  782          jsr       _Get4HexDigits
00000AD4  584F       783          addq.w    #4,A7
00000AD6  2200       784          move.l    D0,D1
00000AD8  201F       785          move.l    (A7)+,D0
00000ADA  8081       786          or.l      D1,D0
00000ADC  4E5E       787          unlk      A6
00000ADE  4E75       788          rts
                     789   ; }
                     790   ; void UnknownCommand()
                     791   ; {
                     792   _UnknownCommand:
                     793   ; printf("\r\nUnknown Command.....\r\n") ;
00000AE0  4879 0000  794          pea       @m68kde~1_1.L
00000AE4  48D0      
00000AE6  4EB9 0000  795          jsr       _printf
00000AEA  3E3C      
00000AEC  584F       796          addq.w    #4,A7
                     797   ; Help() ;
00000AEE  4EB9 0000  798          jsr       _Help
00000AF2  0B0C      
00000AF4  4E75       799          rts
                     800   ; }
                     801   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                     802   ; void CallDebugMonitor(void)
                     803   ; {
                     804   _CallDebugMonitor:
                     805   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00000AF6  4879 0000  806          pea       @m68kde~1_2.L
00000AFA  48EA      
00000AFC  4EB9 0000  807          jsr       _printf
00000B00  3E3C      
00000B02  584F       808          addq.w    #4,A7
                     809   ; menu();
00000B04  4EB9 0000  810          jsr       _menu
00000B08  0B5A      
00000B0A  4E75       811          rts
                     812   ; }
                     813   ; void Help(void)
                     814   ; {
                     815   _Help:
00000B0C  48E7 2020  816          movem.l   D2/A2,-(A7)
00000B10  45F9 0000  817          lea       _printf.L,A2
00000B14  3E3C      
                     818   ; char *banner = "\r\n----------------------------------------------------------------" ;
00000B16  41F9 0000  819          lea       @m68kde~1_3.L,A0
00000B1A  490A      
00000B1C  2408       820          move.l    A0,D2
                     821   ; printf(banner) ;
00000B1E  2F02       822          move.l    D2,-(A7)
00000B20  4E92       823          jsr       (A2)
00000B22  584F       824          addq.w    #4,A7
                     825   ; printf("\r\n  Final Project") ;
00000B24  4879 0000  826          pea       @m68kde~1_4.L
00000B28  494E      
00000B2A  4E92       827          jsr       (A2)
00000B2C  584F       828          addq.w    #4,A7
                     829   ; printf(banner) ;
00000B2E  2F02       830          move.l    D2,-(A7)
00000B30  4E92       831          jsr       (A2)
00000B32  584F       832          addq.w    #4,A7
                     833   ; printf("\r\n  T    - Run Cosmic Impala Game") ;
00000B34  4879 0000  834          pea       @m68kde~1_5.L
00000B38  4960      
00000B3A  4E92       835          jsr       (A2)
00000B3C  584F       836          addq.w    #4,A7
                     837   ; printf(banner) ;
00000B3E  2F02       838          move.l    D2,-(A7)
00000B40  4E92       839          jsr       (A2)
00000B42  584F       840          addq.w    #4,A7
                     841   ; printf("\r\n  G    - Run Graphics Test") ;
00000B44  4879 0000  842          pea       @m68kde~1_6.L
00000B48  4982      
00000B4A  4E92       843          jsr       (A2)
00000B4C  584F       844          addq.w    #4,A7
                     845   ; printf(banner) ;
00000B4E  2F02       846          move.l    D2,-(A7)
00000B50  4E92       847          jsr       (A2)
00000B52  584F       848          addq.w    #4,A7
00000B54  4CDF 0404  849          movem.l   (A7)+,D2/A2
00000B58  4E75       850          rts
                     851   ; }
                     852   ; void menu(void)
                     853   ; {
                     854   _menu:
00000B5A  4E56 FFFC  855          link      A6,#-4
00000B5E  48E7 2020  856          movem.l   D2/A2,-(A7)
00000B62  45F9 0000  857          lea       _printf.L,A2
00000B66  3E3C      
                     858   ; char c;
                     859   ; int c1 ;
                     860   ; while(1)    {
                     861   menu_1:
                     862   ; FlushKeyboard() ;               // dump unread characters from keyboard
00000B68  4EB8 09BA  863          jsr       _FlushKeyboard
                     864   ; printf("\r\n#") ;
00000B6C  4879 0000  865          pea       @m68kde~1_7.L
00000B70  49A0      
00000B72  4E92       866          jsr       (A2)
00000B74  584F       867          addq.w    #4,A7
                     868   ; c = toupper(_getch());
00000B76  2F00       869          move.l    D0,-(A7)
00000B78  4EB8 093C  870          jsr       __getch
00000B7C  2200       871          move.l    D0,D1
00000B7E  201F       872          move.l    (A7)+,D0
00000B80  2F01       873          move.l    D1,-(A7)
00000B82  4EB9 0000  874          jsr       _toupper
00000B86  3E10      
00000B88  584F       875          addq.w    #4,A7
00000B8A  1400       876          move.b    D0,D2
                     877   ; if ( c == (char)('T'))  {
00000B8C  0C02 0054  878          cmp.b     #84,D2
00000B90  6622       879          bne.s     menu_4
                     880   ; printf("\nRunning Cosmic Impalas Game\n");
00000B92  4879 0000  881          pea       @m68kde~1_8.L
00000B96  49A4      
00000B98  4E92       882          jsr       (A2)
00000B9A  584F       883          addq.w    #4,A7
                     884   ; Echo = 0; // turn off echoing of characters to speed up game
00000B9C  42B9 0803  885          clr.l     _Echo.L
00000BA0  00E0      
                     886   ; cosmic_impalas_main();
00000BA2  4EB9 0000  887          jsr       _cosmic_impalas_main
00000BA6  3DE4      
                     888   ; Echo = 1; // turn echoing back on
00000BA8  23FC 0000  889          move.l    #1,_Echo.L
00000BAC  0001 0803 
00000BB0  00E0      
                     890   ; continue;
00000BB2  601C       891          bra.s     menu_2
                     892   menu_4:
                     893   ; } 
                     894   ; if ( c == (char)('G'))  {
00000BB4  0C02 0047  895          cmp.b     #71,D2
00000BB8  6612       896          bne.s     menu_6
                     897   ; printf("\nRunning Graphics Test\n");
00000BBA  4879 0000  898          pea       @m68kde~1_9.L
00000BBE  49C2      
00000BC0  4E92       899          jsr       (A2)
00000BC2  584F       900          addq.w    #4,A7
                     901   ; graphics_test_main();
00000BC4  4EB9 0000  902          jsr       _graphics_test_main
00000BC8  1BD6      
                     903   ; continue;
00000BCA  6004       904          bra.s     menu_2
                     905   menu_6:
                     906   ; } 
                     907   ; UnknownCommand() ;
00000BCC  4EB8 0AE0  908          jsr       _UnknownCommand
                     909   menu_2:
00000BD0  6096       910          bra       menu_1
                     911   ; }
                     912   ; }
                     913   ; void PrintErrorMessageandAbort(char *string) {
                     914   _PrintErrorMessageandAbort:
00000BD2  4E56 0000  915          link      A6,#0
                     916   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00000BD6  4879 0000  917          pea       @m68kde~1_10.L
00000BDA  49DA      
00000BDC  4EB9 0000  918          jsr       _printf
00000BE0  3E3C      
00000BE2  584F       919          addq.w    #4,A7
                     920   ; printf("%s\r\n", string) ;
00000BE4  2F2E 0008  921          move.l    8(A6),-(A7)
00000BE8  4879 0000  922          pea       @m68kde~1_11.L
00000BEC  49F6      
00000BEE  4EB9 0000  923          jsr       _printf
00000BF2  3E3C      
00000BF4  504F       924          addq.w    #8,A7
                     925   ; menu() ;
00000BF6  4EB8 0B5A  926          jsr       _menu
00000BFA  4E5E       927          unlk      A6
00000BFC  4E75       928          rts
                     929   ; }
                     930   ; void IRQMessage(int level) {
                     931   _IRQMessage:
00000BFE  4E56 0000  932          link      A6,#0
                     933   ; printf("\r\n\r\nProgram ABORT !!!!!");
00000C02  4879 0000  934          pea       @m68kde~1_12.L
00000C06  49FC      
00000C08  4EB9 0000  935          jsr       _printf
00000C0C  3E3C      
00000C0E  584F       936          addq.w    #4,A7
                     937   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00000C10  2F2E 0008  938          move.l    8(A6),-(A7)
00000C14  4879 0000  939          pea       @m68kde~1_13.L
00000C18  4A14      
00000C1A  4EB9 0000  940          jsr       _printf
00000C1E  3E3C      
00000C20  504F       941          addq.w    #8,A7
                     942   ; menu() ;
00000C22  4EB8 0B5A  943          jsr       _menu
00000C26  4E5E       944          unlk      A6
00000C28  4E75       945          rts
                     946   ; }
                     947   ; void UnhandledIRQ1(void) {
                     948   _UnhandledIRQ1:
                     949   ; IRQMessage(1);
00000C2A  4878 0001  950          pea       1
00000C2E  4EB8 0BFE  951          jsr       _IRQMessage
00000C32  584F       952          addq.w    #4,A7
00000C34  4E75       953          rts
                     954   ; }
                     955   ; void UnhandledIRQ2(void) {
                     956   _UnhandledIRQ2:
                     957   ; IRQMessage(2);
00000C36  4878 0002  958          pea       2
00000C3A  4EB8 0BFE  959          jsr       _IRQMessage
00000C3E  584F       960          addq.w    #4,A7
00000C40  4E75       961          rts
                     962   ; }
                     963   ; void UnhandledIRQ3(void){
                     964   _UnhandledIRQ3:
                     965   ; IRQMessage(3);
00000C42  4878 0003  966          pea       3
00000C46  4EB8 0BFE  967          jsr       _IRQMessage
00000C4A  584F       968          addq.w    #4,A7
00000C4C  4E75       969          rts
                     970   ; }
                     971   ; void UnhandledIRQ4(void) {
                     972   _UnhandledIRQ4:
                     973   ; IRQMessage(4);
00000C4E  4878 0004  974          pea       4
00000C52  4EB8 0BFE  975          jsr       _IRQMessage
00000C56  584F       976          addq.w    #4,A7
00000C58  4E75       977          rts
                     978   ; }
                     979   ; void UnhandledIRQ5(void) {
                     980   _UnhandledIRQ5:
                     981   ; IRQMessage(5);
00000C5A  4878 0005  982          pea       5
00000C5E  4EB8 0BFE  983          jsr       _IRQMessage
00000C62  584F       984          addq.w    #4,A7
00000C64  4E75       985          rts
                     986   ; }
                     987   ; void UnhandledIRQ6(void) {
                     988   _UnhandledIRQ6:
                     989   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00000C66  4879 0000  990          pea       @m68kde~1_14.L
00000C6A  4A38      
00000C6C  4EB8 0BD2  991          jsr       _PrintErrorMessageandAbort
00000C70  584F       992          addq.w    #4,A7
                     993   ; menu() ;
00000C72  4EB8 0B5A  994          jsr       _menu
00000C76  4E75       995          rts
                     996   ; }
                     997   ; void UnhandledIRQ7(void) {
                     998   _UnhandledIRQ7:
                     999   ; IRQMessage(7);
00000C78  4878 0007 1000          pea       7
00000C7C  4EB8 0BFE 1001          jsr       _IRQMessage
00000C80  584F      1002          addq.w    #4,A7
00000C82  4E75      1003          rts
                    1004   ; }
                    1005   ; void UnhandledTrap(void) {
                    1006   _UnhandledTrap:
                    1007   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00000C84  4879 0000 1008          pea       @m68kde~1_15.L
00000C88  4A78      
00000C8A  4EB8 0BD2 1009          jsr       _PrintErrorMessageandAbort
00000C8E  584F      1010          addq.w    #4,A7
00000C90  4E75      1011          rts
                    1012   ; }
                    1013   ; void BusError() {
                    1014   _BusError:
                    1015   ; PrintErrorMessageandAbort("BUS Error!") ;
00000C92  4879 0000 1016          pea       @m68kde~1_16.L
00000C96  4A8E      
00000C98  4EB8 0BD2 1017          jsr       _PrintErrorMessageandAbort
00000C9C  584F      1018          addq.w    #4,A7
00000C9E  4E75      1019          rts
                    1020   ; }
                    1021   ; void AddressError() {
                    1022   _AddressError:
                    1023   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00000CA0  4879 0000 1024          pea       @m68kde~1_17.L
00000CA4  4A9A      
00000CA6  4EB8 0BD2 1025          jsr       _PrintErrorMessageandAbort
00000CAA  584F      1026          addq.w    #4,A7
00000CAC  4E75      1027          rts
                    1028   ; }
                    1029   ; void IllegalInstruction() {
                    1030   _IllegalInstruction:
                    1031   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00000CAE  4879 0000 1032          pea       @m68kde~1_18.L
00000CB2  4AAA      
00000CB4  4EB8 0BD2 1033          jsr       _PrintErrorMessageandAbort
00000CB8  584F      1034          addq.w    #4,A7
00000CBA  4E75      1035          rts
                    1036   ; }
                    1037   ; void Dividebyzero() {
                    1038   _Dividebyzero:
                    1039   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00000CBC  4879 0000 1040          pea       @m68kde~1_19.L
00000CC0  4ABE      
00000CC2  4EB8 0BD2 1041          jsr       _PrintErrorMessageandAbort
00000CC6  584F      1042          addq.w    #4,A7
00000CC8  4E75      1043          rts
                    1044   ; }
                    1045   ; void Check() {
                    1046   _Check:
                    1047   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00000CCA  4879 0000 1048          pea       @m68kde~1_20.L
00000CCE  4ACE      
00000CD0  4EB8 0BD2 1049          jsr       _PrintErrorMessageandAbort
00000CD4  584F      1050          addq.w    #4,A7
00000CD6  4E75      1051          rts
                    1052   ; }
                    1053   ; void Trapv() {
                    1054   _Trapv:
                    1055   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00000CD8  4879 0000 1056          pea       @m68kde~1_21.L
00000CDC  4AE0      
00000CDE  4EB8 0BD2 1057          jsr       _PrintErrorMessageandAbort
00000CE2  584F      1058          addq.w    #4,A7
00000CE4  4E75      1059          rts
                    1060   ; }
                    1061   ; void PrivError() {
                    1062   _PrivError:
                    1063   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00000CE6  4879 0000 1064          pea       @m68kde~1_22.L
00000CEA  4AF2      
00000CEC  4EB8 0BD2 1065          jsr       _PrintErrorMessageandAbort
00000CF0  584F      1066          addq.w    #4,A7
00000CF2  4E75      1067          rts
                    1068   ; }
                    1069   ; void UnitIRQ() {
                    1070   _UnitIRQ:
                    1071   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00000CF4  4879 0000 1072          pea       @m68kde~1_23.L
00000CF8  4B06      
00000CFA  4EB8 0BD2 1073          jsr       _PrintErrorMessageandAbort
00000CFE  584F      1074          addq.w    #4,A7
00000D00  4E75      1075          rts
                    1076   ; }
                    1077   ; void Spurious() {
                    1078   _Spurious:
                    1079   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00000D02  4879 0000 1080          pea       @m68kde~1_24.L
00000D06  4B18      
00000D08  4EB8 0BD2 1081          jsr       _PrintErrorMessageandAbort
00000D0C  584F      1082          addq.w    #4,A7
00000D0E  4E75      1083          rts
                    1084   ; }
                    1085   ; /*********************************************************************************
                    1086   ; ** Timer ISR
                    1087   ; **********************************************************************************/
                    1088   ; void Timer_ISR(void)
                    1089   ; {
                    1090   _Timer_ISR:
                    1091   ; if(Timer1Status == 1) {       // Did Timer 1 produce the Interrupt?
00000D10  1039 0040 1092          move.b    4194354,D0
00000D14  0032      
00000D16  0C00 0001 1093          cmp.b     #1,D0
00000D1A  6612      1094          bne.s     Timer_ISR_1
                    1095   ; clock_count_ms = clock_count_ms + 10; //100 HZ clock = 10ms per clock tick
00000D1C  06B9 0000 1096          add.l     #10,_clock_count_ms.L
00000D20  000A 0803 
00000D24  01C2      
                    1097   ; //printf("in timer isr, clock_count_ms = %d\n",clock_count_ms);
                    1098   ; Timer1Control = 3;      	// if so clear interrupt and restart timer
00000D26  13FC 0003 1099          move.b    #3,4194354
00000D2A  0040 0032 
                    1100   Timer_ISR_1:
00000D2E  4E75      1101          rts
                    1102   ; }
                    1103   ; }
                    1104   ; /**********************************************************************************
                    1105   ; ** Timer Initialisation Routine
                    1106   ; **********************************************************************************/
                    1107   ; void Timer1_Init(void)
                    1108   ; {
                    1109   _Timer1_Init:
                    1110   ; Timer1Data = 0x03;		// program 100 hz time delay into timer 1.
00000D30  13FC 0003 1111          move.b    #3,4194352
00000D34  0040 0030 
                    1112   ; /*
                    1113   ; ** timer driven off 25Mhz clock so program value so that it counts down in 0.01 secs
                    1114   ; ** the example 0x03 above is loaded into top 8 bits of a 24 bit timer so reads as
                    1115   ; ** 0x03FFFF a value of 0x03 would be 262,143/25,000,000, so is close to 1/100th sec
                    1116   ; **
                    1117   ; **
                    1118   ; ** Now write binary 00000011 to timer control register:
                    1119   ; **	Bit0 = 1 (enable interrupt from that timer)
                    1120   ; **	Bit 1 = 1 enable counting
                    1121   ; */
                    1122   ; Timer1Control = 3;
00000D38  13FC 0003 1123          move.b    #3,4194354
00000D3C  0040 0032 
00000D40  4E75      1124          rts
                    1125   ; }
                    1126   ; void main(void)
                    1127   ; {
                    1128   _main:
00000D42  4E56 FFF4 1129          link      A6,#-12
00000D46  48E7 0038 1130          movem.l   A2/A3/A4,-(A7)
00000D4A  45F8 08C6 1131          lea       _InstallExceptionHandler.L,A2
00000D4E  47F8 0D10 1132          lea       _Timer_ISR.L,A3
00000D52  49F9 0000 1133          lea       _printf.L,A4
00000D56  3E3C      
                    1134   ; char *BugMessage = "DE1-68k 15/11/2024 14:44";
00000D58  41F9 0000 1135          lea       @m68kde~1_25.L,A0
00000D5C  4B26      
00000D5E  2D48 FFF4 1136          move.l    A0,-12(A6)
                    1137   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00000D62  41F9 0000 1138          lea       @m68kde~1_26.L,A0
00000D66  4B40      
00000D68  2D48 FFF8 1139          move.l    A0,-8(A6)
                    1140   ; char *nameAndStudentNumber = "Yair Linn";
00000D6C  41F9 0000 1141          lea       @m68kde~1_27.L,A0
00000D70  4B5E      
00000D72  2D48 FFFC 1142          move.l    A0,-4(A6)
                    1143   ; clock_count_ms = 0;
00000D76  42B9 0803 1144          clr.l     _clock_count_ms.L
00000D7A  01C2      
                    1145   ; Init_RS232() ;     // initialise the RS232 port
00000D7C  4EB8 08E6 1146          jsr       _Init_RS232
                    1147   ; InstallExceptionHandler(Timer_ISR, 25) ;		      // install handler for interrupts
00000D80  4878 0019 1148          pea       25
00000D84  2F0B      1149          move.l    A3,-(A7)
00000D86  4E92      1150          jsr       (A2)
00000D88  504F      1151          addq.w    #8,A7
                    1152   ; InstallExceptionHandler(Timer_ISR, 26) ;		      // install handler for interrupts
00000D8A  4878 001A 1153          pea       26
00000D8E  2F0B      1154          move.l    A3,-(A7)
00000D90  4E92      1155          jsr       (A2)
00000D92  504F      1156          addq.w    #8,A7
                    1157   ; InstallExceptionHandler(Timer_ISR, 27) ;		      // install handler for interrupts
00000D94  4878 001B 1158          pea       27
00000D98  2F0B      1159          move.l    A3,-(A7)
00000D9A  4E92      1160          jsr       (A2)
00000D9C  504F      1161          addq.w    #8,A7
                    1162   ; InstallExceptionHandler(Timer_ISR, 28) ;		      // install handler for interrupts
00000D9E  4878 001C 1163          pea       28
00000DA2  2F0B      1164          move.l    A3,-(A7)
00000DA4  4E92      1165          jsr       (A2)
00000DA6  504F      1166          addq.w    #8,A7
                    1167   ; InstallExceptionHandler(Timer_ISR, 29) ;		      // install handler for interrupts
00000DA8  4878 001D 1168          pea       29
00000DAC  2F0B      1169          move.l    A3,-(A7)
00000DAE  4E92      1170          jsr       (A2)
00000DB0  504F      1171          addq.w    #8,A7
                    1172   ; InstallExceptionHandler(Timer_ISR, 30) ;		      // install handler for interrupts
00000DB2  4878 001E 1173          pea       30
00000DB6  2F0B      1174          move.l    A3,-(A7)
00000DB8  4E92      1175          jsr       (A2)
00000DBA  504F      1176          addq.w    #8,A7
                    1177   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00000DBC  4878 001F 1178          pea       31
00000DC0  4878 0C78 1179          pea       _UnhandledIRQ7.L
00000DC4  4E92      1180          jsr       (A2)
00000DC6  504F      1181          addq.w    #8,A7
                    1182   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00000DC8  4878 0002 1183          pea       2
00000DCC  4878 0C92 1184          pea       _BusError.L
00000DD0  4E92      1185          jsr       (A2)
00000DD2  504F      1186          addq.w    #8,A7
                    1187   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00000DD4  4878 0003 1188          pea       3
00000DD8  4878 0CA0 1189          pea       _AddressError.L
00000DDC  4E92      1190          jsr       (A2)
00000DDE  504F      1191          addq.w    #8,A7
                    1192   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00000DE0  4878 0004 1193          pea       4
00000DE4  4878 0CAE 1194          pea       _IllegalInstruction.L
00000DE8  4E92      1195          jsr       (A2)
00000DEA  504F      1196          addq.w    #8,A7
                    1197   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00000DEC  4878 0005 1198          pea       5
00000DF0  4878 0CBC 1199          pea       _Dividebyzero.L
00000DF4  4E92      1200          jsr       (A2)
00000DF6  504F      1201          addq.w    #8,A7
                    1202   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00000DF8  4878 0006 1203          pea       6
00000DFC  4878 0CCA 1204          pea       _Check.L
00000E00  4E92      1205          jsr       (A2)
00000E02  504F      1206          addq.w    #8,A7
                    1207   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00000E04  4878 0007 1208          pea       7
00000E08  4878 0CD8 1209          pea       _Trapv.L
00000E0C  4E92      1210          jsr       (A2)
00000E0E  504F      1211          addq.w    #8,A7
                    1212   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00000E10  4878 0008 1213          pea       8
00000E14  4878 0CE6 1214          pea       _PrivError.L
00000E18  4E92      1215          jsr       (A2)
00000E1A  504F      1216          addq.w    #8,A7
                    1217   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00000E1C  4878 000F 1218          pea       15
00000E20  4878 0CF4 1219          pea       _UnitIRQ.L
00000E24  4E92      1220          jsr       (A2)
00000E26  504F      1221          addq.w    #8,A7
                    1222   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00000E28  4878 0018 1223          pea       24
00000E2C  4878 0CCA 1224          pea       _Check.L
00000E30  4E92      1225          jsr       (A2)
00000E32  504F      1226          addq.w    #8,A7
                    1227   ; Timer1_Init();
00000E34  4EB8 0D30 1228          jsr       _Timer1_Init
                    1229   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00000E38  4EB8 09BA 1230          jsr       _FlushKeyboard
                    1231   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00000E3C  4239 0040 1232          clr.b     4194314
00000E40  000A      
                    1233   ; printf("\r\n%s", BugMessage) ;
00000E42  2F2E FFF4 1234          move.l    -12(A6),-(A7)
00000E46  4879 0000 1235          pea       @m68kde~1_28.L
00000E4A  4B68      
00000E4C  4E94      1236          jsr       (A4)
00000E4E  504F      1237          addq.w    #8,A7
                    1238   ; printf("\r\n%s", CopyrightMessage) ;
00000E50  2F2E FFF8 1239          move.l    -8(A6),-(A7)
00000E54  4879 0000 1240          pea       @m68kde~1_29.L
00000E58  4B6E      
00000E5A  4E94      1241          jsr       (A4)
00000E5C  504F      1242          addq.w    #8,A7
                    1243   ; printf("\r\n%s", nameAndStudentNumber);
00000E5E  2F2E FFFC 1244          move.l    -4(A6),-(A7)
00000E62  4879 0000 1245          pea       @m68kde~1_30.L
00000E66  4B74      
00000E68  4E94      1246          jsr       (A4)
00000E6A  504F      1247          addq.w    #8,A7
                    1248   ; menu();
00000E6C  4EB8 0B5A 1249          jsr       _menu
00000E70  4CDF 1C00 1250          movem.l   (A7)+,A2/A3/A4
00000E74  4E5E      1251          unlk      A6
00000E76  4E75      1252          rts
                    1253   ; }
                    1254   ; C:\COSMICIMPALASM68K\PROGRAMS\DEBUGMONITORCODE\GRAPHICS_TEST.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    1255   ; #include <string.h>
                    1256   ; #define PIXEL_BUFFER_VGA_BASEADDRESS   (0x01000000)
                    1257   ; #define VIDMEM_DIM1_W_BLANK_EDGES (256)
                    1258   ; #define VIDMEM_DIM1 (224)
                    1259   ; #define VIDMEM_DIM2 (32)
                    1260   ; #define VIDEOMEM_ADDR(x,y) ((volatile unsigned char *)(PIXEL_BUFFER_VGA_BASEADDRESS + ((y)*VIDMEM_DIM1_W_BLANK_EDGES)+(x)))
                    1261   ; #define VIDMEM(x,y) (*VIDEOMEM_ADDR(x,y))
                    1262   ; #define WRITE_VIDMEM(x,y,CH) ((*(volatile unsigned char *)(PIXEL_BUFFER_VGA_BASEADDRESS + ((y)*VIDMEM_DIM1_W_BLANK_EDGES)+(x))) = CH)
                    1263   ; #define LOCHAR 0x20
                    1264   ; #define HICHAR 0x5e
                    1265   ; char graphics_font8x8[HICHAR-LOCHAR+1][8];
                    1266   ; void graphics_test_main();
                    1267   ; /// GRAPHICS FUNCTIONS
                    1268   ; void graphics_test_clrscr() {
                    1269   _graphics_test_clrscr:
00000E78  48E7 3000 1270          movem.l   D2/D3,-(A7)
                    1271   ; int a;
                    1272   ; int b;
                    1273   ; for (a = 0; a < VIDMEM_DIM1; a++) {
00000E7C  4283      1274          clr.l     D3
                    1275   graphics_test_clrscr_1:
00000E7E  0C83 0000 1276          cmp.l     #224,D3
00000E82  00E0      
00000E84  6C00 0032 1277          bge       graphics_test_clrscr_3
                    1278   ; for (b = 0; b < VIDMEM_DIM2; b++) {
00000E88  4282      1279          clr.l     D2
                    1280   graphics_test_clrscr_4:
00000E8A  0C82 0000 1281          cmp.l     #32,D2
00000E8E  0020      
00000E90  6C22      1282          bge.s     graphics_test_clrscr_6
                    1283   ; WRITE_VIDMEM(a,b,0 /*0xff*/);	   
00000E92  203C 0100 1284          move.l    #16777216,D0
00000E96  0000      
00000E98  2F02      1285          move.l    D2,-(A7)
00000E9A  4878 0100 1286          pea       256
00000E9E  4EB9 0000 1287          jsr       LMUL
00000EA2  3E80      
00000EA4  2217      1288          move.l    (A7),D1
00000EA6  504F      1289          addq.w    #8,A7
00000EA8  D283      1290          add.l     D3,D1
00000EAA  D081      1291          add.l     D1,D0
00000EAC  2040      1292          move.l    D0,A0
00000EAE  4210      1293          clr.b     (A0)
00000EB0  5282      1294          addq.l    #1,D2
00000EB2  60D6      1295          bra       graphics_test_clrscr_4
                    1296   graphics_test_clrscr_6:
00000EB4  5283      1297          addq.l    #1,D3
00000EB6  60C6      1298          bra       graphics_test_clrscr_1
                    1299   graphics_test_clrscr_3:
00000EB8  4CDF 000C 1300          movem.l   (A7)+,D2/D3
00000EBC  4E75      1301          rts
                    1302   ; }
                    1303   ; }
                    1304   ; }
                    1305   ; void graphics_xor_pixel(unsigned char x, unsigned char y) {
                    1306   _graphics_xor_pixel:
00000EBE  4E56 FFFC 1307          link      A6,#-4
                    1308   ; unsigned char* dest;
                    1309   ; dest =  VIDEOMEM_ADDR(x,y>>3);
00000EC2  203C 0100 1310          move.l    #16777216,D0
00000EC6  0000      
00000EC8  122E 000F 1311          move.b    15(A6),D1
00000ECC  E609      1312          lsr.b     #3,D1
00000ECE  C27C 00FF 1313          and.w     #255,D1
00000ED2  E141      1314          asl.w     #8,D1
00000ED4  48C1      1315          ext.l     D1
00000ED6  2F00      1316          move.l    D0,-(A7)
00000ED8  102E 000B 1317          move.b    11(A6),D0
00000EDC  C0BC 0000 1318          and.l     #255,D0
00000EE0  00FF      
00000EE2  D280      1319          add.l     D0,D1
00000EE4  201F      1320          move.l    (A7)+,D0
00000EE6  D081      1321          add.l     D1,D0
00000EE8  2D40 FFFC 1322          move.l    D0,-4(A6)
                    1323   ; *dest = (*dest) ^ (0x1 << (y&7));
00000EEC  206E FFFC 1324          move.l    -4(A6),A0
00000EF0  7001      1325          moveq     #1,D0
00000EF2  122E 000F 1326          move.b    15(A6),D1
00000EF6  C23C 0007 1327          and.b     #7,D1
00000EFA  E328      1328          lsl.b     D1,D0
00000EFC  B110      1329          eor.b     D0,(A0)
00000EFE  4E5E      1330          unlk      A6
00000F00  4E75      1331          rts
                    1332   ; }
                    1333   ; void graphics_draw_vline(unsigned char x, unsigned char y1, unsigned char y2) {
                    1334   _graphics_draw_vline:
00000F02  4E56 FFFC 1335          link      A6,#-4
00000F06  48E7 3E00 1336          movem.l   D2/D3/D4/D5/D6,-(A7)
00000F0A  1A2E 0013 1337          move.b    19(A6),D5
00000F0E  CABC 0000 1338          and.l     #255,D5
00000F12  00FF      
                    1339   ; unsigned char yb1;
                    1340   ; unsigned char yb2;
                    1341   ; unsigned char val;
                    1342   ; unsigned char* dest;
                    1343   ; int nchars;
                    1344   ; yb1 = y1>>3;
00000F14  102E 000F 1345          move.b    15(A6),D0
00000F18  E608      1346          lsr.b     #3,D0
00000F1A  1C00      1347          move.b    D0,D6
                    1348   ; yb2 = y2>>3;
00000F1C  1005      1349          move.b    D5,D0
00000F1E  E608      1350          lsr.b     #3,D0
00000F20  1D40 FFFF 1351          move.b    D0,-1(A6)
                    1352   ; nchars  = (((unsigned int) yb2) & 0xff) - (((unsigned int) yb1) & 0xff);
00000F24  102E FFFF 1353          move.b    -1(A6),D0
00000F28  C0BC 0000 1354          and.l     #255,D0
00000F2C  00FF      
00000F2E  C0BC 0000 1355          and.l     #255,D0
00000F32  00FF      
00000F34  1206      1356          move.b    D6,D1
00000F36  C2BC 0000 1357          and.l     #255,D1
00000F3A  00FF      
00000F3C  C2BC 0000 1358          and.l     #255,D1
00000F40  00FF      
00000F42  9081      1359          sub.l     D1,D0
00000F44  2800      1360          move.l    D0,D4
                    1361   ; dest = VIDEOMEM_ADDR(x,yb1);
00000F46  203C 0100 1362          move.l    #16777216,D0
00000F4A  0000      
00000F4C  1206      1363          move.b    D6,D1
00000F4E  C27C 00FF 1364          and.w     #255,D1
00000F52  E141      1365          asl.w     #8,D1
00000F54  48C1      1366          ext.l     D1
00000F56  2F00      1367          move.l    D0,-(A7)
00000F58  102E 000B 1368          move.b    11(A6),D0
00000F5C  C0BC 0000 1369          and.l     #255,D0
00000F60  00FF      
00000F62  D280      1370          add.l     D0,D1
00000F64  201F      1371          move.l    (A7)+,D0
00000F66  D081      1372          add.l     D1,D0
00000F68  2600      1373          move.l    D0,D3
                    1374   ; val = 0xff << (y1&7);
00000F6A  303C 00FF 1375          move.w    #255,D0
00000F6E  122E 000F 1376          move.b    15(A6),D1
00000F72  C23C 0007 1377          and.b     #7,D1
00000F76  C27C 00FF 1378          and.w     #255,D1
00000F7A  E360      1379          asl.w     D1,D0
00000F7C  1400      1380          move.b    D0,D2
                    1381   ; *dest ^= val;
00000F7E  2043      1382          move.l    D3,A0
00000F80  B510      1383          eor.b     D2,(A0)
                    1384   ; dest = dest+VIDMEM_DIM1_W_BLANK_EDGES;
00000F82  0683 0000 1385          add.l     #256,D3
00000F86  0100      
                    1386   ; if (nchars > 0) {
00000F88  0C84 0000 1387          cmp.l     #0,D4
00000F8C  0000      
00000F8E  6F00 0036 1388          ble       graphics_draw_vline_1
                    1389   ; while (--nchars > 0) {
                    1390   graphics_draw_vline_3:
00000F92  5384      1391          subq.l    #1,D4
00000F94  0C84 0000 1392          cmp.l     #0,D4
00000F98  0000      
00000F9A  6F10      1393          ble.s     graphics_draw_vline_5
                    1394   ; val =  0xff;
00000F9C  143C 00FF 1395          move.b    #255,D2
                    1396   ; *dest ^= val;
00000FA0  2043      1397          move.l    D3,A0
00000FA2  B510      1398          eor.b     D2,(A0)
                    1399   ; dest = dest+VIDMEM_DIM1_W_BLANK_EDGES;	  
00000FA4  0683 0000 1400          add.l     #256,D3
00000FA8  0100      
00000FAA  60E6      1401          bra       graphics_draw_vline_3
                    1402   graphics_draw_vline_5:
                    1403   ; }
                    1404   ; val = (0xff >> (~y2&7));
00000FAC  303C 00FF 1405          move.w    #255,D0
00000FB0  1205      1406          move.b    D5,D1
00000FB2  4601      1407          not.b     D1
00000FB4  C23C 0007 1408          and.b     #7,D1
00000FB8  C27C 00FF 1409          and.w     #255,D1
00000FBC  E260      1410          asr.w     D1,D0
00000FBE  1400      1411          move.b    D0,D2
                    1412   ; *dest ^= val;
00000FC0  2043      1413          move.l    D3,A0
00000FC2  B510      1414          eor.b     D2,(A0)
00000FC4  601E      1415          bra.s     graphics_draw_vline_2
                    1416   graphics_draw_vline_1:
                    1417   ; } else {
                    1418   ; dest = dest-VIDMEM_DIM1_W_BLANK_EDGES; 
00000FC6  0483 0000 1419          sub.l     #256,D3
00000FCA  0100      
                    1420   ; val = (0xff << ((y2+1)&7));
00000FCC  303C 00FF 1421          move.w    #255,D0
00000FD0  1205      1422          move.b    D5,D1
00000FD2  5201      1423          addq.b    #1,D1
00000FD4  C23C 0007 1424          and.b     #7,D1
00000FD8  C27C 00FF 1425          and.w     #255,D1
00000FDC  E360      1426          asl.w     D1,D0
00000FDE  1400      1427          move.b    D0,D2
                    1428   ; *dest ^= val;
00000FE0  2043      1429          move.l    D3,A0
00000FE2  B510      1430          eor.b     D2,(A0)
                    1431   graphics_draw_vline_2:
00000FE4  4CDF 007C 1432          movem.l   (A7)+,D2/D3/D4/D5/D6
00000FE8  4E5E      1433          unlk      A6
00000FEA  4E75      1434          rts
                    1435   ; }
                    1436   ; }
                    1437   ; void graphics_draw_char(unsigned char ch, unsigned char x, unsigned char y) {
                    1438   _graphics_draw_char:
00000FEC  4E56 0000 1439          link      A6,#0
00000FF0  48E7 3800 1440          movem.l   D2/D3/D4,-(A7)
                    1441   ; unsigned char i;
                    1442   ; unsigned char* src;
                    1443   ; unsigned char* dest;
                    1444   ; src  = &graphics_font8x8[(ch-LOCHAR)][0];
00000FF4  41F9 0803 1445          lea       _graphics_font8x8.L,A0
00000FF8  022A      
00000FFA  102E 000B 1446          move.b    11(A6),D0
00000FFE  C0BC 0000 1447          and.l     #255,D0
00001002  00FF      
00001004  0480 0000 1448          sub.l     #32,D0
00001008  0020      
0000100A  E788      1449          lsl.l     #3,D0
0000100C  D1C0      1450          add.l     D0,A0
0000100E  2808      1451          move.l    A0,D4
                    1452   ; dest = VIDEOMEM_ADDR(x*8,y);
00001010  203C 0100 1453          move.l    #16777216,D0
00001014  0000      
00001016  122E 0013 1454          move.b    19(A6),D1
0000101A  C27C 00FF 1455          and.w     #255,D1
0000101E  E141      1456          asl.w     #8,D1
00001020  48C1      1457          ext.l     D1
00001022  2F00      1458          move.l    D0,-(A7)
00001024  102E 000F 1459          move.b    15(A6),D0
00001028  C07C 00FF 1460          and.w     #255,D0
0000102C  C0FC 0008 1461          mulu.w    #8,D0
00001030  C0BC 0000 1462          and.l     #255,D0
00001034  00FF      
00001036  D280      1463          add.l     D0,D1
00001038  201F      1464          move.l    (A7)+,D0
0000103A  D081      1465          add.l     D1,D0
0000103C  2600      1466          move.l    D0,D3
                    1467   ; for (i=0; i<8; i++) {
0000103E  4202      1468          clr.b     D2
                    1469   graphics_draw_char_1:
00001040  0C02 0008 1470          cmp.b     #8,D2
00001044  640E      1471          bhs.s     graphics_draw_char_3
                    1472   ; *dest = *src;
00001046  2044      1473          move.l    D4,A0
00001048  2243      1474          move.l    D3,A1
0000104A  1290      1475          move.b    (A0),(A1)
                    1476   ; dest += 1;//32;
0000104C  5283      1477          addq.l    #1,D3
                    1478   ; src += 1;
0000104E  5284      1479          addq.l    #1,D4
00001050  5202      1480          addq.b    #1,D2
00001052  60EC      1481          bra       graphics_draw_char_1
                    1482   graphics_draw_char_3:
00001054  4CDF 001C 1483          movem.l   (A7)+,D2/D3/D4
00001058  4E5E      1484          unlk      A6
0000105A  4E75      1485          rts
                    1486   ; }
                    1487   ; }
                    1488   ; void graphics_draw_string(const char* str, unsigned char x, unsigned char y) {
                    1489   _graphics_draw_string:
0000105C  4E56 0000 1490          link      A6,#0
00001060  2F02      1491          move.l    D2,-(A7)
                    1492   ; do {
                    1493   graphics_draw_string_1:
                    1494   ; unsigned char ch;
                    1495   ; ch = *str++;
00001062  206E 0008 1496          move.l    8(A6),A0
00001066  52AE 0008 1497          addq.l    #1,8(A6)
0000106A  1410      1498          move.b    (A0),D2
                    1499   ; if (!ch) break;
0000106C  4A02      1500          tst.b     D2
0000106E  6602      1501          bne.s     graphics_draw_string_3
00001070  602E      1502          bra.s     graphics_draw_string_2
                    1503   graphics_draw_string_3:
                    1504   ; graphics_draw_char(ch, x, y);
00001072  122E 0013 1505          move.b    19(A6),D1
00001076  C2BC 0000 1506          and.l     #255,D1
0000107A  00FF      
0000107C  2F01      1507          move.l    D1,-(A7)
0000107E  122E 000F 1508          move.b    15(A6),D1
00001082  C2BC 0000 1509          and.l     #255,D1
00001086  00FF      
00001088  2F01      1510          move.l    D1,-(A7)
0000108A  C4BC 0000 1511          and.l     #255,D2
0000108E  00FF      
00001090  2F02      1512          move.l    D2,-(A7)
00001092  4EB8 0FEC 1513          jsr       _graphics_draw_char
00001096  DEFC 000C 1514          add.w     #12,A7
                    1515   ; x++;
0000109A  522E 000F 1516          addq.b    #1,15(A6)
0000109E  60C2      1517          bra       graphics_draw_string_1
                    1518   graphics_draw_string_2:
000010A0  241F      1519          move.l    (A7)+,D2
000010A2  4E5E      1520          unlk      A6
000010A4  4E75      1521          rts
                    1522   ; } while (1);
                    1523   ; }
                    1524   ; void draw_font() {
                    1525   _draw_font:
000010A6  2F02      1526          move.l    D2,-(A7)
                    1527   ; unsigned char i;
                    1528   ; i=LOCHAR;
000010A8  7420      1529          moveq     #32,D2
                    1530   ; do {
                    1531   draw_font_1:
                    1532   ; graphics_draw_char(i, i&15, 31-(i>>4));
000010AA  721F      1533          moveq     #31,D1
000010AC  2F00      1534          move.l    D0,-(A7)
000010AE  1002      1535          move.b    D2,D0
000010B0  E808      1536          lsr.b     #4,D0
000010B2  9200      1537          sub.b     D0,D1
000010B4  201F      1538          move.l    (A7)+,D0
000010B6  C2BC 0000 1539          and.l     #255,D1
000010BA  00FF      
000010BC  2F01      1540          move.l    D1,-(A7)
000010BE  1202      1541          move.b    D2,D1
000010C0  C23C 000F 1542          and.b     #15,D1
000010C4  C2BC 0000 1543          and.l     #255,D1
000010C8  00FF      
000010CA  2F01      1544          move.l    D1,-(A7)
000010CC  C4BC 0000 1545          and.l     #255,D2
000010D0  00FF      
000010D2  2F02      1546          move.l    D2,-(A7)
000010D4  4EB8 0FEC 1547          jsr       _graphics_draw_char
000010D8  DEFC 000C 1548          add.w     #12,A7
                    1549   ; graphics_draw_vline(i, i, i*2);
000010DC  1202      1550          move.b    D2,D1
000010DE  C27C 00FF 1551          and.w     #255,D1
000010E2  C2FC 0002 1552          mulu.w    #2,D1
000010E6  C2BC 0000 1553          and.l     #255,D1
000010EA  00FF      
000010EC  2F01      1554          move.l    D1,-(A7)
000010EE  C4BC 0000 1555          and.l     #255,D2
000010F2  00FF      
000010F4  2F02      1556          move.l    D2,-(A7)
000010F6  C4BC 0000 1557          and.l     #255,D2
000010FA  00FF      
000010FC  2F02      1558          move.l    D2,-(A7)
000010FE  4EB8 0F02 1559          jsr       _graphics_draw_vline
00001102  DEFC 000C 1560          add.w     #12,A7
                    1561   ; graphics_xor_pixel(i*15, i);
00001106  C4BC 0000 1562          and.l     #255,D2
0000110A  00FF      
0000110C  2F02      1563          move.l    D2,-(A7)
0000110E  1202      1564          move.b    D2,D1
00001110  C27C 00FF 1565          and.w     #255,D1
00001114  C2FC 000F 1566          mulu.w    #15,D1
00001118  C2BC 0000 1567          and.l     #255,D1
0000111C  00FF      
0000111E  2F01      1568          move.l    D1,-(A7)
00001120  4EB8 0EBE 1569          jsr       _graphics_xor_pixel
00001124  504F      1570          addq.w    #8,A7
00001126  5202      1571          addq.b    #1,D2
00001128  0C02 005E 1572          cmp.b     #94,D2
0000112C  6600 FF7C 1573          bne       draw_font_1
00001130  241F      1574          move.l    (A7)+,D2
00001132  4E75      1575          rts
                    1576   ; } while (++i != HICHAR);
                    1577   ; }
                    1578   ; void initialize_font() {
                    1579   _initialize_font:
00001134  2F0A      1580          move.l    A2,-(A7)
00001136  45F9 0803 1581          lea       _graphics_font8x8.L,A2
0000113A  022A      
                    1582   ; graphics_font8x8[0 ][0]=0x00;graphics_font8x8[0 ][1]=0x00;graphics_font8x8[0 ][2]=0x00;graphics_font8x8[0 ][3]=0x00;graphics_font8x8[0 ][4]=0x00;graphics_font8x8[0 ][5]=0x00;graphics_font8x8[0 ][6]=0x00;graphics_font8x8[0 ][7]=0x00;
0000113C  4212      1583          clr.b     (A2)
0000113E  422A 0001 1584          clr.b     1(A2)
00001142  422A 0002 1585          clr.b     2(A2)
00001146  422A 0003 1586          clr.b     3(A2)
0000114A  422A 0004 1587          clr.b     4(A2)
0000114E  422A 0005 1588          clr.b     5(A2)
00001152  422A 0006 1589          clr.b     6(A2)
00001156  422A 0007 1590          clr.b     7(A2)
                    1591   ; graphics_font8x8[1 ][0]=0x00;graphics_font8x8[1 ][1]=0x00;graphics_font8x8[1 ][2]=0x00;graphics_font8x8[1 ][3]=0x79;graphics_font8x8[1 ][4]=0x79;graphics_font8x8[1 ][5]=0x00;graphics_font8x8[1 ][6]=0x00;graphics_font8x8[1 ][7]=0x00;
0000115A  422A 0008 1592          clr.b     8(A2)
0000115E  422A 0009 1593          clr.b     8+1(A2)
00001162  422A 000A 1594          clr.b     8+2(A2)
00001166  157C 0079 1595          move.b    #121,8+3(A2)
0000116A  000B      
0000116C  157C 0079 1596          move.b    #121,8+4(A2)
00001170  000C      
00001172  422A 000D 1597          clr.b     8+5(A2)
00001176  422A 000E 1598          clr.b     8+6(A2)
0000117A  422A 000F 1599          clr.b     8+7(A2)
                    1600   ; graphics_font8x8[2 ][0]=0x00;graphics_font8x8[2 ][1]=0x70;graphics_font8x8[2 ][2]=0x70;graphics_font8x8[2 ][3]=0x00;graphics_font8x8[2 ][4]=0x00;graphics_font8x8[2 ][5]=0x70;graphics_font8x8[2 ][6]=0x70;graphics_font8x8[2 ][7]=0x00; 
0000117E  422A 0010 1601          clr.b     16(A2)
00001182  157C 0070 1602          move.b    #112,16+1(A2)
00001186  0011      
00001188  157C 0070 1603          move.b    #112,16+2(A2)
0000118C  0012      
0000118E  422A 0013 1604          clr.b     16+3(A2)
00001192  422A 0014 1605          clr.b     16+4(A2)
00001196  157C 0070 1606          move.b    #112,16+5(A2)
0000119A  0015      
0000119C  157C 0070 1607          move.b    #112,16+6(A2)
000011A0  0016      
000011A2  422A 0017 1608          clr.b     16+7(A2)
                    1609   ; graphics_font8x8[3 ][0]=0x14;graphics_font8x8[3 ][1]=0x7f;graphics_font8x8[3 ][2]=0x7f;graphics_font8x8[3 ][3]=0x14;graphics_font8x8[3 ][4]=0x14;graphics_font8x8[3 ][5]=0x7f;graphics_font8x8[3 ][6]=0x7f;graphics_font8x8[3 ][7]=0x14; 
000011A6  157C 0014 1610          move.b    #20,24(A2)
000011AA  0018      
000011AC  157C 007F 1611          move.b    #127,24+1(A2)
000011B0  0019      
000011B2  157C 007F 1612          move.b    #127,24+2(A2)
000011B6  001A      
000011B8  157C 0014 1613          move.b    #20,24+3(A2)
000011BC  001B      
000011BE  157C 0014 1614          move.b    #20,24+4(A2)
000011C2  001C      
000011C4  157C 007F 1615          move.b    #127,24+5(A2)
000011C8  001D      
000011CA  157C 007F 1616          move.b    #127,24+6(A2)
000011CE  001E      
000011D0  157C 0014 1617          move.b    #20,24+7(A2)
000011D4  001F      
                    1618   ; graphics_font8x8[4 ][0]=0x00;graphics_font8x8[4 ][1]=0x12;graphics_font8x8[4 ][2]=0x3a;graphics_font8x8[4 ][3]=0x6b;graphics_font8x8[4 ][4]=0x6b;graphics_font8x8[4 ][5]=0x2e;graphics_font8x8[4 ][6]=0x24;graphics_font8x8[4 ][7]=0x00;
000011D6  422A 0020 1619          clr.b     32(A2)
000011DA  157C 0012 1620          move.b    #18,32+1(A2)
000011DE  0021      
000011E0  157C 003A 1621          move.b    #58,32+2(A2)
000011E4  0022      
000011E6  157C 006B 1622          move.b    #107,32+3(A2)
000011EA  0023      
000011EC  157C 006B 1623          move.b    #107,32+4(A2)
000011F0  0024      
000011F2  157C 002E 1624          move.b    #46,32+5(A2)
000011F6  0025      
000011F8  157C 0024 1625          move.b    #36,32+6(A2)
000011FC  0026      
000011FE  422A 0027 1626          clr.b     32+7(A2)
                    1627   ; graphics_font8x8[5 ][0]=0x00;graphics_font8x8[5 ][1]=0x63;graphics_font8x8[5 ][2]=0x66;graphics_font8x8[5 ][3]=0x0c;graphics_font8x8[5 ][4]=0x18;graphics_font8x8[5 ][5]=0x33;graphics_font8x8[5 ][6]=0x63;graphics_font8x8[5 ][7]=0x00; 
00001202  422A 0028 1628          clr.b     40(A2)
00001206  157C 0063 1629          move.b    #99,40+1(A2)
0000120A  0029      
0000120C  157C 0066 1630          move.b    #102,40+2(A2)
00001210  002A      
00001212  157C 000C 1631          move.b    #12,40+3(A2)
00001216  002B      
00001218  157C 0018 1632          move.b    #24,40+4(A2)
0000121C  002C      
0000121E  157C 0033 1633          move.b    #51,40+5(A2)
00001222  002D      
00001224  157C 0063 1634          move.b    #99,40+6(A2)
00001228  002E      
0000122A  422A 002F 1635          clr.b     40+7(A2)
                    1636   ; graphics_font8x8[6 ][0]=0x00;graphics_font8x8[6 ][1]=0x26;graphics_font8x8[6 ][2]=0x7f;graphics_font8x8[6 ][3]=0x59;graphics_font8x8[6 ][4]=0x59;graphics_font8x8[6 ][5]=0x77;graphics_font8x8[6 ][6]=0x27;graphics_font8x8[6 ][7]=0x05; 
0000122E  422A 0030 1637          clr.b     48(A2)
00001232  157C 0026 1638          move.b    #38,48+1(A2)
00001236  0031      
00001238  157C 007F 1639          move.b    #127,48+2(A2)
0000123C  0032      
0000123E  157C 0059 1640          move.b    #89,48+3(A2)
00001242  0033      
00001244  157C 0059 1641          move.b    #89,48+4(A2)
00001248  0034      
0000124A  157C 0077 1642          move.b    #119,48+5(A2)
0000124E  0035      
00001250  157C 0027 1643          move.b    #39,48+6(A2)
00001254  0036      
00001256  157C 0005 1644          move.b    #5,48+7(A2)
0000125A  0037      
                    1645   ; graphics_font8x8[7 ][0]=0x00;graphics_font8x8[7 ][1]=0x00;graphics_font8x8[7 ][2]=0x00;graphics_font8x8[7 ][3]=0x10;graphics_font8x8[7 ][4]=0x30;graphics_font8x8[7 ][5]=0x60;graphics_font8x8[7 ][6]=0x40;graphics_font8x8[7 ][7]=0x00; 
0000125C  422A 0038 1646          clr.b     56(A2)
00001260  422A 0039 1647          clr.b     56+1(A2)
00001264  422A 003A 1648          clr.b     56+2(A2)
00001268  157C 0010 1649          move.b    #16,56+3(A2)
0000126C  003B      
0000126E  157C 0030 1650          move.b    #48,56+4(A2)
00001272  003C      
00001274  157C 0060 1651          move.b    #96,56+5(A2)
00001278  003D      
0000127A  157C 0040 1652          move.b    #64,56+6(A2)
0000127E  003E      
00001280  422A 003F 1653          clr.b     56+7(A2)
                    1654   ; graphics_font8x8[8 ][0]=0x00;graphics_font8x8[8 ][1]=0x00;graphics_font8x8[8 ][2]=0x1c;graphics_font8x8[8 ][3]=0x3e;graphics_font8x8[8 ][4]=0x63;graphics_font8x8[8 ][5]=0x41;graphics_font8x8[8 ][6]=0x00;graphics_font8x8[8 ][7]=0x00; 
00001284  422A 0040 1655          clr.b     64(A2)
00001288  422A 0041 1656          clr.b     64+1(A2)
0000128C  157C 001C 1657          move.b    #28,64+2(A2)
00001290  0042      
00001292  157C 003E 1658          move.b    #62,64+3(A2)
00001296  0043      
00001298  157C 0063 1659          move.b    #99,64+4(A2)
0000129C  0044      
0000129E  157C 0041 1660          move.b    #65,64+5(A2)
000012A2  0045      
000012A4  422A 0046 1661          clr.b     64+6(A2)
000012A8  422A 0047 1662          clr.b     64+7(A2)
                    1663   ; graphics_font8x8[9 ][0]=0x00;graphics_font8x8[9 ][1]=0x00;graphics_font8x8[9 ][2]=0x41;graphics_font8x8[9 ][3]=0x63;graphics_font8x8[9 ][4]=0x3e;graphics_font8x8[9 ][5]=0x1c;graphics_font8x8[9 ][6]=0x00;graphics_font8x8[9 ][7]=0x00; 
000012AC  422A 0048 1664          clr.b     72(A2)
000012B0  422A 0049 1665          clr.b     72+1(A2)
000012B4  157C 0041 1666          move.b    #65,72+2(A2)
000012B8  004A      
000012BA  157C 0063 1667          move.b    #99,72+3(A2)
000012BE  004B      
000012C0  157C 003E 1668          move.b    #62,72+4(A2)
000012C4  004C      
000012C6  157C 001C 1669          move.b    #28,72+5(A2)
000012CA  004D      
000012CC  422A 004E 1670          clr.b     72+6(A2)
000012D0  422A 004F 1671          clr.b     72+7(A2)
                    1672   ; graphics_font8x8[10][0]=0x08;graphics_font8x8[10][1]=0x2a;graphics_font8x8[10][2]=0x3e;graphics_font8x8[10][3]=0x1c;graphics_font8x8[10][4]=0x1c;graphics_font8x8[10][5]=0x3e;graphics_font8x8[10][6]=0x2a;graphics_font8x8[10][7]=0x08; 
000012D4  157C 0008 1673          move.b    #8,80(A2)
000012D8  0050      
000012DA  157C 002A 1674          move.b    #42,80+1(A2)
000012DE  0051      
000012E0  157C 003E 1675          move.b    #62,80+2(A2)
000012E4  0052      
000012E6  157C 001C 1676          move.b    #28,80+3(A2)
000012EA  0053      
000012EC  157C 001C 1677          move.b    #28,80+4(A2)
000012F0  0054      
000012F2  157C 003E 1678          move.b    #62,80+5(A2)
000012F6  0055      
000012F8  157C 002A 1679          move.b    #42,80+6(A2)
000012FC  0056      
000012FE  157C 0008 1680          move.b    #8,80+7(A2)
00001302  0057      
                    1681   ; graphics_font8x8[11][0]=0x00;graphics_font8x8[11][1]=0x08;graphics_font8x8[11][2]=0x08;graphics_font8x8[11][3]=0x3e;graphics_font8x8[11][4]=0x3e;graphics_font8x8[11][5]=0x08;graphics_font8x8[11][6]=0x08;graphics_font8x8[11][7]=0x00; 
00001304  422A 0058 1682          clr.b     88(A2)
00001308  157C 0008 1683          move.b    #8,88+1(A2)
0000130C  0059      
0000130E  157C 0008 1684          move.b    #8,88+2(A2)
00001312  005A      
00001314  157C 003E 1685          move.b    #62,88+3(A2)
00001318  005B      
0000131A  157C 003E 1686          move.b    #62,88+4(A2)
0000131E  005C      
00001320  157C 0008 1687          move.b    #8,88+5(A2)
00001324  005D      
00001326  157C 0008 1688          move.b    #8,88+6(A2)
0000132A  005E      
0000132C  422A 005F 1689          clr.b     88+7(A2)
                    1690   ; graphics_font8x8[12][0]=0x00;graphics_font8x8[12][1]=0x00;graphics_font8x8[12][2]=0x00;graphics_font8x8[12][3]=0x03;graphics_font8x8[12][4]=0x03;graphics_font8x8[12][5]=0x00;graphics_font8x8[12][6]=0x00;graphics_font8x8[12][7]=0x00; 
00001330  422A 0060 1691          clr.b     96(A2)
00001334  422A 0061 1692          clr.b     96+1(A2)
00001338  422A 0062 1693          clr.b     96+2(A2)
0000133C  157C 0003 1694          move.b    #3,96+3(A2)
00001340  0063      
00001342  157C 0003 1695          move.b    #3,96+4(A2)
00001346  0064      
00001348  422A 0065 1696          clr.b     96+5(A2)
0000134C  422A 0066 1697          clr.b     96+6(A2)
00001350  422A 0067 1698          clr.b     96+7(A2)
                    1699   ; graphics_font8x8[13][0]=0x00;graphics_font8x8[13][1]=0x08;graphics_font8x8[13][2]=0x08;graphics_font8x8[13][3]=0x08;graphics_font8x8[13][4]=0x08;graphics_font8x8[13][5]=0x08;graphics_font8x8[13][6]=0x08;graphics_font8x8[13][7]=0x00; 
00001354  422A 0068 1700          clr.b     104(A2)
00001358  157C 0008 1701          move.b    #8,104+1(A2)
0000135C  0069      
0000135E  157C 0008 1702          move.b    #8,104+2(A2)
00001362  006A      
00001364  157C 0008 1703          move.b    #8,104+3(A2)
00001368  006B      
0000136A  157C 0008 1704          move.b    #8,104+4(A2)
0000136E  006C      
00001370  157C 0008 1705          move.b    #8,104+5(A2)
00001374  006D      
00001376  157C 0008 1706          move.b    #8,104+6(A2)
0000137A  006E      
0000137C  422A 006F 1707          clr.b     104+7(A2)
                    1708   ; graphics_font8x8[14][0]=0x00;graphics_font8x8[14][1]=0x00;graphics_font8x8[14][2]=0x00;graphics_font8x8[14][3]=0x03;graphics_font8x8[14][4]=0x03;graphics_font8x8[14][5]=0x00;graphics_font8x8[14][6]=0x00;graphics_font8x8[14][7]=0x00; 
00001380  422A 0070 1709          clr.b     112(A2)
00001384  422A 0071 1710          clr.b     112+1(A2)
00001388  422A 0072 1711          clr.b     112+2(A2)
0000138C  157C 0003 1712          move.b    #3,112+3(A2)
00001390  0073      
00001392  157C 0003 1713          move.b    #3,112+4(A2)
00001396  0074      
00001398  422A 0075 1714          clr.b     112+5(A2)
0000139C  422A 0076 1715          clr.b     112+6(A2)
000013A0  422A 0077 1716          clr.b     112+7(A2)
                    1717   ; graphics_font8x8[15][0]=0x00;graphics_font8x8[15][1]=0x01;graphics_font8x8[15][2]=0x03;graphics_font8x8[15][3]=0x06;graphics_font8x8[15][4]=0x0c;graphics_font8x8[15][5]=0x18;graphics_font8x8[15][6]=0x30;graphics_font8x8[15][7]=0x20; 
000013A4  422A 0078 1718          clr.b     120(A2)
000013A8  157C 0001 1719          move.b    #1,120+1(A2)
000013AC  0079      
000013AE  157C 0003 1720          move.b    #3,120+2(A2)
000013B2  007A      
000013B4  157C 0006 1721          move.b    #6,120+3(A2)
000013B8  007B      
000013BA  157C 000C 1722          move.b    #12,120+4(A2)
000013BE  007C      
000013C0  157C 0018 1723          move.b    #24,120+5(A2)
000013C4  007D      
000013C6  157C 0030 1724          move.b    #48,120+6(A2)
000013CA  007E      
000013CC  157C 0020 1725          move.b    #32,120+7(A2)
000013D0  007F      
                    1726   ; graphics_font8x8[16][0]=0x00;graphics_font8x8[16][1]=0x3e;graphics_font8x8[16][2]=0x7f;graphics_font8x8[16][3]=0x49;graphics_font8x8[16][4]=0x51;graphics_font8x8[16][5]=0x7f;graphics_font8x8[16][6]=0x3e;graphics_font8x8[16][7]=0x00; 
000013D2  422A 0080 1727          clr.b     128(A2)
000013D6  157C 003E 1728          move.b    #62,128+1(A2)
000013DA  0081      
000013DC  157C 007F 1729          move.b    #127,128+2(A2)
000013E0  0082      
000013E2  157C 0049 1730          move.b    #73,128+3(A2)
000013E6  0083      
000013E8  157C 0051 1731          move.b    #81,128+4(A2)
000013EC  0084      
000013EE  157C 007F 1732          move.b    #127,128+5(A2)
000013F2  0085      
000013F4  157C 003E 1733          move.b    #62,128+6(A2)
000013F8  0086      
000013FA  422A 0087 1734          clr.b     128+7(A2)
                    1735   ; graphics_font8x8[17][0]=0x00;graphics_font8x8[17][1]=0x01;graphics_font8x8[17][2]=0x11;graphics_font8x8[17][3]=0x7f;graphics_font8x8[17][4]=0x7f;graphics_font8x8[17][5]=0x01;graphics_font8x8[17][6]=0x01;graphics_font8x8[17][7]=0x00; 
000013FE  422A 0088 1736          clr.b     136(A2)
00001402  157C 0001 1737          move.b    #1,136+1(A2)
00001406  0089      
00001408  157C 0011 1738          move.b    #17,136+2(A2)
0000140C  008A      
0000140E  157C 007F 1739          move.b    #127,136+3(A2)
00001412  008B      
00001414  157C 007F 1740          move.b    #127,136+4(A2)
00001418  008C      
0000141A  157C 0001 1741          move.b    #1,136+5(A2)
0000141E  008D      
00001420  157C 0001 1742          move.b    #1,136+6(A2)
00001424  008E      
00001426  422A 008F 1743          clr.b     136+7(A2)
                    1744   ; graphics_font8x8[18][0]=0x00;graphics_font8x8[18][1]=0x23;graphics_font8x8[18][2]=0x67;graphics_font8x8[18][3]=0x45;graphics_font8x8[18][4]=0x49;graphics_font8x8[18][5]=0x79;graphics_font8x8[18][6]=0x31;graphics_font8x8[18][7]=0x00; 
0000142A  422A 0090 1745          clr.b     144(A2)
0000142E  157C 0023 1746          move.b    #35,144+1(A2)
00001432  0091      
00001434  157C 0067 1747          move.b    #103,144+2(A2)
00001438  0092      
0000143A  157C 0045 1748          move.b    #69,144+3(A2)
0000143E  0093      
00001440  157C 0049 1749          move.b    #73,144+4(A2)
00001444  0094      
00001446  157C 0079 1750          move.b    #121,144+5(A2)
0000144A  0095      
0000144C  157C 0031 1751          move.b    #49,144+6(A2)
00001450  0096      
00001452  422A 0097 1752          clr.b     144+7(A2)
                    1753   ; graphics_font8x8[19][0]=0x00;graphics_font8x8[19][1]=0x22;graphics_font8x8[19][2]=0x63;graphics_font8x8[19][3]=0x49;graphics_font8x8[19][4]=0x49;graphics_font8x8[19][5]=0x7f;graphics_font8x8[19][6]=0x36;graphics_font8x8[19][7]=0x00; 
00001456  422A 0098 1754          clr.b     152(A2)
0000145A  157C 0022 1755          move.b    #34,152+1(A2)
0000145E  0099      
00001460  157C 0063 1756          move.b    #99,152+2(A2)
00001464  009A      
00001466  157C 0049 1757          move.b    #73,152+3(A2)
0000146A  009B      
0000146C  157C 0049 1758          move.b    #73,152+4(A2)
00001470  009C      
00001472  157C 007F 1759          move.b    #127,152+5(A2)
00001476  009D      
00001478  157C 0036 1760          move.b    #54,152+6(A2)
0000147C  009E      
0000147E  422A 009F 1761          clr.b     152+7(A2)
                    1762   ; graphics_font8x8[20][0]=0x00;graphics_font8x8[20][1]=0x0c;graphics_font8x8[20][2]=0x0c;graphics_font8x8[20][3]=0x14;graphics_font8x8[20][4]=0x34;graphics_font8x8[20][5]=0x7f;graphics_font8x8[20][6]=0x7f;graphics_font8x8[20][7]=0x04; 
00001482  422A 00A0 1763          clr.b     160(A2)
00001486  157C 000C 1764          move.b    #12,160+1(A2)
0000148A  00A1      
0000148C  157C 000C 1765          move.b    #12,160+2(A2)
00001490  00A2      
00001492  157C 0014 1766          move.b    #20,160+3(A2)
00001496  00A3      
00001498  157C 0034 1767          move.b    #52,160+4(A2)
0000149C  00A4      
0000149E  157C 007F 1768          move.b    #127,160+5(A2)
000014A2  00A5      
000014A4  157C 007F 1769          move.b    #127,160+6(A2)
000014A8  00A6      
000014AA  157C 0004 1770          move.b    #4,160+7(A2)
000014AE  00A7      
                    1771   ; graphics_font8x8[21][0]=0x00;graphics_font8x8[21][1]=0x72;graphics_font8x8[21][2]=0x73;graphics_font8x8[21][3]=0x51;graphics_font8x8[21][4]=0x51;graphics_font8x8[21][5]=0x5f;graphics_font8x8[21][6]=0x4e;graphics_font8x8[21][7]=0x00; 
000014B0  422A 00A8 1772          clr.b     168(A2)
000014B4  157C 0072 1773          move.b    #114,168+1(A2)
000014B8  00A9      
000014BA  157C 0073 1774          move.b    #115,168+2(A2)
000014BE  00AA      
000014C0  157C 0051 1775          move.b    #81,168+3(A2)
000014C4  00AB      
000014C6  157C 0051 1776          move.b    #81,168+4(A2)
000014CA  00AC      
000014CC  157C 005F 1777          move.b    #95,168+5(A2)
000014D0  00AD      
000014D2  157C 004E 1778          move.b    #78,168+6(A2)
000014D6  00AE      
000014D8  422A 00AF 1779          clr.b     168+7(A2)
                    1780   ; graphics_font8x8[22][0]=0x00;graphics_font8x8[22][1]=0x3e;graphics_font8x8[22][2]=0x7f;graphics_font8x8[22][3]=0x49;graphics_font8x8[22][4]=0x49;graphics_font8x8[22][5]=0x6f;graphics_font8x8[22][6]=0x26;graphics_font8x8[22][7]=0x00; 
000014DC  422A 00B0 1781          clr.b     176(A2)
000014E0  157C 003E 1782          move.b    #62,176+1(A2)
000014E4  00B1      
000014E6  157C 007F 1783          move.b    #127,176+2(A2)
000014EA  00B2      
000014EC  157C 0049 1784          move.b    #73,176+3(A2)
000014F0  00B3      
000014F2  157C 0049 1785          move.b    #73,176+4(A2)
000014F6  00B4      
000014F8  157C 006F 1786          move.b    #111,176+5(A2)
000014FC  00B5      
000014FE  157C 0026 1787          move.b    #38,176+6(A2)
00001502  00B6      
00001504  422A 00B7 1788          clr.b     176+7(A2)
                    1789   ; graphics_font8x8[23][0]=0x00;graphics_font8x8[23][1]=0x60;graphics_font8x8[23][2]=0x60;graphics_font8x8[23][3]=0x4f;graphics_font8x8[23][4]=0x5f;graphics_font8x8[23][5]=0x70;graphics_font8x8[23][6]=0x60;graphics_font8x8[23][7]=0x00; 
00001508  422A 00B8 1790          clr.b     184(A2)
0000150C  157C 0060 1791          move.b    #96,184+1(A2)
00001510  00B9      
00001512  157C 0060 1792          move.b    #96,184+2(A2)
00001516  00BA      
00001518  157C 004F 1793          move.b    #79,184+3(A2)
0000151C  00BB      
0000151E  157C 005F 1794          move.b    #95,184+4(A2)
00001522  00BC      
00001524  157C 0070 1795          move.b    #112,184+5(A2)
00001528  00BD      
0000152A  157C 0060 1796          move.b    #96,184+6(A2)
0000152E  00BE      
00001530  422A 00BF 1797          clr.b     184+7(A2)
                    1798   ; graphics_font8x8[24][0]=0x00;graphics_font8x8[24][1]=0x36;graphics_font8x8[24][2]=0x7f;graphics_font8x8[24][3]=0x49;graphics_font8x8[24][4]=0x49;graphics_font8x8[24][5]=0x7f;graphics_font8x8[24][6]=0x36;graphics_font8x8[24][7]=0x00; 
00001534  422A 00C0 1799          clr.b     192(A2)
00001538  157C 0036 1800          move.b    #54,192+1(A2)
0000153C  00C1      
0000153E  157C 007F 1801          move.b    #127,192+2(A2)
00001542  00C2      
00001544  157C 0049 1802          move.b    #73,192+3(A2)
00001548  00C3      
0000154A  157C 0049 1803          move.b    #73,192+4(A2)
0000154E  00C4      
00001550  157C 007F 1804          move.b    #127,192+5(A2)
00001554  00C5      
00001556  157C 0036 1805          move.b    #54,192+6(A2)
0000155A  00C6      
0000155C  422A 00C7 1806          clr.b     192+7(A2)
                    1807   ; graphics_font8x8[25][0]=0x00;graphics_font8x8[25][1]=0x32;graphics_font8x8[25][2]=0x7b;graphics_font8x8[25][3]=0x49;graphics_font8x8[25][4]=0x49;graphics_font8x8[25][5]=0x7f;graphics_font8x8[25][6]=0x3e;graphics_font8x8[25][7]=0x00; 
00001560  422A 00C8 1808          clr.b     200(A2)
00001564  157C 0032 1809          move.b    #50,200+1(A2)
00001568  00C9      
0000156A  157C 007B 1810          move.b    #123,200+2(A2)
0000156E  00CA      
00001570  157C 0049 1811          move.b    #73,200+3(A2)
00001574  00CB      
00001576  157C 0049 1812          move.b    #73,200+4(A2)
0000157A  00CC      
0000157C  157C 007F 1813          move.b    #127,200+5(A2)
00001580  00CD      
00001582  157C 003E 1814          move.b    #62,200+6(A2)
00001586  00CE      
00001588  422A 00CF 1815          clr.b     200+7(A2)
                    1816   ; graphics_font8x8[26][0]=0x00;graphics_font8x8[26][1]=0x00;graphics_font8x8[26][2]=0x00;graphics_font8x8[26][3]=0x12;graphics_font8x8[26][4]=0x12;graphics_font8x8[26][5]=0x00;graphics_font8x8[26][6]=0x00;graphics_font8x8[26][7]=0x00; 
0000158C  422A 00D0 1817          clr.b     208(A2)
00001590  422A 00D1 1818          clr.b     208+1(A2)
00001594  422A 00D2 1819          clr.b     208+2(A2)
00001598  157C 0012 1820          move.b    #18,208+3(A2)
0000159C  00D3      
0000159E  157C 0012 1821          move.b    #18,208+4(A2)
000015A2  00D4      
000015A4  422A 00D5 1822          clr.b     208+5(A2)
000015A8  422A 00D6 1823          clr.b     208+6(A2)
000015AC  422A 00D7 1824          clr.b     208+7(A2)
                    1825   ; graphics_font8x8[27][0]=0x00;graphics_font8x8[27][1]=0x00;graphics_font8x8[27][2]=0x00;graphics_font8x8[27][3]=0x13;graphics_font8x8[27][4]=0x13;graphics_font8x8[27][5]=0x00;graphics_font8x8[27][6]=0x00;graphics_font8x8[27][7]=0x00; 
000015B0  422A 00D8 1826          clr.b     216(A2)
000015B4  422A 00D9 1827          clr.b     216+1(A2)
000015B8  422A 00DA 1828          clr.b     216+2(A2)
000015BC  157C 0013 1829          move.b    #19,216+3(A2)
000015C0  00DB      
000015C2  157C 0013 1830          move.b    #19,216+4(A2)
000015C6  00DC      
000015C8  422A 00DD 1831          clr.b     216+5(A2)
000015CC  422A 00DE 1832          clr.b     216+6(A2)
000015D0  422A 00DF 1833          clr.b     216+7(A2)
                    1834   ; graphics_font8x8[28][0]=0x00;graphics_font8x8[28][1]=0x08;graphics_font8x8[28][2]=0x1c;graphics_font8x8[28][3]=0x36;graphics_font8x8[28][4]=0x63;graphics_font8x8[28][5]=0x41;graphics_font8x8[28][6]=0x41;graphics_font8x8[28][7]=0x00; 
000015D4  422A 00E0 1835          clr.b     224(A2)
000015D8  157C 0008 1836          move.b    #8,224+1(A2)
000015DC  00E1      
000015DE  157C 001C 1837          move.b    #28,224+2(A2)
000015E2  00E2      
000015E4  157C 0036 1838          move.b    #54,224+3(A2)
000015E8  00E3      
000015EA  157C 0063 1839          move.b    #99,224+4(A2)
000015EE  00E4      
000015F0  157C 0041 1840          move.b    #65,224+5(A2)
000015F4  00E5      
000015F6  157C 0041 1841          move.b    #65,224+6(A2)
000015FA  00E6      
000015FC  422A 00E7 1842          clr.b     224+7(A2)
                    1843   ; graphics_font8x8[29][0]=0x00;graphics_font8x8[29][1]=0x14;graphics_font8x8[29][2]=0x14;graphics_font8x8[29][3]=0x14;graphics_font8x8[29][4]=0x14;graphics_font8x8[29][5]=0x14;graphics_font8x8[29][6]=0x14;graphics_font8x8[29][7]=0x00; 
00001600  422A 00E8 1844          clr.b     232(A2)
00001604  157C 0014 1845          move.b    #20,232+1(A2)
00001608  00E9      
0000160A  157C 0014 1846          move.b    #20,232+2(A2)
0000160E  00EA      
00001610  157C 0014 1847          move.b    #20,232+3(A2)
00001614  00EB      
00001616  157C 0014 1848          move.b    #20,232+4(A2)
0000161A  00EC      
0000161C  157C 0014 1849          move.b    #20,232+5(A2)
00001620  00ED      
00001622  157C 0014 1850          move.b    #20,232+6(A2)
00001626  00EE      
00001628  422A 00EF 1851          clr.b     232+7(A2)
                    1852   ; graphics_font8x8[30][0]=0x00;graphics_font8x8[30][1]=0x41;graphics_font8x8[30][2]=0x41;graphics_font8x8[30][3]=0x63;graphics_font8x8[30][4]=0x36;graphics_font8x8[30][5]=0x1c;graphics_font8x8[30][6]=0x08;graphics_font8x8[30][7]=0x00; 
0000162C  422A 00F0 1853          clr.b     240(A2)
00001630  157C 0041 1854          move.b    #65,240+1(A2)
00001634  00F1      
00001636  157C 0041 1855          move.b    #65,240+2(A2)
0000163A  00F2      
0000163C  157C 0063 1856          move.b    #99,240+3(A2)
00001640  00F3      
00001642  157C 0036 1857          move.b    #54,240+4(A2)
00001646  00F4      
00001648  157C 001C 1858          move.b    #28,240+5(A2)
0000164C  00F5      
0000164E  157C 0008 1859          move.b    #8,240+6(A2)
00001652  00F6      
00001654  422A 00F7 1860          clr.b     240+7(A2)
                    1861   ; graphics_font8x8[31][0]=0x00;graphics_font8x8[31][1]=0x20;graphics_font8x8[31][2]=0x60;graphics_font8x8[31][3]=0x45;graphics_font8x8[31][4]=0x4d;graphics_font8x8[31][5]=0x78;graphics_font8x8[31][6]=0x30;graphics_font8x8[31][7]=0x00; 
00001658  422A 00F8 1862          clr.b     248(A2)
0000165C  157C 0020 1863          move.b    #32,248+1(A2)
00001660  00F9      
00001662  157C 0060 1864          move.b    #96,248+2(A2)
00001666  00FA      
00001668  157C 0045 1865          move.b    #69,248+3(A2)
0000166C  00FB      
0000166E  157C 004D 1866          move.b    #77,248+4(A2)
00001672  00FC      
00001674  157C 0078 1867          move.b    #120,248+5(A2)
00001678  00FD      
0000167A  157C 0030 1868          move.b    #48,248+6(A2)
0000167E  00FE      
00001680  422A 00FF 1869          clr.b     248+7(A2)
                    1870   ; graphics_font8x8[32][0]=0x00;graphics_font8x8[32][1]=0x3e;graphics_font8x8[32][2]=0x7f;graphics_font8x8[32][3]=0x41;graphics_font8x8[32][4]=0x59;graphics_font8x8[32][5]=0x79;graphics_font8x8[32][6]=0x3a;graphics_font8x8[32][7]=0x00; 
00001684  422A 0100 1871          clr.b     256(A2)
00001688  157C 003E 1872          move.b    #62,256+1(A2)
0000168C  0101      
0000168E  157C 007F 1873          move.b    #127,256+2(A2)
00001692  0102      
00001694  157C 0041 1874          move.b    #65,256+3(A2)
00001698  0103      
0000169A  157C 0059 1875          move.b    #89,256+4(A2)
0000169E  0104      
000016A0  157C 0079 1876          move.b    #121,256+5(A2)
000016A4  0105      
000016A6  157C 003A 1877          move.b    #58,256+6(A2)
000016AA  0106      
000016AC  422A 0107 1878          clr.b     256+7(A2)
                    1879   ; graphics_font8x8[33][0]=0x00;graphics_font8x8[33][1]=0x1f;graphics_font8x8[33][2]=0x3f;graphics_font8x8[33][3]=0x68;graphics_font8x8[33][4]=0x68;graphics_font8x8[33][5]=0x3f;graphics_font8x8[33][6]=0x1f;graphics_font8x8[33][7]=0x00; 
000016B0  422A 0108 1880          clr.b     264(A2)
000016B4  157C 001F 1881          move.b    #31,264+1(A2)
000016B8  0109      
000016BA  157C 003F 1882          move.b    #63,264+2(A2)
000016BE  010A      
000016C0  157C 0068 1883          move.b    #104,264+3(A2)
000016C4  010B      
000016C6  157C 0068 1884          move.b    #104,264+4(A2)
000016CA  010C      
000016CC  157C 003F 1885          move.b    #63,264+5(A2)
000016D0  010D      
000016D2  157C 001F 1886          move.b    #31,264+6(A2)
000016D6  010E      
000016D8  422A 010F 1887          clr.b     264+7(A2)
                    1888   ; graphics_font8x8[34][0]=0x00;graphics_font8x8[34][1]=0x7f;graphics_font8x8[34][2]=0x7f;graphics_font8x8[34][3]=0x49;graphics_font8x8[34][4]=0x49;graphics_font8x8[34][5]=0x7f;graphics_font8x8[34][6]=0x36;graphics_font8x8[34][7]=0x00; 
000016DC  422A 0110 1889          clr.b     272(A2)
000016E0  157C 007F 1890          move.b    #127,272+1(A2)
000016E4  0111      
000016E6  157C 007F 1891          move.b    #127,272+2(A2)
000016EA  0112      
000016EC  157C 0049 1892          move.b    #73,272+3(A2)
000016F0  0113      
000016F2  157C 0049 1893          move.b    #73,272+4(A2)
000016F6  0114      
000016F8  157C 007F 1894          move.b    #127,272+5(A2)
000016FC  0115      
000016FE  157C 0036 1895          move.b    #54,272+6(A2)
00001702  0116      
00001704  422A 0117 1896          clr.b     272+7(A2)
                    1897   ; graphics_font8x8[35][0]=0x00;graphics_font8x8[35][1]=0x3e;graphics_font8x8[35][2]=0x7f;graphics_font8x8[35][3]=0x41;graphics_font8x8[35][4]=0x41;graphics_font8x8[35][5]=0x63;graphics_font8x8[35][6]=0x22;graphics_font8x8[35][7]=0x00; 
00001708  422A 0118 1898          clr.b     280(A2)
0000170C  157C 003E 1899          move.b    #62,280+1(A2)
00001710  0119      
00001712  157C 007F 1900          move.b    #127,280+2(A2)
00001716  011A      
00001718  157C 0041 1901          move.b    #65,280+3(A2)
0000171C  011B      
0000171E  157C 0041 1902          move.b    #65,280+4(A2)
00001722  011C      
00001724  157C 0063 1903          move.b    #99,280+5(A2)
00001728  011D      
0000172A  157C 0022 1904          move.b    #34,280+6(A2)
0000172E  011E      
00001730  422A 011F 1905          clr.b     280+7(A2)
                    1906   ; graphics_font8x8[36][0]=0x00;graphics_font8x8[36][1]=0x7f;graphics_font8x8[36][2]=0x7f;graphics_font8x8[36][3]=0x41;graphics_font8x8[36][4]=0x63;graphics_font8x8[36][5]=0x3e;graphics_font8x8[36][6]=0x1c;graphics_font8x8[36][7]=0x00; 
00001734  422A 0120 1907          clr.b     288(A2)
00001738  157C 007F 1908          move.b    #127,288+1(A2)
0000173C  0121      
0000173E  157C 007F 1909          move.b    #127,288+2(A2)
00001742  0122      
00001744  157C 0041 1910          move.b    #65,288+3(A2)
00001748  0123      
0000174A  157C 0063 1911          move.b    #99,288+4(A2)
0000174E  0124      
00001750  157C 003E 1912          move.b    #62,288+5(A2)
00001754  0125      
00001756  157C 001C 1913          move.b    #28,288+6(A2)
0000175A  0126      
0000175C  422A 0127 1914          clr.b     288+7(A2)
                    1915   ; graphics_font8x8[37][0]=0x00;graphics_font8x8[37][1]=0x7f;graphics_font8x8[37][2]=0x7f;graphics_font8x8[37][3]=0x49;graphics_font8x8[37][4]=0x49;graphics_font8x8[37][5]=0x41;graphics_font8x8[37][6]=0x41;graphics_font8x8[37][7]=0x00; 
00001760  422A 0128 1916          clr.b     296(A2)
00001764  157C 007F 1917          move.b    #127,296+1(A2)
00001768  0129      
0000176A  157C 007F 1918          move.b    #127,296+2(A2)
0000176E  012A      
00001770  157C 0049 1919          move.b    #73,296+3(A2)
00001774  012B      
00001776  157C 0049 1920          move.b    #73,296+4(A2)
0000177A  012C      
0000177C  157C 0041 1921          move.b    #65,296+5(A2)
00001780  012D      
00001782  157C 0041 1922          move.b    #65,296+6(A2)
00001786  012E      
00001788  422A 012F 1923          clr.b     296+7(A2)
                    1924   ; graphics_font8x8[38][0]=0x00;graphics_font8x8[38][1]=0x7f;graphics_font8x8[38][2]=0x7f;graphics_font8x8[38][3]=0x48;graphics_font8x8[38][4]=0x48;graphics_font8x8[38][5]=0x40;graphics_font8x8[38][6]=0x40;graphics_font8x8[38][7]=0x00; 
0000178C  422A 0130 1925          clr.b     304(A2)
00001790  157C 007F 1926          move.b    #127,304+1(A2)
00001794  0131      
00001796  157C 007F 1927          move.b    #127,304+2(A2)
0000179A  0132      
0000179C  157C 0048 1928          move.b    #72,304+3(A2)
000017A0  0133      
000017A2  157C 0048 1929          move.b    #72,304+4(A2)
000017A6  0134      
000017A8  157C 0040 1930          move.b    #64,304+5(A2)
000017AC  0135      
000017AE  157C 0040 1931          move.b    #64,304+6(A2)
000017B2  0136      
000017B4  422A 0137 1932          clr.b     304+7(A2)
                    1933   ; graphics_font8x8[39][0]=0x00;graphics_font8x8[39][1]=0x3e;graphics_font8x8[39][2]=0x7f;graphics_font8x8[39][3]=0x41;graphics_font8x8[39][4]=0x49;graphics_font8x8[39][5]=0x6f;graphics_font8x8[39][6]=0x2e;graphics_font8x8[39][7]=0x00; 
000017B8  422A 0138 1934          clr.b     312(A2)
000017BC  157C 003E 1935          move.b    #62,312+1(A2)
000017C0  0139      
000017C2  157C 007F 1936          move.b    #127,312+2(A2)
000017C6  013A      
000017C8  157C 0041 1937          move.b    #65,312+3(A2)
000017CC  013B      
000017CE  157C 0049 1938          move.b    #73,312+4(A2)
000017D2  013C      
000017D4  157C 006F 1939          move.b    #111,312+5(A2)
000017D8  013D      
000017DA  157C 002E 1940          move.b    #46,312+6(A2)
000017DE  013E      
000017E0  422A 013F 1941          clr.b     312+7(A2)
                    1942   ; graphics_font8x8[40][0]=0x00;graphics_font8x8[40][1]=0x7f;graphics_font8x8[40][2]=0x7f;graphics_font8x8[40][3]=0x08;graphics_font8x8[40][4]=0x08;graphics_font8x8[40][5]=0x7f;graphics_font8x8[40][6]=0x7f;graphics_font8x8[40][7]=0x00; 
000017E4  422A 0140 1943          clr.b     320(A2)
000017E8  157C 007F 1944          move.b    #127,320+1(A2)
000017EC  0141      
000017EE  157C 007F 1945          move.b    #127,320+2(A2)
000017F2  0142      
000017F4  157C 0008 1946          move.b    #8,320+3(A2)
000017F8  0143      
000017FA  157C 0008 1947          move.b    #8,320+4(A2)
000017FE  0144      
00001800  157C 007F 1948          move.b    #127,320+5(A2)
00001804  0145      
00001806  157C 007F 1949          move.b    #127,320+6(A2)
0000180A  0146      
0000180C  422A 0147 1950          clr.b     320+7(A2)
                    1951   ; graphics_font8x8[41][0]=0x00;graphics_font8x8[41][1]=0x00;graphics_font8x8[41][2]=0x41;graphics_font8x8[41][3]=0x7f;graphics_font8x8[41][4]=0x7f;graphics_font8x8[41][5]=0x41;graphics_font8x8[41][6]=0x00;graphics_font8x8[41][7]=0x00; 
00001810  422A 0148 1952          clr.b     328(A2)
00001814  422A 0149 1953          clr.b     328+1(A2)
00001818  157C 0041 1954          move.b    #65,328+2(A2)
0000181C  014A      
0000181E  157C 007F 1955          move.b    #127,328+3(A2)
00001822  014B      
00001824  157C 007F 1956          move.b    #127,328+4(A2)
00001828  014C      
0000182A  157C 0041 1957          move.b    #65,328+5(A2)
0000182E  014D      
00001830  422A 014E 1958          clr.b     328+6(A2)
00001834  422A 014F 1959          clr.b     328+7(A2)
                    1960   ; graphics_font8x8[42][0]=0x00;graphics_font8x8[42][1]=0x02;graphics_font8x8[42][2]=0x03;graphics_font8x8[42][3]=0x41;graphics_font8x8[42][4]=0x7f;graphics_font8x8[42][5]=0x7e;graphics_font8x8[42][6]=0x40;graphics_font8x8[42][7]=0x00; 
00001838  422A 0150 1961          clr.b     336(A2)
0000183C  157C 0002 1962          move.b    #2,336+1(A2)
00001840  0151      
00001842  157C 0003 1963          move.b    #3,336+2(A2)
00001846  0152      
00001848  157C 0041 1964          move.b    #65,336+3(A2)
0000184C  0153      
0000184E  157C 007F 1965          move.b    #127,336+4(A2)
00001852  0154      
00001854  157C 007E 1966          move.b    #126,336+5(A2)
00001858  0155      
0000185A  157C 0040 1967          move.b    #64,336+6(A2)
0000185E  0156      
00001860  422A 0157 1968          clr.b     336+7(A2)
                    1969   ; graphics_font8x8[43][0]=0x00;graphics_font8x8[43][1]=0x7f;graphics_font8x8[43][2]=0x7f;graphics_font8x8[43][3]=0x1c;graphics_font8x8[43][4]=0x36;graphics_font8x8[43][5]=0x63;graphics_font8x8[43][6]=0x41;graphics_font8x8[43][7]=0x00; 
00001864  422A 0158 1970          clr.b     344(A2)
00001868  157C 007F 1971          move.b    #127,344+1(A2)
0000186C  0159      
0000186E  157C 007F 1972          move.b    #127,344+2(A2)
00001872  015A      
00001874  157C 001C 1973          move.b    #28,344+3(A2)
00001878  015B      
0000187A  157C 0036 1974          move.b    #54,344+4(A2)
0000187E  015C      
00001880  157C 0063 1975          move.b    #99,344+5(A2)
00001884  015D      
00001886  157C 0041 1976          move.b    #65,344+6(A2)
0000188A  015E      
0000188C  422A 015F 1977          clr.b     344+7(A2)
                    1978   ; graphics_font8x8[44][0]=0x00;graphics_font8x8[44][1]=0x7f;graphics_font8x8[44][2]=0x7f;graphics_font8x8[44][3]=0x01;graphics_font8x8[44][4]=0x01;graphics_font8x8[44][5]=0x01;graphics_font8x8[44][6]=0x01;graphics_font8x8[44][7]=0x00; 
00001890  422A 0160 1979          clr.b     352(A2)
00001894  157C 007F 1980          move.b    #127,352+1(A2)
00001898  0161      
0000189A  157C 007F 1981          move.b    #127,352+2(A2)
0000189E  0162      
000018A0  157C 0001 1982          move.b    #1,352+3(A2)
000018A4  0163      
000018A6  157C 0001 1983          move.b    #1,352+4(A2)
000018AA  0164      
000018AC  157C 0001 1984          move.b    #1,352+5(A2)
000018B0  0165      
000018B2  157C 0001 1985          move.b    #1,352+6(A2)
000018B6  0166      
000018B8  422A 0167 1986          clr.b     352+7(A2)
                    1987   ; graphics_font8x8[45][0]=0x00;graphics_font8x8[45][1]=0x7f;graphics_font8x8[45][2]=0x7f;graphics_font8x8[45][3]=0x30;graphics_font8x8[45][4]=0x18;graphics_font8x8[45][5]=0x30;graphics_font8x8[45][6]=0x7f;graphics_font8x8[45][7]=0x7f; 
000018BC  422A 0168 1988          clr.b     360(A2)
000018C0  157C 007F 1989          move.b    #127,360+1(A2)
000018C4  0169      
000018C6  157C 007F 1990          move.b    #127,360+2(A2)
000018CA  016A      
000018CC  157C 0030 1991          move.b    #48,360+3(A2)
000018D0  016B      
000018D2  157C 0018 1992          move.b    #24,360+4(A2)
000018D6  016C      
000018D8  157C 0030 1993          move.b    #48,360+5(A2)
000018DC  016D      
000018DE  157C 007F 1994          move.b    #127,360+6(A2)
000018E2  016E      
000018E4  157C 007F 1995          move.b    #127,360+7(A2)
000018E8  016F      
                    1996   ; graphics_font8x8[46][0]=0x00;graphics_font8x8[46][1]=0x7f;graphics_font8x8[46][2]=0x7f;graphics_font8x8[46][3]=0x38;graphics_font8x8[46][4]=0x1c;graphics_font8x8[46][5]=0x7f;graphics_font8x8[46][6]=0x7f;graphics_font8x8[46][7]=0x00; 
000018EA  422A 0170 1997          clr.b     368(A2)
000018EE  157C 007F 1998          move.b    #127,368+1(A2)
000018F2  0171      
000018F4  157C 007F 1999          move.b    #127,368+2(A2)
000018F8  0172      
000018FA  157C 0038 2000          move.b    #56,368+3(A2)
000018FE  0173      
00001900  157C 001C 2001          move.b    #28,368+4(A2)
00001904  0174      
00001906  157C 007F 2002          move.b    #127,368+5(A2)
0000190A  0175      
0000190C  157C 007F 2003          move.b    #127,368+6(A2)
00001910  0176      
00001912  422A 0177 2004          clr.b     368+7(A2)
                    2005   ; graphics_font8x8[47][0]=0x00;graphics_font8x8[47][1]=0x3e;graphics_font8x8[47][2]=0x7f;graphics_font8x8[47][3]=0x41;graphics_font8x8[47][4]=0x41;graphics_font8x8[47][5]=0x7f;graphics_font8x8[47][6]=0x3e;graphics_font8x8[47][7]=0x00; 
00001916  422A 0178 2006          clr.b     376(A2)
0000191A  157C 003E 2007          move.b    #62,376+1(A2)
0000191E  0179      
00001920  157C 007F 2008          move.b    #127,376+2(A2)
00001924  017A      
00001926  157C 0041 2009          move.b    #65,376+3(A2)
0000192A  017B      
0000192C  157C 0041 2010          move.b    #65,376+4(A2)
00001930  017C      
00001932  157C 007F 2011          move.b    #127,376+5(A2)
00001936  017D      
00001938  157C 003E 2012          move.b    #62,376+6(A2)
0000193C  017E      
0000193E  422A 017F 2013          clr.b     376+7(A2)
                    2014   ; graphics_font8x8[48][0]=0x00;graphics_font8x8[48][1]=0x7f;graphics_font8x8[48][2]=0x7f;graphics_font8x8[48][3]=0x48;graphics_font8x8[48][4]=0x48;graphics_font8x8[48][5]=0x78;graphics_font8x8[48][6]=0x30;graphics_font8x8[48][7]=0x00; 
00001942  422A 0180 2015          clr.b     384(A2)
00001946  157C 007F 2016          move.b    #127,384+1(A2)
0000194A  0181      
0000194C  157C 007F 2017          move.b    #127,384+2(A2)
00001950  0182      
00001952  157C 0048 2018          move.b    #72,384+3(A2)
00001956  0183      
00001958  157C 0048 2019          move.b    #72,384+4(A2)
0000195C  0184      
0000195E  157C 0078 2020          move.b    #120,384+5(A2)
00001962  0185      
00001964  157C 0030 2021          move.b    #48,384+6(A2)
00001968  0186      
0000196A  422A 0187 2022          clr.b     384+7(A2)
                    2023   ; graphics_font8x8[49][0]=0x00;graphics_font8x8[49][1]=0x3c;graphics_font8x8[49][2]=0x7e;graphics_font8x8[49][3]=0x42;graphics_font8x8[49][4]=0x43;graphics_font8x8[49][5]=0x7f;graphics_font8x8[49][6]=0x3d;graphics_font8x8[49][7]=0x00; 
0000196E  422A 0188 2024          clr.b     392(A2)
00001972  157C 003C 2025          move.b    #60,392+1(A2)
00001976  0189      
00001978  157C 007E 2026          move.b    #126,392+2(A2)
0000197C  018A      
0000197E  157C 0042 2027          move.b    #66,392+3(A2)
00001982  018B      
00001984  157C 0043 2028          move.b    #67,392+4(A2)
00001988  018C      
0000198A  157C 007F 2029          move.b    #127,392+5(A2)
0000198E  018D      
00001990  157C 003D 2030          move.b    #61,392+6(A2)
00001994  018E      
00001996  422A 018F 2031          clr.b     392+7(A2)
                    2032   ; graphics_font8x8[50][0]=0x00;graphics_font8x8[50][1]=0x7f;graphics_font8x8[50][2]=0x7f;graphics_font8x8[50][3]=0x4c;graphics_font8x8[50][4]=0x4e;graphics_font8x8[50][5]=0x7b;graphics_font8x8[50][6]=0x31;graphics_font8x8[50][7]=0x00; 
0000199A  422A 0190 2033          clr.b     400(A2)
0000199E  157C 007F 2034          move.b    #127,400+1(A2)
000019A2  0191      
000019A4  157C 007F 2035          move.b    #127,400+2(A2)
000019A8  0192      
000019AA  157C 004C 2036          move.b    #76,400+3(A2)
000019AE  0193      
000019B0  157C 004E 2037          move.b    #78,400+4(A2)
000019B4  0194      
000019B6  157C 007B 2038          move.b    #123,400+5(A2)
000019BA  0195      
000019BC  157C 0031 2039          move.b    #49,400+6(A2)
000019C0  0196      
000019C2  422A 0197 2040          clr.b     400+7(A2)
                    2041   ; graphics_font8x8[51][0]=0x00;graphics_font8x8[51][1]=0x32;graphics_font8x8[51][2]=0x7b;graphics_font8x8[51][3]=0x49;graphics_font8x8[51][4]=0x49;graphics_font8x8[51][5]=0x6f;graphics_font8x8[51][6]=0x26;graphics_font8x8[51][7]=0x00; 
000019C6  422A 0198 2042          clr.b     408(A2)
000019CA  157C 0032 2043          move.b    #50,408+1(A2)
000019CE  0199      
000019D0  157C 007B 2044          move.b    #123,408+2(A2)
000019D4  019A      
000019D6  157C 0049 2045          move.b    #73,408+3(A2)
000019DA  019B      
000019DC  157C 0049 2046          move.b    #73,408+4(A2)
000019E0  019C      
000019E2  157C 006F 2047          move.b    #111,408+5(A2)
000019E6  019D      
000019E8  157C 0026 2048          move.b    #38,408+6(A2)
000019EC  019E      
000019EE  422A 019F 2049          clr.b     408+7(A2)
                    2050   ; graphics_font8x8[52][0]=0x00;graphics_font8x8[52][1]=0x40;graphics_font8x8[52][2]=0x40;graphics_font8x8[52][3]=0x7f;graphics_font8x8[52][4]=0x7f;graphics_font8x8[52][5]=0x40;graphics_font8x8[52][6]=0x40;graphics_font8x8[52][7]=0x00; 
000019F2  422A 01A0 2051          clr.b     416(A2)
000019F6  157C 0040 2052          move.b    #64,416+1(A2)
000019FA  01A1      
000019FC  157C 0040 2053          move.b    #64,416+2(A2)
00001A00  01A2      
00001A02  157C 007F 2054          move.b    #127,416+3(A2)
00001A06  01A3      
00001A08  157C 007F 2055          move.b    #127,416+4(A2)
00001A0C  01A4      
00001A0E  157C 0040 2056          move.b    #64,416+5(A2)
00001A12  01A5      
00001A14  157C 0040 2057          move.b    #64,416+6(A2)
00001A18  01A6      
00001A1A  422A 01A7 2058          clr.b     416+7(A2)
                    2059   ; graphics_font8x8[53][0]=0x00;graphics_font8x8[53][1]=0x7e;graphics_font8x8[53][2]=0x7f;graphics_font8x8[53][3]=0x01;graphics_font8x8[53][4]=0x01;graphics_font8x8[53][5]=0x7f;graphics_font8x8[53][6]=0x7e;graphics_font8x8[53][7]=0x00; 
00001A1E  422A 01A8 2060          clr.b     424(A2)
00001A22  157C 007E 2061          move.b    #126,424+1(A2)
00001A26  01A9      
00001A28  157C 007F 2062          move.b    #127,424+2(A2)
00001A2C  01AA      
00001A2E  157C 0001 2063          move.b    #1,424+3(A2)
00001A32  01AB      
00001A34  157C 0001 2064          move.b    #1,424+4(A2)
00001A38  01AC      
00001A3A  157C 007F 2065          move.b    #127,424+5(A2)
00001A3E  01AD      
00001A40  157C 007E 2066          move.b    #126,424+6(A2)
00001A44  01AE      
00001A46  422A 01AF 2067          clr.b     424+7(A2)
                    2068   ; graphics_font8x8[54][0]=0x00;graphics_font8x8[54][1]=0x7c;graphics_font8x8[54][2]=0x7e;graphics_font8x8[54][3]=0x03;graphics_font8x8[54][4]=0x03;graphics_font8x8[54][5]=0x7e;graphics_font8x8[54][6]=0x7c;graphics_font8x8[54][7]=0x00; 
00001A4A  422A 01B0 2069          clr.b     432(A2)
00001A4E  157C 007C 2070          move.b    #124,432+1(A2)
00001A52  01B1      
00001A54  157C 007E 2071          move.b    #126,432+2(A2)
00001A58  01B2      
00001A5A  157C 0003 2072          move.b    #3,432+3(A2)
00001A5E  01B3      
00001A60  157C 0003 2073          move.b    #3,432+4(A2)
00001A64  01B4      
00001A66  157C 007E 2074          move.b    #126,432+5(A2)
00001A6A  01B5      
00001A6C  157C 007C 2075          move.b    #124,432+6(A2)
00001A70  01B6      
00001A72  422A 01B7 2076          clr.b     432+7(A2)
                    2077   ; graphics_font8x8[55][0]=0x00;graphics_font8x8[55][1]=0x7f;graphics_font8x8[55][2]=0x7f;graphics_font8x8[55][3]=0x06;graphics_font8x8[55][4]=0x0c;graphics_font8x8[55][5]=0x06;graphics_font8x8[55][6]=0x7f;graphics_font8x8[55][7]=0x7f; 
00001A76  422A 01B8 2078          clr.b     440(A2)
00001A7A  157C 007F 2079          move.b    #127,440+1(A2)
00001A7E  01B9      
00001A80  157C 007F 2080          move.b    #127,440+2(A2)
00001A84  01BA      
00001A86  157C 0006 2081          move.b    #6,440+3(A2)
00001A8A  01BB      
00001A8C  157C 000C 2082          move.b    #12,440+4(A2)
00001A90  01BC      
00001A92  157C 0006 2083          move.b    #6,440+5(A2)
00001A96  01BD      
00001A98  157C 007F 2084          move.b    #127,440+6(A2)
00001A9C  01BE      
00001A9E  157C 007F 2085          move.b    #127,440+7(A2)
00001AA2  01BF      
                    2086   ; graphics_font8x8[56][0]=0x00;graphics_font8x8[56][1]=0x63;graphics_font8x8[56][2]=0x77;graphics_font8x8[56][3]=0x1c;graphics_font8x8[56][4]=0x1c;graphics_font8x8[56][5]=0x77;graphics_font8x8[56][6]=0x63;graphics_font8x8[56][7]=0x00; 
00001AA4  422A 01C0 2087          clr.b     448(A2)
00001AA8  157C 0063 2088          move.b    #99,448+1(A2)
00001AAC  01C1      
00001AAE  157C 0077 2089          move.b    #119,448+2(A2)
00001AB2  01C2      
00001AB4  157C 001C 2090          move.b    #28,448+3(A2)
00001AB8  01C3      
00001ABA  157C 001C 2091          move.b    #28,448+4(A2)
00001ABE  01C4      
00001AC0  157C 0077 2092          move.b    #119,448+5(A2)
00001AC4  01C5      
00001AC6  157C 0063 2093          move.b    #99,448+6(A2)
00001ACA  01C6      
00001ACC  422A 01C7 2094          clr.b     448+7(A2)
                    2095   ; graphics_font8x8[57][0]=0x00;graphics_font8x8[57][1]=0x70;graphics_font8x8[57][2]=0x78;graphics_font8x8[57][3]=0x0f;graphics_font8x8[57][4]=0x0f;graphics_font8x8[57][5]=0x78;graphics_font8x8[57][6]=0x70;graphics_font8x8[57][7]=0x00; 
00001AD0  422A 01C8 2096          clr.b     456(A2)
00001AD4  157C 0070 2097          move.b    #112,456+1(A2)
00001AD8  01C9      
00001ADA  157C 0078 2098          move.b    #120,456+2(A2)
00001ADE  01CA      
00001AE0  157C 000F 2099          move.b    #15,456+3(A2)
00001AE4  01CB      
00001AE6  157C 000F 2100          move.b    #15,456+4(A2)
00001AEA  01CC      
00001AEC  157C 0078 2101          move.b    #120,456+5(A2)
00001AF0  01CD      
00001AF2  157C 0070 2102          move.b    #112,456+6(A2)
00001AF6  01CE      
00001AF8  422A 01CF 2103          clr.b     456+7(A2)
                    2104   ; graphics_font8x8[58][0]=0x00;graphics_font8x8[58][1]=0x43;graphics_font8x8[58][2]=0x47;graphics_font8x8[58][3]=0x4d;graphics_font8x8[58][4]=0x59;graphics_font8x8[58][5]=0x71;graphics_font8x8[58][6]=0x61;graphics_font8x8[58][7]=0x00; 
00001AFC  422A 01D0 2105          clr.b     464(A2)
00001B00  157C 0043 2106          move.b    #67,464+1(A2)
00001B04  01D1      
00001B06  157C 0047 2107          move.b    #71,464+2(A2)
00001B0A  01D2      
00001B0C  157C 004D 2108          move.b    #77,464+3(A2)
00001B10  01D3      
00001B12  157C 0059 2109          move.b    #89,464+4(A2)
00001B16  01D4      
00001B18  157C 0071 2110          move.b    #113,464+5(A2)
00001B1C  01D5      
00001B1E  157C 0061 2111          move.b    #97,464+6(A2)
00001B22  01D6      
00001B24  422A 01D7 2112          clr.b     464+7(A2)
                    2113   ; graphics_font8x8[59][0]=0x00;graphics_font8x8[59][1]=0x00;graphics_font8x8[59][2]=0x7f;graphics_font8x8[59][3]=0x7f;graphics_font8x8[59][4]=0x41;graphics_font8x8[59][5]=0x41;graphics_font8x8[59][6]=0x00;graphics_font8x8[59][7]=0x00; 
00001B28  422A 01D8 2114          clr.b     472(A2)
00001B2C  422A 01D9 2115          clr.b     472+1(A2)
00001B30  157C 007F 2116          move.b    #127,472+2(A2)
00001B34  01DA      
00001B36  157C 007F 2117          move.b    #127,472+3(A2)
00001B3A  01DB      
00001B3C  157C 0041 2118          move.b    #65,472+4(A2)
00001B40  01DC      
00001B42  157C 0041 2119          move.b    #65,472+5(A2)
00001B46  01DD      
00001B48  422A 01DE 2120          clr.b     472+6(A2)
00001B4C  422A 01DF 2121          clr.b     472+7(A2)
                    2122   ; graphics_font8x8[60][0]=0x00;graphics_font8x8[60][1]=0x20;graphics_font8x8[60][2]=0x30;graphics_font8x8[60][3]=0x18;graphics_font8x8[60][4]=0x0c;graphics_font8x8[60][5]=0x06;graphics_font8x8[60][6]=0x03;graphics_font8x8[60][7]=0x01; 
00001B50  422A 01E0 2123          clr.b     480(A2)
00001B54  157C 0020 2124          move.b    #32,480+1(A2)
00001B58  01E1      
00001B5A  157C 0030 2125          move.b    #48,480+2(A2)
00001B5E  01E2      
00001B60  157C 0018 2126          move.b    #24,480+3(A2)
00001B64  01E3      
00001B66  157C 000C 2127          move.b    #12,480+4(A2)
00001B6A  01E4      
00001B6C  157C 0006 2128          move.b    #6,480+5(A2)
00001B70  01E5      
00001B72  157C 0003 2129          move.b    #3,480+6(A2)
00001B76  01E6      
00001B78  157C 0001 2130          move.b    #1,480+7(A2)
00001B7C  01E7      
                    2131   ; graphics_font8x8[61][0]=0x00;graphics_font8x8[61][1]=0x00;graphics_font8x8[61][2]=0x41;graphics_font8x8[61][3]=0x41;graphics_font8x8[61][4]=0x7f;graphics_font8x8[61][5]=0x7f;graphics_font8x8[61][6]=0x00;graphics_font8x8[61][7]=0x00; 
00001B7E  422A 01E8 2132          clr.b     488(A2)
00001B82  422A 01E9 2133          clr.b     488+1(A2)
00001B86  157C 0041 2134          move.b    #65,488+2(A2)
00001B8A  01EA      
00001B8C  157C 0041 2135          move.b    #65,488+3(A2)
00001B90  01EB      
00001B92  157C 007F 2136          move.b    #127,488+4(A2)
00001B96  01EC      
00001B98  157C 007F 2137          move.b    #127,488+5(A2)
00001B9C  01ED      
00001B9E  422A 01EE 2138          clr.b     488+6(A2)
00001BA2  422A 01EF 2139          clr.b     488+7(A2)
                    2140   ; graphics_font8x8[62][0]=0x00;graphics_font8x8[62][1]=0x08;graphics_font8x8[62][2]=0x18;graphics_font8x8[62][3]=0x3f;graphics_font8x8[62][4]=0x3f;graphics_font8x8[62][5]=0x18;graphics_font8x8[62][6]=0x08;graphics_font8x8[62][7]=0x00;	
00001BA6  422A 01F0 2141          clr.b     496(A2)
00001BAA  157C 0008 2142          move.b    #8,496+1(A2)
00001BAE  01F1      
00001BB0  157C 0018 2143          move.b    #24,496+2(A2)
00001BB4  01F2      
00001BB6  157C 003F 2144          move.b    #63,496+3(A2)
00001BBA  01F3      
00001BBC  157C 003F 2145          move.b    #63,496+4(A2)
00001BC0  01F4      
00001BC2  157C 0018 2146          move.b    #24,496+5(A2)
00001BC6  01F5      
00001BC8  157C 0008 2147          move.b    #8,496+6(A2)
00001BCC  01F6      
00001BCE  422A 01F7 2148          clr.b     496+7(A2)
00001BD2  245F      2149          move.l    (A7)+,A2
00001BD4  4E75      2150          rts
                    2151   ; }
                    2152   ; void graphics_test_main() {
                    2153   _graphics_test_main:
                    2154   ; initialize_font();
00001BD6  4EB8 1134 2155          jsr       _initialize_font
                    2156   ; graphics_test_clrscr();
00001BDA  4EB8 0E78 2157          jsr       _graphics_test_clrscr
                    2158   ; draw_font();
00001BDE  4EB8 10A6 2159          jsr       _draw_font
                    2160   ; graphics_draw_string("HELLO WORLD", 0, 0);
00001BE2  42A7      2161          clr.l     -(A7)
00001BE4  42A7      2162          clr.l     -(A7)
00001BE6  4879 0000 2163          pea       @graphi~1_1.L
00001BEA  4B7A      
00001BEC  4EB8 105C 2164          jsr       _graphics_draw_string
00001BF0  DEFC 000C 2165          add.w     #12,A7
00001BF4  4E75      2166          rts
                    2167   ; }
                    2168   ; C:\COSMICIMPALASM68K\PROGRAMS\DEBUGMONITORCODE\COSMIC_IMPALAS.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    2169   ; #include <string.h>
                    2170   ; #include <stdio.h>
                    2171   ; #include <stdlib.h>
                    2172   ; #include <limits.h>
                    2173   ; #define PIXEL_BUFFER_VGA_BASEADDRESS   (0x01000000)
                    2174   ; #define VIDMEM_DIM1_W_BLANK_EDGES (256)
                    2175   ; #define VIDMEM_DIM1 (224)
                    2176   ; #define VIDMEM_DIM2 (32)
                    2177   ; #define VIDEOMEM_ADDR(x,y) ((volatile unsigned char *)(PIXEL_BUFFER_VGA_BASEADDRESS + ((y)*VIDMEM_DIM1_W_BLANK_EDGES)+(x)))
                    2178   ; #define VIDMEM(x,y) (*VIDEOMEM_ADDR(x,y))
                    2179   ; #define COSMIC_IMPALAS_TIMER_DELAY_MS (50)
                    2180   ; #define WRITE_VIDMEM(x,y,CH) ((*(volatile unsigned char *)(PIXEL_BUFFER_VGA_BASEADDRESS + ((y)*VIDMEM_DIM1_W_BLANK_EDGES)+(x))) = CH)
                    2181   ; #define MAX_ENEMIES 28
                    2182   ; int FIRE1  ;
                    2183   ; int LEFT1  ;
                    2184   ; int RIGHT1 ;
                    2185   ; #define LOCHAR 0x20
                    2186   ; #define HICHAR 0x5e
                    2187   ; //
                    2188   ; // GAME CODE
                    2189   ; //
                    2190   ; #define MAXLIVES 5
                    2191   ; typedef unsigned char byte;
                    2192   ; typedef signed char sbyte;
                    2193   ; typedef unsigned short word;
                    2194   ; typedef struct {
                    2195   ; byte x;
                    2196   ; byte y;
                    2197   ; byte shape; 
                    2198   ; } Enemy;
                    2199   ; typedef struct {
                    2200   ; byte right;
                    2201   ; byte down;
                    2202   ; } MarchMode;
                    2203   ; MarchMode this_mode, next_mode;
                    2204   ; byte enemy_index;
                    2205   ; byte num_enemies;
                    2206   ; byte player_x;
                    2207   ; byte bullet_x;
                    2208   ; byte bullet_y;
                    2209   ; byte bomb_x;
                    2210   ; byte bomb_y;
                    2211   ; byte attract;
                    2212   ; byte credits;
                    2213   ; byte curplayer;
                    2214   ; word score;
                    2215   ; byte lives;
                    2216   ; Enemy enemies[MAX_ENEMIES];
                    2217   ; char font8x8[HICHAR-LOCHAR+1][8];
                    2218   ; byte player_bitmap[56];
                    2219   ; byte bomb_bitmap[7];
                    2220   ; byte bullet_bitmap[6];
                    2221   ; byte enemy1_bitmap[34];
                    2222   ; byte enemy2_bitmap[34];
                    2223   ; byte enemy3_bitmap[34];
                    2224   ; byte enemy4_bitmap[34];
                    2225   ; byte* enemy_bitmaps[4];
                    2226   ; unsigned long seed; 
                    2227   ; extern int clock_count_ms;
                    2228   ; // Some Function Prototypes
                    2229   ; int _getch(void);
                    2230   ; void FlushKeyboard(void);
                    2231   ; ///////////////////////////////////////////////////////////////////////////
                    2232   ; //
                    2233   ; // Functions to Implement
                    2234   ; //
                    2235   ; ///////////////////////////////////////////////////////////////////////////
                    2236   ; void draw_sprite(byte* src, byte x, byte y)
                    2237   ; {
                    2238   _draw_sprite:
00001BF6  4E56 FFFC 2239          link      A6,#-4
00001BFA  48E7 3800 2240          movem.l   D2/D3/D4,-(A7)
00001BFE  282E 0008 2241          move.l    8(A6),D4
                    2242   ; byte i;
                    2243   ; byte j;
                    2244   ; byte w = *src++;
00001C02  2044      2245          move.l    D4,A0
00001C04  5284      2246          addq.l    #1,D4
00001C06  1D50 FFFE 2247          move.b    (A0),-2(A6)
                    2248   ; byte h = *src++;
00001C0A  2044      2249          move.l    D4,A0
00001C0C  5284      2250          addq.l    #1,D4
00001C0E  1D50 FFFF 2251          move.b    (A0),-1(A6)
                    2252   ; for (i=0; i<h; i++) {
00001C12  4203      2253          clr.b     D3
                    2254   draw_sprite_1:
00001C14  B62E FFFF 2255          cmp.b     -1(A6),D3
00001C18  6400 0044 2256          bhs       draw_sprite_3
                    2257   ; for (j=0; j<w; j++) {
00001C1C  4202      2258          clr.b     D2
                    2259   draw_sprite_4:
00001C1E  B42E FFFE 2260          cmp.b     -2(A6),D2
00001C22  6400 0036 2261          bhs       draw_sprite_6
                    2262   ; WRITE_VIDMEM(x+i, y+j, *src);  // Add the offsets to the base position
00001C26  2044      2263          move.l    D4,A0
00001C28  203C 0100 2264          move.l    #16777216,D0
00001C2C  0000      
00001C2E  122E 0013 2265          move.b    19(A6),D1
00001C32  D202      2266          add.b     D2,D1
00001C34  C27C 00FF 2267          and.w     #255,D1
00001C38  E141      2268          asl.w     #8,D1
00001C3A  48C1      2269          ext.l     D1
00001C3C  2F00      2270          move.l    D0,-(A7)
00001C3E  102E 000F 2271          move.b    15(A6),D0
00001C42  D003      2272          add.b     D3,D0
00001C44  C0BC 0000 2273          and.l     #255,D0
00001C48  00FF      
00001C4A  D280      2274          add.l     D0,D1
00001C4C  201F      2275          move.l    (A7)+,D0
00001C4E  D081      2276          add.l     D1,D0
00001C50  2240      2277          move.l    D0,A1
00001C52  1290      2278          move.b    (A0),(A1)
                    2279   ; src++;
00001C54  5284      2280          addq.l    #1,D4
00001C56  5202      2281          addq.b    #1,D2
00001C58  60C4      2282          bra       draw_sprite_4
                    2283   draw_sprite_6:
00001C5A  5203      2284          addq.b    #1,D3
00001C5C  60B6      2285          bra       draw_sprite_1
                    2286   draw_sprite_3:
00001C5E  4CDF 001C 2287          movem.l   (A7)+,D2/D3/D4
00001C62  4E5E      2288          unlk      A6
00001C64  4E75      2289          rts
                    2290   ; }
                    2291   ; }
                    2292   ; }
                    2293   ; byte xor_sprite(const byte* src, byte x, byte y) {
                    2294   _xor_sprite:
00001C66  4E56 FFFC 2295          link      A6,#-4
00001C6A  48E7 3C00 2296          movem.l   D2/D3/D4/D5,-(A7)
00001C6E  282E 0008 2297          move.l    8(A6),D4
                    2298   ; byte i,j;
                    2299   ; byte result = 0;
00001C72  4205      2300          clr.b     D5
                    2301   ; byte w = *src++;
00001C74  2044      2302          move.l    D4,A0
00001C76  5284      2303          addq.l    #1,D4
00001C78  1D50 FFFE 2304          move.b    (A0),-2(A6)
                    2305   ; byte h = *src++;
00001C7C  2044      2306          move.l    D4,A0
00001C7E  5284      2307          addq.l    #1,D4
00001C80  1D50 FFFF 2308          move.b    (A0),-1(A6)
                    2309   ; for (i=0; i<h; i++) {
00001C84  4203      2310          clr.b     D3
                    2311   xor_sprite_1:
00001C86  B62E FFFF 2312          cmp.b     -1(A6),D3
00001C8A  6400 004A 2313          bhs       xor_sprite_3
                    2314   ; for (j=0; j<w; j++) {
00001C8E  4202      2315          clr.b     D2
                    2316   xor_sprite_4:
00001C90  B42E FFFE 2317          cmp.b     -2(A6),D2
00001C94  6400 003C 2318          bhs       xor_sprite_6
                    2319   ; result |= (VIDMEM(x+i, y+j) ^= *src++);
00001C98  203C 0100 2320          move.l    #16777216,D0
00001C9C  0000      
00001C9E  122E 0013 2321          move.b    19(A6),D1
00001CA2  D202      2322          add.b     D2,D1
00001CA4  C27C 00FF 2323          and.w     #255,D1
00001CA8  E141      2324          asl.w     #8,D1
00001CAA  48C1      2325          ext.l     D1
00001CAC  2F00      2326          move.l    D0,-(A7)
00001CAE  102E 000F 2327          move.b    15(A6),D0
00001CB2  D003      2328          add.b     D3,D0
00001CB4  C0BC 0000 2329          and.l     #255,D0
00001CB8  00FF      
00001CBA  D280      2330          add.l     D0,D1
00001CBC  201F      2331          move.l    (A7)+,D0
00001CBE  D081      2332          add.l     D1,D0
00001CC0  2040      2333          move.l    D0,A0
00001CC2  2244      2334          move.l    D4,A1
00001CC4  5284      2335          addq.l    #1,D4
00001CC6  1011      2336          move.b    (A1),D0
00001CC8  B110      2337          eor.b     D0,(A0)
00001CCA  1010      2338          move.b    (A0),D0
00001CCC  8A00      2339          or.b      D0,D5
00001CCE  5202      2340          addq.b    #1,D2
00001CD0  60BE      2341          bra       xor_sprite_4
                    2342   xor_sprite_6:
00001CD2  5203      2343          addq.b    #1,D3
00001CD4  60B0      2344          bra       xor_sprite_1
                    2345   xor_sprite_3:
                    2346   ; }
                    2347   ; }
                    2348   ; return result;
00001CD6  1005      2349          move.b    D5,D0
00001CD8  4CDF 003C 2350          movem.l   (A7)+,D2/D3/D4/D5
00001CDC  4E5E      2351          unlk      A6
00001CDE  4E75      2352          rts
                    2353   ; }
                    2354   ; void erase_sprite(const byte* src, byte x, byte y) {
                    2355   _erase_sprite:
00001CE0  4E56 FFFC 2356          link      A6,#-4
00001CE4  48E7 3800 2357          movem.l   D2/D3/D4,-(A7)
00001CE8  282E 0008 2358          move.l    8(A6),D4
                    2359   ; byte i,j;
                    2360   ; byte w = *src++;
00001CEC  2044      2361          move.l    D4,A0
00001CEE  5284      2362          addq.l    #1,D4
00001CF0  1D50 FFFE 2363          move.b    (A0),-2(A6)
                    2364   ; byte h = *src++;
00001CF4  2044      2365          move.l    D4,A0
00001CF6  5284      2366          addq.l    #1,D4
00001CF8  1D50 FFFF 2367          move.b    (A0),-1(A6)
                    2368   ; for (i=0; i<h; i++) {
00001CFC  4203      2369          clr.b     D3
                    2370   erase_sprite_1:
00001CFE  B62E FFFF 2371          cmp.b     -1(A6),D3
00001D02  6400 0048 2372          bhs       erase_sprite_3
                    2373   ; for (j=0; j<w; j++) {
00001D06  4202      2374          clr.b     D2
                    2375   erase_sprite_4:
00001D08  B42E FFFE 2376          cmp.b     -2(A6),D2
00001D0C  6400 003A 2377          bhs       erase_sprite_6
                    2378   ; VIDMEM(x+i, y+j) &= ~(*src++);
00001D10  203C 0100 2379          move.l    #16777216,D0
00001D14  0000      
00001D16  122E 0013 2380          move.b    19(A6),D1
00001D1A  D202      2381          add.b     D2,D1
00001D1C  C27C 00FF 2382          and.w     #255,D1
00001D20  E141      2383          asl.w     #8,D1
00001D22  48C1      2384          ext.l     D1
00001D24  2F00      2385          move.l    D0,-(A7)
00001D26  102E 000F 2386          move.b    15(A6),D0
00001D2A  D003      2387          add.b     D3,D0
00001D2C  C0BC 0000 2388          and.l     #255,D0
00001D30  00FF      
00001D32  D280      2389          add.l     D0,D1
00001D34  201F      2390          move.l    (A7)+,D0
00001D36  D081      2391          add.l     D1,D0
00001D38  2040      2392          move.l    D0,A0
00001D3A  2244      2393          move.l    D4,A1
00001D3C  5284      2394          addq.l    #1,D4
00001D3E  1011      2395          move.b    (A1),D0
00001D40  4600      2396          not.b     D0
00001D42  C110      2397          and.b     D0,(A0)
00001D44  5202      2398          addq.b    #1,D2
00001D46  60C0      2399          bra       erase_sprite_4
                    2400   erase_sprite_6:
00001D48  5203      2401          addq.b    #1,D3
00001D4A  60B2      2402          bra       erase_sprite_1
                    2403   erase_sprite_3:
00001D4C  4CDF 001C 2404          movem.l   (A7)+,D2/D3/D4
00001D50  4E5E      2405          unlk      A6
00001D52  4E75      2406          rts
                    2407   ; }
                    2408   ; }
                    2409   ; }
                    2410   ; void clear_sprite(byte *src, byte x, byte y)
                    2411   ; {
                    2412   _clear_sprite:
00001D54  4E56 FFFC 2413          link      A6,#-4
00001D58  48E7 3000 2414          movem.l   D2/D3,-(A7)
                    2415   ; byte i;
                    2416   ; byte j;
                    2417   ; byte w = *src++;
00001D5C  206E 0008 2418          move.l    8(A6),A0
00001D60  52AE 0008 2419          addq.l    #1,8(A6)
00001D64  1D50 FFFE 2420          move.b    (A0),-2(A6)
                    2421   ; byte h = *src++;
00001D68  206E 0008 2422          move.l    8(A6),A0
00001D6C  52AE 0008 2423          addq.l    #1,8(A6)
00001D70  1D50 FFFF 2424          move.b    (A0),-1(A6)
                    2425   ; for (i=0; i<h; i++) {
00001D74  4203      2426          clr.b     D3
                    2427   clear_sprite_1:
00001D76  B62E FFFF 2428          cmp.b     -1(A6),D3
00001D7A  6400 0040 2429          bhs       clear_sprite_3
                    2430   ; for (j=0; j<w; j++) {
00001D7E  4202      2431          clr.b     D2
                    2432   clear_sprite_4:
00001D80  B42E FFFE 2433          cmp.b     -2(A6),D2
00001D84  6400 0032 2434          bhs       clear_sprite_6
                    2435   ; WRITE_VIDMEM(x+i, y+j, 0);  // Add the offsets to the base position
00001D88  203C 0100 2436          move.l    #16777216,D0
00001D8C  0000      
00001D8E  122E 0013 2437          move.b    19(A6),D1
00001D92  D202      2438          add.b     D2,D1
00001D94  C27C 00FF 2439          and.w     #255,D1
00001D98  E141      2440          asl.w     #8,D1
00001D9A  48C1      2441          ext.l     D1
00001D9C  2F00      2442          move.l    D0,-(A7)
00001D9E  102E 000F 2443          move.b    15(A6),D0
00001DA2  D003      2444          add.b     D3,D0
00001DA4  C0BC 0000 2445          and.l     #255,D0
00001DA8  00FF      
00001DAA  D280      2446          add.l     D0,D1
00001DAC  201F      2447          move.l    (A7)+,D0
00001DAE  D081      2448          add.l     D1,D0
00001DB0  2040      2449          move.l    D0,A0
00001DB2  4210      2450          clr.b     (A0)
00001DB4  5202      2451          addq.b    #1,D2
00001DB6  60C8      2452          bra       clear_sprite_4
                    2453   clear_sprite_6:
00001DB8  5203      2454          addq.b    #1,D3
00001DBA  60BA      2455          bra       clear_sprite_1
                    2456   clear_sprite_3:
00001DBC  4CDF 000C 2457          movem.l   (A7)+,D2/D3
00001DC0  4E5E      2458          unlk      A6
00001DC2  4E75      2459          rts
                    2460   ; }
                    2461   ; }
                    2462   ; }
                    2463   ; void move_player() {
                    2464   _move_player:
                    2465   ; //complete this function
                    2466   ; // Clear sprite
                    2467   ; if (attract) return;
00001DC4  4A39 0803 2468          tst.b     _attract.L
00001DC8  0440      
00001DCA  6704      2469          beq.s     move_player_1
00001DCC  6000 00AC 2470          bra       move_player_3
                    2471   move_player_1:
                    2472   ; check_for_keypress();
00001DD0  4EB9 0000 2473          jsr       _check_for_keypress
00001DD4  1E7C      
                    2474   ; clear_sprite(player_bitmap, player_x, 1);
00001DD6  4878 0001 2475          pea       1
00001DDA  1239 0803 2476          move.b    _player_x.L,D1
00001DDE  0436      
00001DE0  C2BC 0000 2477          and.l     #255,D1
00001DE4  00FF      
00001DE6  2F01      2478          move.l    D1,-(A7)
00001DE8  4879 0803 2479          pea       _player_bitmap.L
00001DEC  0696      
00001DEE  4EB8 1D54 2480          jsr       _clear_sprite
00001DF2  DEFC 000C 2481          add.w     #12,A7
                    2482   ; if (LEFT1) {
00001DF6  4AB9 0803 2483          tst.l     _LEFT1.L
00001DFA  0426      
00001DFC  671A      2484          beq.s     move_player_4
                    2485   ; if (player_x > 0) player_x--;
00001DFE  1039 0803 2486          move.b    _player_x.L,D0
00001E02  0436      
00001E04  0C00 0000 2487          cmp.b     #0,D0
00001E08  6306      2488          bls.s     move_player_6
00001E0A  5339 0803 2489          subq.b    #1,_player_x.L
00001E0E  0436      
                    2490   move_player_6:
                    2491   ; LEFT1 = 0;
00001E10  42B9 0803 2492          clr.l     _LEFT1.L
00001E14  0426      
00001E16  6042      2493          bra.s     move_player_12
                    2494   move_player_4:
                    2495   ; } else if (RIGHT1) {
00001E18  4AB9 0803 2496          tst.l     _RIGHT1.L
00001E1C  042A      
00001E1E  671E      2497          beq.s     move_player_8
                    2498   ; if (player_x < VIDMEM_DIM1-26) player_x++;
00001E20  1039 0803 2499          move.b    _player_x.L,D0
00001E24  0436      
00001E26  C07C 00FF 2500          and.w     #255,D0
00001E2A  0C40 00C6 2501          cmp.w     #198,D0
00001E2E  6406      2502          bhs.s     move_player_10
00001E30  5239 0803 2503          addq.b    #1,_player_x.L
00001E34  0436      
                    2504   move_player_10:
                    2505   ; RIGHT1 = 0;
00001E36  42B9 0803 2506          clr.l     _RIGHT1.L
00001E3A  042A      
00001E3C  601C      2507          bra.s     move_player_12
                    2508   move_player_8:
                    2509   ; } else if (FIRE1 && bullet_y == 0) {
00001E3E  4AB9 0803 2510          tst.l     _FIRE1.L
00001E42  0422      
00001E44  6714      2511          beq.s     move_player_12
00001E46  1039 0803 2512          move.b    _bullet_y.L,D0
00001E4A  043A      
00001E4C  660C      2513          bne.s     move_player_12
                    2514   ; fire_bullet();
00001E4E  4EB9 0000 2515          jsr       _fire_bullet
00001E52  2A4E      
                    2516   ; FIRE1 = 0;
00001E54  42B9 0803 2517          clr.l     _FIRE1.L
00001E58  0422      
                    2518   move_player_12:
                    2519   ; }
                    2520   ; // logic for moving player
                    2521   ; // draw player
                    2522   ; draw_sprite(player_bitmap, player_x, 1);
00001E5A  4878 0001 2523          pea       1
00001E5E  1239 0803 2524          move.b    _player_x.L,D1
00001E62  0436      
00001E64  C2BC 0000 2525          and.l     #255,D1
00001E68  00FF      
00001E6A  2F01      2526          move.l    D1,-(A7)
00001E6C  4879 0803 2527          pea       _player_bitmap.L
00001E70  0696      
00001E72  4EB8 1BF6 2528          jsr       _draw_sprite
00001E76  DEFC 000C 2529          add.w     #12,A7
                    2530   move_player_3:
00001E7A  4E75      2531          rts
                    2532   ; }
                    2533   ; void check_for_keypress() {
                    2534   _check_for_keypress:
00001E7C  2F02      2535          move.l    D2,-(A7)
                    2536   ; //complete this function
                    2537   ; char c;
                    2538   ; //check for keypresses and set the appropriate flags
                    2539   ; //FIRE1, LEFT1, RIGHT1
                    2540   ; c = toupper(_waitch());
00001E7E  2F00      2541          move.l    D0,-(A7)
00001E80  4EB8 097A 2542          jsr       __waitch
00001E84  2200      2543          move.l    D0,D1
00001E86  201F      2544          move.l    (A7)+,D0
00001E88  2F01      2545          move.l    D1,-(A7)
00001E8A  4EB9 0000 2546          jsr       _toupper
00001E8E  3E10      
00001E90  584F      2547          addq.w    #4,A7
00001E92  1400      2548          move.b    D0,D2
                    2549   ; if ( c == (char)('A'))  {
00001E94  0C02 0041 2550          cmp.b     #65,D2
00001E98  660C      2551          bne.s     check_for_keypress_1
                    2552   ; LEFT1 = 1;
00001E9A  23FC 0000 2553          move.l    #1,_LEFT1.L
00001E9E  0001 0803 
00001EA2  0426      
00001EA4  6022      2554          bra.s     check_for_keypress_5
                    2555   check_for_keypress_1:
                    2556   ; } else if ( c == (char)('D')) {
00001EA6  0C02 0044 2557          cmp.b     #68,D2
00001EAA  660C      2558          bne.s     check_for_keypress_3
                    2559   ; RIGHT1 = 1;
00001EAC  23FC 0000 2560          move.l    #1,_RIGHT1.L
00001EB0  0001 0803 
00001EB4  042A      
00001EB6  6010      2561          bra.s     check_for_keypress_5
                    2562   check_for_keypress_3:
                    2563   ; } else if ( c == (char)(' ')) {
00001EB8  0C02 0020 2564          cmp.b     #32,D2
00001EBC  660A      2565          bne.s     check_for_keypress_5
                    2566   ; FIRE1 = 1;
00001EBE  23FC 0000 2567          move.l    #1,_FIRE1.L
00001EC2  0001 0803 
00001EC6  0422      
                    2568   check_for_keypress_5:
00001EC8  241F      2569          move.l    (A7)+,D2
00001ECA  4E75      2570          rts
                    2571   ; }
                    2572   ; }
                    2573   ; ///////////////////////////////////////////////////////////////////////////
                    2574   ; //
                    2575   ; // End Functions to Implement
                    2576   ; //
                    2577   ; ///////////////////////////////////////////////////////////////////////////
                    2578   ; // Set the seed
                    2579   ; void srand(unsigned long new_seed) {
                    2580   _srand:
00001ECC  4E56 0000 2581          link      A6,#0
                    2582   ; seed = new_seed;
00001ED0  23EE 0008 2583          move.l    8(A6),_seed.L
00001ED4  0803 0772 
00001ED8  4E5E      2584          unlk      A6
00001EDA  4E75      2585          rts
                    2586   ; }
                    2587   ; // Generate a pseudorandom number
                    2588   ; unsigned long long_rand(void) {
                    2589   _long_rand:
00001EDC  2F0A      2590          move.l    A2,-(A7)
00001EDE  45F9 0803 2591          lea       _seed.L,A2
00001EE2  0772      
                    2592   ; seed ^= seed << 13; // XOR with shifted value
00001EE4  2012      2593          move.l    (A2),D0
00001EE6  E188      2594          lsl.l     #8,D0
00001EE8  EB88      2595          lsl.l     #5,D0
00001EEA  B192      2596          eor.l     D0,(A2)
                    2597   ; seed ^= seed >> 17;
00001EEC  2012      2598          move.l    (A2),D0
00001EEE  E088      2599          lsr.l     #8,D0
00001EF0  E088      2600          lsr.l     #8,D0
00001EF2  E288      2601          lsr.l     #1,D0
00001EF4  B192      2602          eor.l     D0,(A2)
                    2603   ; seed ^= seed << 5;
00001EF6  2012      2604          move.l    (A2),D0
00001EF8  EB88      2605          lsl.l     #5,D0
00001EFA  B192      2606          eor.l     D0,(A2)
                    2607   ; return seed;
00001EFC  2012      2608          move.l    (A2),D0
00001EFE  245F      2609          move.l    (A7)+,A2
00001F00  4E75      2610          rts
                    2611   ; }
                    2612   ; int clock() {
                    2613   _clock:
                    2614   ; return clock_count_ms;
00001F02  2039 0803 2615          move.l    _clock_count_ms.L,D0
00001F06  01C2      
00001F08  4E75      2616          rts
                    2617   ; }
                    2618   ; void delay_ms(int num_ms) {
                    2619   _delay_ms:
00001F0A  4E56 0000 2620          link      A6,#0
00001F0E  48E7 3000 2621          movem.l   D2/D3,-(A7)
                    2622   ; int start_time;
                    2623   ; int current_time;
                    2624   ; start_time = clock();
00001F12  4EB8 1F02 2625          jsr       _clock
00001F16  2400      2626          move.l    D0,D2
                    2627   ; do {
                    2628   delay_ms_1:
                    2629   ; current_time = clock();
00001F18  4EB8 1F02 2630          jsr       _clock
00001F1C  2600      2631          move.l    D0,D3
                    2632   ; if (current_time < start_time) { //handle wraparound
00001F1E  B682      2633          cmp.l     D2,D3
00001F20  6C0E      2634          bge.s     delay_ms_3
                    2635   ; num_ms = num_ms - (INT_MAX-start_time);
00001F22  203C 7FFF 2636          move.l    #2147483647,D0
00001F26  FFFF      
00001F28  9082      2637          sub.l     D2,D0
00001F2A  91AE 0008 2638          sub.l     D0,8(A6)
                    2639   ; start_time = current_time;
00001F2E  2403      2640          move.l    D3,D2
                    2641   delay_ms_3:
00001F30  2003      2642          move.l    D3,D0
00001F32  9082      2643          sub.l     D2,D0
00001F34  B0AE 0008 2644          cmp.l     8(A6),D0
00001F38  6DDE      2645          blt       delay_ms_1
00001F3A  4CDF 000C 2646          movem.l   (A7)+,D2/D3
00001F3E  4E5E      2647          unlk      A6
00001F40  4E75      2648          rts
                    2649   ; }
                    2650   ; } while ((current_time - start_time) < num_ms);
                    2651   ; }
                    2652   ; void clrscr() {
                    2653   _clrscr:
00001F42  48E7 3000 2654          movem.l   D2/D3,-(A7)
                    2655   ; int a;
                    2656   ; int b;
                    2657   ; for (a = 0; a < VIDMEM_DIM1; a++) {
00001F46  4283      2658          clr.l     D3
                    2659   clrscr_1:
00001F48  0C83 0000 2660          cmp.l     #224,D3
00001F4C  00E0      
00001F4E  6C00 0032 2661          bge       clrscr_3
                    2662   ; for (b = 0; b < VIDMEM_DIM2; b++) {
00001F52  4282      2663          clr.l     D2
                    2664   clrscr_4:
00001F54  0C82 0000 2665          cmp.l     #32,D2
00001F58  0020      
00001F5A  6C22      2666          bge.s     clrscr_6
                    2667   ; WRITE_VIDMEM(a,b,0 /*0xff*/);	   
00001F5C  203C 0100 2668          move.l    #16777216,D0
00001F60  0000      
00001F62  2F02      2669          move.l    D2,-(A7)
00001F64  4878 0100 2670          pea       256
00001F68  4EB9 0000 2671          jsr       LMUL
00001F6C  3E80      
00001F6E  2217      2672          move.l    (A7),D1
00001F70  504F      2673          addq.w    #8,A7
00001F72  D283      2674          add.l     D3,D1
00001F74  D081      2675          add.l     D1,D0
00001F76  2040      2676          move.l    D0,A0
00001F78  4210      2677          clr.b     (A0)
00001F7A  5282      2678          addq.l    #1,D2
00001F7C  60D6      2679          bra       clrscr_4
                    2680   clrscr_6:
00001F7E  5283      2681          addq.l    #1,D3
00001F80  60C6      2682          bra       clrscr_1
                    2683   clrscr_3:
00001F82  4CDF 000C 2684          movem.l   (A7)+,D2/D3
00001F86  4E75      2685          rts
                    2686   ; }
                    2687   ; }
                    2688   ; //memset(vidmem, 0, VIDMEM_DIM1*VIDMEM_DIM2);
                    2689   ; }
                    2690   ; void xor_pixel(unsigned char x, unsigned char y) {
                    2691   _xor_pixel:
00001F88  4E56 FFFC 2692          link      A6,#-4
                    2693   ; unsigned char* dest;
                    2694   ; dest =  VIDEOMEM_ADDR(x,y>>3);
00001F8C  203C 0100 2695          move.l    #16777216,D0
00001F90  0000      
00001F92  122E 000F 2696          move.b    15(A6),D1
00001F96  E609      2697          lsr.b     #3,D1
00001F98  C27C 00FF 2698          and.w     #255,D1
00001F9C  E141      2699          asl.w     #8,D1
00001F9E  48C1      2700          ext.l     D1
00001FA0  2F00      2701          move.l    D0,-(A7)
00001FA2  102E 000B 2702          move.b    11(A6),D0
00001FA6  C0BC 0000 2703          and.l     #255,D0
00001FAA  00FF      
00001FAC  D280      2704          add.l     D0,D1
00001FAE  201F      2705          move.l    (A7)+,D0
00001FB0  D081      2706          add.l     D1,D0
00001FB2  2D40 FFFC 2707          move.l    D0,-4(A6)
                    2708   ; *dest = (*dest) ^ (0x1 << (y&7));
00001FB6  206E FFFC 2709          move.l    -4(A6),A0
00001FBA  7001      2710          moveq     #1,D0
00001FBC  122E 000F 2711          move.b    15(A6),D1
00001FC0  C23C 0007 2712          and.b     #7,D1
00001FC4  E328      2713          lsl.b     D1,D0
00001FC6  B110      2714          eor.b     D0,(A0)
00001FC8  4E5E      2715          unlk      A6
00001FCA  4E75      2716          rts
                    2717   ; }
                    2718   ; void draw_vline(unsigned char x, unsigned char y1, unsigned char y2) {
                    2719   _draw_vline:
00001FCC  4E56 FFFC 2720          link      A6,#-4
00001FD0  48E7 3E00 2721          movem.l   D2/D3/D4/D5/D6,-(A7)
00001FD4  1A2E 0013 2722          move.b    19(A6),D5
00001FD8  CABC 0000 2723          and.l     #255,D5
00001FDC  00FF      
                    2724   ; unsigned char yb1;
                    2725   ; unsigned char yb2;
                    2726   ; unsigned char val;
                    2727   ; unsigned char* dest;
                    2728   ; int nchars;
                    2729   ; yb1 = y1>>3;
00001FDE  102E 000F 2730          move.b    15(A6),D0
00001FE2  E608      2731          lsr.b     #3,D0
00001FE4  1C00      2732          move.b    D0,D6
                    2733   ; yb2 = y2>>3;
00001FE6  1005      2734          move.b    D5,D0
00001FE8  E608      2735          lsr.b     #3,D0
00001FEA  1D40 FFFF 2736          move.b    D0,-1(A6)
                    2737   ; nchars  = (((unsigned int) yb2) & 0xff) - (((unsigned int) yb1) & 0xff);
00001FEE  102E FFFF 2738          move.b    -1(A6),D0
00001FF2  C0BC 0000 2739          and.l     #255,D0
00001FF6  00FF      
00001FF8  C0BC 0000 2740          and.l     #255,D0
00001FFC  00FF      
00001FFE  1206      2741          move.b    D6,D1
00002000  C2BC 0000 2742          and.l     #255,D1
00002004  00FF      
00002006  C2BC 0000 2743          and.l     #255,D1
0000200A  00FF      
0000200C  9081      2744          sub.l     D1,D0
0000200E  2800      2745          move.l    D0,D4
                    2746   ; dest = VIDEOMEM_ADDR(x,yb1);
00002010  203C 0100 2747          move.l    #16777216,D0
00002014  0000      
00002016  1206      2748          move.b    D6,D1
00002018  C27C 00FF 2749          and.w     #255,D1
0000201C  E141      2750          asl.w     #8,D1
0000201E  48C1      2751          ext.l     D1
00002020  2F00      2752          move.l    D0,-(A7)
00002022  102E 000B 2753          move.b    11(A6),D0
00002026  C0BC 0000 2754          and.l     #255,D0
0000202A  00FF      
0000202C  D280      2755          add.l     D0,D1
0000202E  201F      2756          move.l    (A7)+,D0
00002030  D081      2757          add.l     D1,D0
00002032  2600      2758          move.l    D0,D3
                    2759   ; val = 0xff << (y1&7);
00002034  303C 00FF 2760          move.w    #255,D0
00002038  122E 000F 2761          move.b    15(A6),D1
0000203C  C23C 0007 2762          and.b     #7,D1
00002040  C27C 00FF 2763          and.w     #255,D1
00002044  E360      2764          asl.w     D1,D0
00002046  1400      2765          move.b    D0,D2
                    2766   ; *dest ^= val;
00002048  2043      2767          move.l    D3,A0
0000204A  B510      2768          eor.b     D2,(A0)
                    2769   ; dest = dest+VIDMEM_DIM1_W_BLANK_EDGES;
0000204C  0683 0000 2770          add.l     #256,D3
00002050  0100      
                    2771   ; if (nchars > 0) {
00002052  0C84 0000 2772          cmp.l     #0,D4
00002056  0000      
00002058  6F00 0036 2773          ble       draw_vline_1
                    2774   ; while (--nchars > 0) {
                    2775   draw_vline_3:
0000205C  5384      2776          subq.l    #1,D4
0000205E  0C84 0000 2777          cmp.l     #0,D4
00002062  0000      
00002064  6F10      2778          ble.s     draw_vline_5
                    2779   ; val =  0xff;
00002066  143C 00FF 2780          move.b    #255,D2
                    2781   ; *dest ^= val;
0000206A  2043      2782          move.l    D3,A0
0000206C  B510      2783          eor.b     D2,(A0)
                    2784   ; dest = dest+VIDMEM_DIM1_W_BLANK_EDGES;	  
0000206E  0683 0000 2785          add.l     #256,D3
00002072  0100      
00002074  60E6      2786          bra       draw_vline_3
                    2787   draw_vline_5:
                    2788   ; }
                    2789   ; val = (0xff >> (~y2&7));
00002076  303C 00FF 2790          move.w    #255,D0
0000207A  1205      2791          move.b    D5,D1
0000207C  4601      2792          not.b     D1
0000207E  C23C 0007 2793          and.b     #7,D1
00002082  C27C 00FF 2794          and.w     #255,D1
00002086  E260      2795          asr.w     D1,D0
00002088  1400      2796          move.b    D0,D2
                    2797   ; *dest ^= val;
0000208A  2043      2798          move.l    D3,A0
0000208C  B510      2799          eor.b     D2,(A0)
0000208E  601E      2800          bra.s     draw_vline_2
                    2801   draw_vline_1:
                    2802   ; } else {
                    2803   ; dest = dest-VIDMEM_DIM1_W_BLANK_EDGES; 
00002090  0483 0000 2804          sub.l     #256,D3
00002094  0100      
                    2805   ; val = (0xff << ((y2+1)&7));
00002096  303C 00FF 2806          move.w    #255,D0
0000209A  1205      2807          move.b    D5,D1
0000209C  5201      2808          addq.b    #1,D1
0000209E  C23C 0007 2809          and.b     #7,D1
000020A2  C27C 00FF 2810          and.w     #255,D1
000020A6  E360      2811          asl.w     D1,D0
000020A8  1400      2812          move.b    D0,D2
                    2813   ; *dest ^= val;
000020AA  2043      2814          move.l    D3,A0
000020AC  B510      2815          eor.b     D2,(A0)
                    2816   draw_vline_2:
000020AE  4CDF 007C 2817          movem.l   (A7)+,D2/D3/D4/D5/D6
000020B2  4E5E      2818          unlk      A6
000020B4  4E75      2819          rts
                    2820   ; }
                    2821   ; }
                    2822   ; void draw_char(unsigned char ch, unsigned char x, unsigned char y) {
                    2823   _draw_char:
000020B6  4E56 0000 2824          link      A6,#0
000020BA  48E7 3800 2825          movem.l   D2/D3/D4,-(A7)
                    2826   ; unsigned char i;
                    2827   ; unsigned char* src;
                    2828   ; unsigned char* dest;
                    2829   ; src  = &font8x8[(ch-LOCHAR)][0];
000020BE  41F9 0803 2830          lea       _font8x8.L,A0
000020C2  049E      
000020C4  102E 000B 2831          move.b    11(A6),D0
000020C8  C0BC 0000 2832          and.l     #255,D0
000020CC  00FF      
000020CE  0480 0000 2833          sub.l     #32,D0
000020D2  0020      
000020D4  E788      2834          lsl.l     #3,D0
000020D6  D1C0      2835          add.l     D0,A0
000020D8  2808      2836          move.l    A0,D4
                    2837   ; dest = VIDEOMEM_ADDR(x*8,y);
000020DA  203C 0100 2838          move.l    #16777216,D0
000020DE  0000      
000020E0  122E 0013 2839          move.b    19(A6),D1
000020E4  C27C 00FF 2840          and.w     #255,D1
000020E8  E141      2841          asl.w     #8,D1
000020EA  48C1      2842          ext.l     D1
000020EC  2F00      2843          move.l    D0,-(A7)
000020EE  102E 000F 2844          move.b    15(A6),D0
000020F2  C07C 00FF 2845          and.w     #255,D0
000020F6  C0FC 0008 2846          mulu.w    #8,D0
000020FA  C0BC 0000 2847          and.l     #255,D0
000020FE  00FF      
00002100  D280      2848          add.l     D0,D1
00002102  201F      2849          move.l    (A7)+,D0
00002104  D081      2850          add.l     D1,D0
00002106  2600      2851          move.l    D0,D3
                    2852   ; for (i=0; i<8; i++) {
00002108  4202      2853          clr.b     D2
                    2854   draw_char_1:
0000210A  0C02 0008 2855          cmp.b     #8,D2
0000210E  640E      2856          bhs.s     draw_char_3
                    2857   ; *dest = *src;
00002110  2044      2858          move.l    D4,A0
00002112  2243      2859          move.l    D3,A1
00002114  1290      2860          move.b    (A0),(A1)
                    2861   ; dest += 1;//32;
00002116  5283      2862          addq.l    #1,D3
                    2863   ; src += 1;
00002118  5284      2864          addq.l    #1,D4
0000211A  5202      2865          addq.b    #1,D2
0000211C  60EC      2866          bra       draw_char_1
                    2867   draw_char_3:
0000211E  4CDF 001C 2868          movem.l   (A7)+,D2/D3/D4
00002122  4E5E      2869          unlk      A6
00002124  4E75      2870          rts
                    2871   ; }
                    2872   ; }
                    2873   ; void draw_string(char* str, byte x, byte y) {
                    2874   _draw_string:
00002126  4E56 0000 2875          link      A6,#0
0000212A  2F02      2876          move.l    D2,-(A7)
                    2877   ; do {
                    2878   draw_string_1:
                    2879   ; byte ch = *str++;
0000212C  206E 0008 2880          move.l    8(A6),A0
00002130  52AE 0008 2881          addq.l    #1,8(A6)
00002134  1410      2882          move.b    (A0),D2
                    2883   ; if (!ch) break;
00002136  4A02      2884          tst.b     D2
00002138  6602      2885          bne.s     draw_string_3
0000213A  602E      2886          bra.s     draw_string_2
                    2887   draw_string_3:
                    2888   ; draw_char(ch, x, y);
0000213C  122E 0013 2889          move.b    19(A6),D1
00002140  C2BC 0000 2890          and.l     #255,D1
00002144  00FF      
00002146  2F01      2891          move.l    D1,-(A7)
00002148  122E 000F 2892          move.b    15(A6),D1
0000214C  C2BC 0000 2893          and.l     #255,D1
00002150  00FF      
00002152  2F01      2894          move.l    D1,-(A7)
00002154  C4BC 0000 2895          and.l     #255,D2
00002158  00FF      
0000215A  2F02      2896          move.l    D2,-(A7)
0000215C  4EB8 20B6 2897          jsr       _draw_char
00002160  DEFC 000C 2898          add.w     #12,A7
                    2899   ; x++;
00002164  522E 000F 2900          addq.b    #1,15(A6)
00002168  60C2      2901          bra       draw_string_1
                    2902   draw_string_2:
0000216A  241F      2903          move.l    (A7)+,D2
0000216C  4E5E      2904          unlk      A6
0000216E  4E75      2905          rts
                    2906   ; } while (1);
                    2907   ; }
                    2908   ; void draw_bcd_word(word bcd, byte x, byte y) {
                    2909   _draw_bcd_word:
00002170  4E56 0000 2910          link      A6,#0
00002174  48E7 3000 2911          movem.l   D2/D3,-(A7)
00002178  162E 000F 2912          move.b    15(A6),D3
0000217C  C6BC 0000 2913          and.l     #255,D3
00002180  00FF      
                    2914   ; byte j;
                    2915   ; x += 3;
00002182  5603      2916          addq.b    #3,D3
                    2917   ; for (j=0; j<4; j++) {
00002184  4202      2918          clr.b     D2
                    2919   draw_bcd_word_1:
00002186  0C02 0004 2920          cmp.b     #4,D2
0000218A  6400 0048 2921          bhs       draw_bcd_word_3
                    2922   ; draw_char('0'+(bcd&0xf), x, y);
0000218E  122E 0013 2923          move.b    19(A6),D1
00002192  C2BC 0000 2924          and.l     #255,D1
00002196  00FF      
00002198  2F01      2925          move.l    D1,-(A7)
0000219A  C6BC 0000 2926          and.l     #255,D3
0000219E  00FF      
000021A0  2F03      2927          move.l    D3,-(A7)
000021A2  7230      2928          moveq     #48,D1
000021A4  4881      2929          ext.w     D1
000021A6  2F00      2930          move.l    D0,-(A7)
000021A8  302E 000A 2931          move.w    10(A6),D0
000021AC  C07C 000F 2932          and.w     #15,D0
000021B0  D240      2933          add.w     D0,D1
000021B2  201F      2934          move.l    (A7)+,D0
000021B4  C2BC 0000 2935          and.l     #255,D1
000021B8  00FF      
000021BA  2F01      2936          move.l    D1,-(A7)
000021BC  4EB8 20B6 2937          jsr       _draw_char
000021C0  DEFC 000C 2938          add.w     #12,A7
                    2939   ; x--;
000021C4  5303      2940          subq.b    #1,D3
                    2941   ; bcd >>= 4;
000021C6  302E 000A 2942          move.w    10(A6),D0
000021CA  E848      2943          lsr.w     #4,D0
000021CC  3D40 000A 2944          move.w    D0,10(A6)
000021D0  5202      2945          addq.b    #1,D2
000021D2  60B2      2946          bra       draw_bcd_word_1
                    2947   draw_bcd_word_3:
000021D4  4CDF 000C 2948          movem.l   (A7)+,D2/D3
000021D8  4E5E      2949          unlk      A6
000021DA  4E75      2950          rts
                    2951   ; }
                    2952   ; }
                    2953   ; // Function to add two BCD numbers
                    2954   ; word bcd_add(word a, word b)
                    2955   ; {
                    2956   _bcd_add:
000021DC  4E56 FFFC 2957          link      A6,#-4
000021E0  48E7 3F00 2958          movem.l   D2/D3/D4/D5/D6/D7,-(A7)
000021E4  382E 000E 2959          move.w    14(A6),D4
000021E8  C8BC 0000 2960          and.l     #65535,D4
000021EC  FFFF      
000021EE  3A2E 000A 2961          move.w    10(A6),D5
000021F2  CABC 0000 2962          and.l     #65535,D5
000021F6  FFFF      
                    2963   ; word result, carry, place, digit_a, digit_b, sum;
                    2964   ; result = 0;  /* Final BCD result */
000021F8  7E00      2965          moveq     #0,D7
                    2966   ; carry = 0;   /* Carry for BCD addition */
000021FA  4242      2967          clr.w     D2
                    2968   ; place = 0;   /* Bit position for reconstructing the result */
000021FC  4246      2969          clr.w     D6
                    2970   ; while (a > 0 || b > 0 || carry > 0) {
                    2971   bcd_add_1:
000021FE  0C45 0000 2972          cmp.w     #0,D5
00002202  620E      2973          bhi.s     bcd_add_4
00002204  0C44 0000 2974          cmp.w     #0,D4
00002208  6208      2975          bhi.s     bcd_add_4
0000220A  0C42 0000 2976          cmp.w     #0,D2
0000220E  6300 0040 2977          bls       bcd_add_3
                    2978   bcd_add_4:
                    2979   ; /* Extract the lowest BCD digit from each number using a mask */
                    2980   ; digit_a = a & 0xF;
00002212  3005      2981          move.w    D5,D0
00002214  C07C 000F 2982          and.w     #15,D0
00002218  3D40 FFFC 2983          move.w    D0,-4(A6)
                    2984   ; digit_b = b & 0xF;
0000221C  3004      2985          move.w    D4,D0
0000221E  C07C 000F 2986          and.w     #15,D0
00002222  3D40 FFFE 2987          move.w    D0,-2(A6)
                    2988   ; /* Add the digits and the carry */
                    2989   ; sum = digit_a + digit_b + carry;
00002226  302E FFFC 2990          move.w    -4(A6),D0
0000222A  D06E FFFE 2991          add.w     -2(A6),D0
0000222E  D042      2992          add.w     D2,D0
00002230  3600      2993          move.w    D0,D3
                    2994   ; /* Perform BCD correction if sum > 9 */
                    2995   ; if (sum > 9) {
00002232  0C43 0009 2996          cmp.w     #9,D3
00002236  6308      2997          bls.s     bcd_add_5
                    2998   ; sum -= 10;  /* Correct the sum */
00002238  0443 000A 2999          sub.w     #10,D3
                    3000   ; carry = 1;  /* Set the carry */
0000223C  7401      3001          moveq     #1,D2
0000223E  6002      3002          bra.s     bcd_add_6
                    3003   bcd_add_5:
                    3004   ; } else {
                    3005   ; carry = 0;  /* Reset carry */
00002240  4242      3006          clr.w     D2
                    3007   bcd_add_6:
                    3008   ; }
                    3009   ; /* Add the corrected digit to the result in its proper place */
                    3010   ; result |= (sum << place);
00002242  3003      3011          move.w    D3,D0
00002244  ED68      3012          lsl.w     D6,D0
00002246  8E40      3013          or.w      D0,D7
                    3014   ; /* Move to the next higher BCD digit */
                    3015   ; a >>= 4;
00002248  E84D      3016          lsr.w     #4,D5
                    3017   ; b >>= 4;
0000224A  E84C      3018          lsr.w     #4,D4
                    3019   ; place += 4;  /* Move to the next nibble */
0000224C  5846      3020          addq.w    #4,D6
0000224E  60AE      3021          bra       bcd_add_1
                    3022   bcd_add_3:
                    3023   ; }
                    3024   ; return result;
00002250  3007      3025          move.w    D7,D0
00002252  4CDF 00FC 3026          movem.l   (A7)+,D2/D3/D4/D5/D6/D7
00002256  4E5E      3027          unlk      A6
00002258  4E75      3028          rts
                    3029   ; }
                    3030   ; void draw_lives(byte player) 
                    3031   ; {
                    3032   _draw_lives:
0000225A  4E56 FFFC 3033          link      A6,#-4
0000225E  2F02      3034          move.l    D2,-(A7)
                    3035   ; byte i, n, x, y;
                    3036   ; n = lives;
00002260  1D79 0803 3037          move.b    _lives.L,-3(A6)
00002264  0448 FFFD 
                    3038   ; x = player ? (22 - MAXLIVES) : 6;
00002268  4A2E 000B 3039          tst.b     11(A6)
0000226C  6704      3040          beq.s     draw_lives_1
0000226E  7011      3041          moveq     #17,D0
00002270  6002      3042          bra.s     draw_lives_2
                    3043   draw_lives_1:
00002272  7006      3044          moveq     #6,D0
                    3045   draw_lives_2:
00002274  1D40 FFFE 3046          move.b    D0,-2(A6)
                    3047   ; y = 30;
00002278  1D7C 001E 3048          move.b    #30,-1(A6)
0000227C  FFFF      
                    3049   ; for (i = 0; i < MAXLIVES; i++) {
0000227E  4202      3050          clr.b     D2
                    3051   draw_lives_3:
00002280  0C02 0005 3052          cmp.b     #5,D2
00002284  6400 003E 3053          bhs       draw_lives_5
                    3054   ; draw_char(i < n ? '*' : ' ', x++, y);
00002288  122E FFFF 3055          move.b    -1(A6),D1
0000228C  C2BC 0000 3056          and.l     #255,D1
00002290  00FF      
00002292  2F01      3057          move.l    D1,-(A7)
00002294  122E FFFE 3058          move.b    -2(A6),D1
00002298  522E FFFE 3059          addq.b    #1,-2(A6)
0000229C  C2BC 0000 3060          and.l     #255,D1
000022A0  00FF      
000022A2  2F01      3061          move.l    D1,-(A7)
000022A4  B42E FFFD 3062          cmp.b     -3(A6),D2
000022A8  6404      3063          bhs.s     draw_lives_6
000022AA  722A      3064          moveq     #42,D1
000022AC  6002      3065          bra.s     draw_lives_7
                    3066   draw_lives_6:
000022AE  7220      3067          moveq     #32,D1
                    3068   draw_lives_7:
000022B0  C2BC 0000 3069          and.l     #255,D1
000022B4  00FF      
000022B6  2F01      3070          move.l    D1,-(A7)
000022B8  4EB8 20B6 3071          jsr       _draw_char
000022BC  DEFC 000C 3072          add.w     #12,A7
000022C0  5202      3073          addq.b    #1,D2
000022C2  60BC      3074          bra       draw_lives_3
                    3075   draw_lives_5:
000022C4  241F      3076          move.l    (A7)+,D2
000022C6  4E5E      3077          unlk      A6
000022C8  4E75      3078          rts
                    3079   ; }
                    3080   ; }
                    3081   ; void draw_score(byte player) {
                    3082   _draw_score:
000022CA  4E56 FFFC 3083          link      A6,#-4
                    3084   ; byte x, y;
                    3085   ; x = player ? 24 : 0;
000022CE  4A2E 000B 3086          tst.b     11(A6)
000022D2  6704      3087          beq.s     draw_score_1
000022D4  7018      3088          moveq     #24,D0
000022D6  6002      3089          bra.s     draw_score_2
                    3090   draw_score_1:
000022D8  4200      3091          clr.b     D0
                    3092   draw_score_2:
000022DA  1D40 FFFE 3093          move.b    D0,-2(A6)
                    3094   ; y = 30;
000022DE  1D7C 001E 3095          move.b    #30,-1(A6)
000022E2  FFFF      
                    3096   ; draw_bcd_word(score, x, y);
000022E4  122E FFFF 3097          move.b    -1(A6),D1
000022E8  C2BC 0000 3098          and.l     #255,D1
000022EC  00FF      
000022EE  2F01      3099          move.l    D1,-(A7)
000022F0  122E FFFE 3100          move.b    -2(A6),D1
000022F4  C2BC 0000 3101          and.l     #255,D1
000022F8  00FF      
000022FA  2F01      3102          move.l    D1,-(A7)
000022FC  3239 0803 3103          move.w    _score.L,D1
00002300  0446      
00002302  C2BC 0000 3104          and.l     #65535,D1
00002306  FFFF      
00002308  2F01      3105          move.l    D1,-(A7)
0000230A  4EB8 2170 3106          jsr       _draw_bcd_word
0000230E  DEFC 000C 3107          add.w     #12,A7
00002312  4E5E      3108          unlk      A6
00002314  4E75      3109          rts
                    3110   ; }
                    3111   ; void add_score(word pts) {
                    3112   _add_score:
00002316  4E56 0000 3113          link      A6,#0
                    3114   ; if (attract) return;
0000231A  4A39 0803 3115          tst.b     _attract.L
0000231E  0440      
00002320  6702      3116          beq.s     add_score_1
00002322  603A      3117          bra.s     add_score_3
                    3118   add_score_1:
                    3119   ; score = bcd_add(score, pts);
00002324  322E 000A 3120          move.w    10(A6),D1
00002328  C2BC 0000 3121          and.l     #65535,D1
0000232C  FFFF      
0000232E  2F01      3122          move.l    D1,-(A7)
00002330  3239 0803 3123          move.w    _score.L,D1
00002334  0446      
00002336  C2BC 0000 3124          and.l     #65535,D1
0000233A  FFFF      
0000233C  2F01      3125          move.l    D1,-(A7)
0000233E  4EB8 21DC 3126          jsr       _bcd_add
00002342  504F      3127          addq.w    #8,A7
00002344  33C0 0803 3128          move.w    D0,_score.L
00002348  0446      
                    3129   ; draw_score(curplayer);
0000234A  1239 0803 3130          move.b    _curplayer.L,D1
0000234E  0444      
00002350  C2BC 0000 3131          and.l     #255,D1
00002354  00FF      
00002356  2F01      3132          move.l    D1,-(A7)
00002358  4EB8 22CA 3133          jsr       _draw_score
0000235C  584F      3134          addq.w    #4,A7
                    3135   add_score_3:
0000235E  4E5E      3136          unlk      A6
00002360  4E75      3137          rts
                    3138   ; }
                    3139   ; byte get_char_rand() {
                    3140   _get_char_rand:
00002362  4E56 FFFC 3141          link      A6,#-4
                    3142   ; byte rand;
                    3143   ; rand = (byte) (long_rand() & 0xff);  	
00002366  4EB8 1EDC 3144          jsr       _long_rand
0000236A  C0BC 0000 3145          and.l     #255,D0
0000236E  00FF      
00002370  1D40 FFFF 3146          move.b    D0,-1(A6)
                    3147   ; return rand;
00002374  102E FFFF 3148          move.b    -1(A6),D0
00002378  4E5E      3149          unlk      A6
0000237A  4E75      3150          rts
                    3151   ; }
                    3152   ; void xor_player_derez() {
                    3153   _xor_player_derez:
0000237C  4E56 FFFC 3154          link      A6,#-4
00002380  48E7 3820 3155          movem.l   D2/D3/D4/A2,-(A7)
00002384  45F8 2362 3156          lea       _get_char_rand.L,A2
                    3157   ; byte i, j, x, y, rand;
                    3158   ; signed char xx, yy;
                    3159   ; x = player_x + 13;
00002388  1039 0803 3160          move.b    _player_x.L,D0
0000238C  0436      
0000238E  0600 000D 3161          add.b     #13,D0
00002392  1D40 FFFC 3162          move.b    D0,-4(A6)
                    3163   ; y = 8;
00002396  1D7C 0008 3164          move.b    #8,-3(A6)
0000239A  FFFD      
                    3165   ; rand = get_char_rand();
0000239C  4E92      3166          jsr       (A2)
0000239E  1400      3167          move.b    D0,D2
                    3168   ; for (j = 1; j <= 0x1f; j++) {
000023A0  7601      3169          moveq     #1,D3
                    3170   xor_player_derez_1:
000023A2  0C03 001F 3171          cmp.b     #31,D3
000023A6  6200 005C 3172          bhi       xor_player_derez_3
                    3173   ; for (i = 0; i < 50; i++) {
000023AA  4204      3174          clr.b     D4
                    3175   xor_player_derez_4:
000023AC  0C04 0032 3176          cmp.b     #50,D4
000023B0  6400 004E 3177          bhs       xor_player_derez_6
                    3178   ; rand = get_char_rand();
000023B4  4E92      3179          jsr       (A2)
000023B6  1400      3180          move.b    D0,D2
                    3181   ; xx = x + (rand & 0x1f) - 15;
000023B8  102E FFFC 3182          move.b    -4(A6),D0
000023BC  1202      3183          move.b    D2,D1
000023BE  C23C 001F 3184          and.b     #31,D1
000023C2  D001      3185          add.b     D1,D0
000023C4  0400 000F 3186          sub.b     #15,D0
000023C8  1D40 FFFE 3187          move.b    D0,-2(A6)
                    3188   ; rand = get_char_rand();
000023CC  4E92      3189          jsr       (A2)
000023CE  1400      3190          move.b    D0,D2
                    3191   ; yy = y + (rand & j);
000023D0  102E FFFD 3192          move.b    -3(A6),D0
000023D4  1202      3193          move.b    D2,D1
000023D6  C203      3194          and.b     D3,D1
000023D8  D001      3195          add.b     D1,D0
000023DA  1D40 FFFF 3196          move.b    D0,-1(A6)
                    3197   ; xor_pixel(xx, yy);
000023DE  122E FFFF 3198          move.b    -1(A6),D1
000023E2  C2BC 0000 3199          and.l     #255,D1
000023E6  00FF      
000023E8  2F01      3200          move.l    D1,-(A7)
000023EA  122E FFFE 3201          move.b    -2(A6),D1
000023EE  C2BC 0000 3202          and.l     #255,D1
000023F2  00FF      
000023F4  2F01      3203          move.l    D1,-(A7)
000023F6  4EB8 1F88 3204          jsr       _xor_pixel
000023FA  504F      3205          addq.w    #8,A7
000023FC  5204      3206          addq.b    #1,D4
000023FE  60AC      3207          bra       xor_player_derez_4
                    3208   xor_player_derez_6:
00002400  5203      3209          addq.b    #1,D3
00002402  609E      3210          bra       xor_player_derez_1
                    3211   xor_player_derez_3:
00002404  4CDF 041C 3212          movem.l   (A7)+,D2/D3/D4/A2
00002408  4E5E      3213          unlk      A6
0000240A  4E75      3214          rts
                    3215   ; }
                    3216   ; }
                    3217   ; }
                    3218   ; void destroy_player() {
                    3219   _destroy_player:
                    3220   ; xor_player_derez(); // xor derez pattern
0000240C  4EB8 237C 3221          jsr       _xor_player_derez
                    3222   ; xor_sprite(player_bitmap, player_x, 1); // erase ship via xor
00002410  4878 0001 3223          pea       1
00002414  1239 0803 3224          move.b    _player_x.L,D1
00002418  0436      
0000241A  C2BC 0000 3225          and.l     #255,D1
0000241E  00FF      
00002420  2F01      3226          move.l    D1,-(A7)
00002422  4879 0803 3227          pea       _player_bitmap.L
00002426  0696      
00002428  4EB8 1C66 3228          jsr       _xor_sprite
0000242C  DEFC 000C 3229          add.w     #12,A7
                    3230   ; xor_player_derez(); // xor 2x to erase derez pattern
00002430  4EB8 237C 3231          jsr       _xor_player_derez
                    3232   ; player_x = 0xff;
00002434  13FC 00FF 3233          move.b    #255,_player_x.L
00002438  0803 0436 
                    3234   ; lives--;
0000243C  5339 0803 3235          subq.b    #1,_lives.L
00002440  0448      
00002442  4E75      3236          rts
                    3237   ; }
                    3238   ; void init_enemies() {
                    3239   _init_enemies:
00002444  48E7 3C20 3240          movem.l   D2/D3/D4/D5/A2,-(A7)
00002448  45F9 0803 3241          lea       _enemies.L,A2
0000244C  044A      
                    3242   ; byte i, x, y, bm;
                    3243   ; x = 0;
0000244E  4203      3244          clr.b     D3
                    3245   ; y = 26;
00002450  7A1A      3246          moveq     #26,D5
                    3247   ; bm = 0;
00002452  4204      3248          clr.b     D4
                    3249   ; for (i = 0; i < MAX_ENEMIES; i++) {
00002454  4202      3250          clr.b     D2
                    3251   init_enemies_1:
00002456  0C02 001C 3252          cmp.b     #28,D2
0000245A  6400 0052 3253          bhs       init_enemies_3
                    3254   ; enemies[i].x = x;
0000245E  C4BC 0000 3255          and.l     #255,D2
00002462  00FF      
00002464  2002      3256          move.l    D2,D0
00002466  C1FC 0003 3257          muls      #3,D0
0000246A  1583 0800 3258          move.b    D3,0(A2,D0.L)
                    3259   ; enemies[i].y = y;
0000246E  C4BC 0000 3260          and.l     #255,D2
00002472  00FF      
00002474  2002      3261          move.l    D2,D0
00002476  C1FC 0003 3262          muls      #3,D0
0000247A  41F2 0800 3263          lea       0(A2,D0.L),A0
0000247E  1145 0001 3264          move.b    D5,1(A0)
                    3265   ; enemies[i].shape = bm;
00002482  C4BC 0000 3266          and.l     #255,D2
00002486  00FF      
00002488  2002      3267          move.l    D2,D0
0000248A  C1FC 0003 3268          muls      #3,D0
0000248E  41F2 0800 3269          lea       0(A2,D0.L),A0
00002492  1144 0002 3270          move.b    D4,2(A0)
                    3271   ; x += 28;
00002496  0603 001C 3272          add.b     #28,D3
                    3273   ; if (x > 180) {
0000249A  C67C 00FF 3274          and.w     #255,D3
0000249E  0C43 00B4 3275          cmp.w     #180,D3
000024A2  6306      3276          bls.s     init_enemies_4
                    3277   ; x = 0;
000024A4  4203      3278          clr.b     D3
                    3279   ; y -= 3;
000024A6  5705      3280          subq.b    #3,D5
                    3281   ; bm++;
000024A8  5204      3282          addq.b    #1,D4
                    3283   init_enemies_4:
000024AA  5202      3284          addq.b    #1,D2
000024AC  60A8      3285          bra       init_enemies_1
                    3286   init_enemies_3:
                    3287   ; }
                    3288   ; }
                    3289   ; enemy_index = 0;
000024AE  4239 0803 3290          clr.b     _enemy_index.L
000024B2  0432      
                    3291   ; num_enemies = MAX_ENEMIES;
000024B4  13FC 001C 3292          move.b    #28,_num_enemies.L
000024B8  0803 0434 
                    3293   ; this_mode.right = 1;
000024BC  13FC 0001 3294          move.b    #1,_this_mode.L
000024C0  0803 042E 
                    3295   ; this_mode.down = 0;
000024C4  4239 0803 3296          clr.b     _this_mode+1.L
000024C8  042F      
                    3297   ; next_mode.right = 1;
000024CA  13FC 0001 3298          move.b    #1,_next_mode.L
000024CE  0803 0430 
                    3299   ; next_mode.down = 0;
000024D2  4239 0803 3300          clr.b     _next_mode+1.L
000024D6  0431      
000024D8  4CDF 043C 3301          movem.l   (A7)+,D2/D3/D4/D5/A2
000024DC  4E75      3302          rts
                    3303   ; }
                    3304   ; void delete_enemy(Enemy* e) {
                    3305   _delete_enemy:
000024DE  4E56 0000 3306          link      A6,#0
000024E2  2F02      3307          move.l    D2,-(A7)
000024E4  242E 0008 3308          move.l    8(A6),D2
                    3309   ; clear_sprite(enemy_bitmaps[e->shape], e->x, e->y);
000024E8  2042      3310          move.l    D2,A0
000024EA  1228 0001 3311          move.b    1(A0),D1
000024EE  C2BC 0000 3312          and.l     #255,D1
000024F2  00FF      
000024F4  2F01      3313          move.l    D1,-(A7)
000024F6  2042      3314          move.l    D2,A0
000024F8  1210      3315          move.b    (A0),D1
000024FA  C2BC 0000 3316          and.l     #255,D1
000024FE  00FF      
00002500  2F01      3317          move.l    D1,-(A7)
00002502  2042      3318          move.l    D2,A0
00002504  1228 0002 3319          move.b    2(A0),D1
00002508  C2BC 0000 3320          and.l     #255,D1
0000250C  00FF      
0000250E  E589      3321          lsl.l     #2,D1
00002510  41F9 0803 3322          lea       _enemy_bitmaps.L,A0
00002514  0762      
00002516  2F30 1800 3323          move.l    0(A0,D1.L),-(A7)
0000251A  4EB8 1D54 3324          jsr       _clear_sprite
0000251E  DEFC 000C 3325          add.w     #12,A7
                    3326   ; memmove(e, e+1, sizeof(Enemy)*(enemies-e+MAX_ENEMIES-1));
00002522  41F9 0803 3327          lea       _enemies.L,A0
00002526  044A      
00002528  91C2      3328          sub.l     D2,A0
0000252A  2208      3329          move.l    A0,D1
0000252C  83FC 0003 3330          divs.w    #3,D1
00002530  0681 0000 3331          add.l     #28,D1
00002534  001C      
00002536  5381      3332          subq.l    #1,D1
00002538  2F01      3333          move.l    D1,-(A7)
0000253A  4878 0003 3334          pea       3
0000253E  4EB9 0000 3335          jsr       LMUL
00002542  3E80      
00002544  2217      3336          move.l    (A7),D1
00002546  504F      3337          addq.w    #8,A7
00002548  2F01      3338          move.l    D1,-(A7)
0000254A  2202      3339          move.l    D2,D1
0000254C  5681      3340          addq.l    #3,D1
0000254E  2F01      3341          move.l    D1,-(A7)
00002550  2F02      3342          move.l    D2,-(A7)
00002552  4EB9 0000 3343          jsr       _memmove
00002556  3F0E      
00002558  DEFC 000C 3344          add.w     #12,A7
                    3345   ; num_enemies--; // update_next_enemy() will check enemy_index
0000255C  5339 0803 3346          subq.b    #1,_num_enemies.L
00002560  0434      
00002562  241F      3347          move.l    (A7)+,D2
00002564  4E5E      3348          unlk      A6
00002566  4E75      3349          rts
                    3350   ; }
                    3351   ; void update_next_enemy() {
                    3352   _update_next_enemy:
00002568  48E7 0030 3353          movem.l   A2/A3,-(A7)
0000256C  45F9 0803 3354          lea       _enemies.L,A2
00002570  044A      
00002572  47F9 0803 3355          lea       _this_mode.L,A3
00002576  042E      
                    3356   ; if (enemy_index >= num_enemies) {
00002578  1039 0803 3357          move.b    _enemy_index.L,D0
0000257C  0432      
0000257E  B039 0803 3358          cmp.b     _num_enemies.L,D0
00002582  0434      
00002584  6514      3359          blo.s     update_next_enemy_1
                    3360   ; enemy_index = 0;
00002586  4239 0803 3361          clr.b     _enemy_index.L
0000258A  0432      
                    3362   ; this_mode.down = next_mode.down;
0000258C  1779 0803 3363          move.b    _next_mode+1.L,1(A3)
00002590  0431 0001 
                    3364   ; this_mode.right = next_mode.right;
00002594  16B9 0803 3365          move.b    _next_mode.L,(A3)
00002598  0430      
                    3366   update_next_enemy_1:
                    3367   ; }
                    3368   ; clear_sprite(enemy_bitmaps[enemies[enemy_index].shape], enemies[enemy_index].x, enemies[enemy_index].y);
0000259A  1239 0803 3369          move.b    _enemy_index.L,D1
0000259E  0432      
000025A0  C2BC 0000 3370          and.l     #255,D1
000025A4  00FF      
000025A6  C3FC 0003 3371          muls      #3,D1
000025AA  41F2 1800 3372          lea       0(A2,D1.L),A0
000025AE  1228 0001 3373          move.b    1(A0),D1
000025B2  C2BC 0000 3374          and.l     #255,D1
000025B6  00FF      
000025B8  2F01      3375          move.l    D1,-(A7)
000025BA  1239 0803 3376          move.b    _enemy_index.L,D1
000025BE  0432      
000025C0  C2BC 0000 3377          and.l     #255,D1
000025C4  00FF      
000025C6  C3FC 0003 3378          muls      #3,D1
000025CA  1232 1800 3379          move.b    0(A2,D1.L),D1
000025CE  C2BC 0000 3380          and.l     #255,D1
000025D2  00FF      
000025D4  2F01      3381          move.l    D1,-(A7)
000025D6  1239 0803 3382          move.b    _enemy_index.L,D1
000025DA  0432      
000025DC  C2BC 0000 3383          and.l     #255,D1
000025E0  00FF      
000025E2  C3FC 0003 3384          muls      #3,D1
000025E6  41F2 1800 3385          lea       0(A2,D1.L),A0
000025EA  1228 0002 3386          move.b    2(A0),D1
000025EE  C2BC 0000 3387          and.l     #255,D1
000025F2  00FF      
000025F4  E589      3388          lsl.l     #2,D1
000025F6  41F9 0803 3389          lea       _enemy_bitmaps.L,A0
000025FA  0762      
000025FC  2F30 1800 3390          move.l    0(A0,D1.L),-(A7)
00002600  4EB8 1D54 3391          jsr       _clear_sprite
00002604  DEFC 000C 3392          add.w     #12,A7
                    3393   ; if (this_mode.down) {
00002608  4A2B 0001 3394          tst.b     1(A3)
0000260C  6700 0066 3395          beq       update_next_enemy_3
                    3396   ; // if too close to ground, end game
                    3397   ; enemies[enemy_index].y = enemies[enemy_index].y-1;
00002610  1039 0803 3398          move.b    _enemy_index.L,D0
00002614  0432      
00002616  C0BC 0000 3399          and.l     #255,D0
0000261A  00FF      
0000261C  C1FC 0003 3400          muls      #3,D0
00002620  41F2 0800 3401          lea       0(A2,D0.L),A0
00002624  1028 0001 3402          move.b    1(A0),D0
00002628  5300      3403          subq.b    #1,D0
0000262A  1239 0803 3404          move.b    _enemy_index.L,D1
0000262E  0432      
00002630  C2BC 0000 3405          and.l     #255,D1
00002634  00FF      
00002636  C3FC 0003 3406          muls      #3,D1
0000263A  41F2 1800 3407          lea       0(A2,D1.L),A0
0000263E  1140 0001 3408          move.b    D0,1(A0)
                    3409   ; if (enemies[enemy_index].y < 5) {
00002642  1039 0803 3410          move.b    _enemy_index.L,D0
00002646  0432      
00002648  C0BC 0000 3411          and.l     #255,D0
0000264C  00FF      
0000264E  C1FC 0003 3412          muls      #3,D0
00002652  41F2 0800 3413          lea       0(A2,D0.L),A0
00002656  1028 0001 3414          move.b    1(A0),D0
0000265A  0C00 0005 3415          cmp.b     #5,D0
0000265E  640A      3416          bhs.s     update_next_enemy_5
                    3417   ; destroy_player();
00002660  4EB8 240C 3418          jsr       _destroy_player
                    3419   ; lives = 0;
00002664  4239 0803 3420          clr.b     _lives.L
00002668  0448      
                    3421   update_next_enemy_5:
                    3422   ; }
                    3423   ; next_mode.down = 0;
0000266A  4239 0803 3424          clr.b     _next_mode+1.L
0000266E  0431      
00002670  6000 0082 3425          bra       update_next_enemy_11
                    3426   update_next_enemy_3:
                    3427   ; } else {
                    3428   ; if (this_mode.right) {
00002674  4A13      3429          tst.b     (A3)
00002676  6742      3430          beq.s     update_next_enemy_7
                    3431   ; enemies[enemy_index].x += 2;
00002678  1039 0803 3432          move.b    _enemy_index.L,D0
0000267C  0432      
0000267E  C0BC 0000 3433          and.l     #255,D0
00002682  00FF      
00002684  C1FC 0003 3434          muls      #3,D0
00002688  5432 0800 3435          addq.b    #2,0(A2,D0.L)
                    3436   ; if (enemies[enemy_index].x >= 200) {
0000268C  1039 0803 3437          move.b    _enemy_index.L,D0
00002690  0432      
00002692  C0BC 0000 3438          and.l     #255,D0
00002696  00FF      
00002698  C1FC 0003 3439          muls      #3,D0
0000269C  1032 0800 3440          move.b    0(A2,D0.L),D0
000026A0  C07C 00FF 3441          and.w     #255,D0
000026A4  0C40 00C8 3442          cmp.w     #200,D0
000026A8  650E      3443          blo.s     update_next_enemy_9
                    3444   ; next_mode.down = 1;
000026AA  13FC 0001 3445          move.b    #1,_next_mode+1.L
000026AE  0803 0431 
                    3446   ; next_mode.right = 0;
000026B2  4239 0803 3447          clr.b     _next_mode.L
000026B6  0430      
                    3448   update_next_enemy_9:
000026B8  603A      3449          bra.s     update_next_enemy_11
                    3450   update_next_enemy_7:
                    3451   ; }
                    3452   ; } else {
                    3453   ; enemies[enemy_index].x -= 2;
000026BA  1039 0803 3454          move.b    _enemy_index.L,D0
000026BE  0432      
000026C0  C0BC 0000 3455          and.l     #255,D0
000026C4  00FF      
000026C6  C1FC 0003 3456          muls      #3,D0
000026CA  5532 0800 3457          subq.b    #2,0(A2,D0.L)
                    3458   ; if (enemies[enemy_index].x == 0) {
000026CE  1039 0803 3459          move.b    _enemy_index.L,D0
000026D2  0432      
000026D4  C0BC 0000 3460          and.l     #255,D0
000026D8  00FF      
000026DA  C1FC 0003 3461          muls      #3,D0
000026DE  1032 0800 3462          move.b    0(A2,D0.L),D0
000026E2  6610      3463          bne.s     update_next_enemy_11
                    3464   ; next_mode.down = 1;
000026E4  13FC 0001 3465          move.b    #1,_next_mode+1.L
000026E8  0803 0431 
                    3466   ; next_mode.right = 1;
000026EC  13FC 0001 3467          move.b    #1,_next_mode.L
000026F0  0803 0430 
                    3468   update_next_enemy_11:
                    3469   ; }
                    3470   ; }
                    3471   ; }
                    3472   ; draw_sprite(enemy_bitmaps[enemies[enemy_index].shape], enemies[enemy_index].x, enemies[enemy_index].y);
000026F4  1239 0803 3473          move.b    _enemy_index.L,D1
000026F8  0432      
000026FA  C2BC 0000 3474          and.l     #255,D1
000026FE  00FF      
00002700  C3FC 0003 3475          muls      #3,D1
00002704  41F2 1800 3476          lea       0(A2,D1.L),A0
00002708  1228 0001 3477          move.b    1(A0),D1
0000270C  C2BC 0000 3478          and.l     #255,D1
00002710  00FF      
00002712  2F01      3479          move.l    D1,-(A7)
00002714  1239 0803 3480          move.b    _enemy_index.L,D1
00002718  0432      
0000271A  C2BC 0000 3481          and.l     #255,D1
0000271E  00FF      
00002720  C3FC 0003 3482          muls      #3,D1
00002724  1232 1800 3483          move.b    0(A2,D1.L),D1
00002728  C2BC 0000 3484          and.l     #255,D1
0000272C  00FF      
0000272E  2F01      3485          move.l    D1,-(A7)
00002730  1239 0803 3486          move.b    _enemy_index.L,D1
00002734  0432      
00002736  C2BC 0000 3487          and.l     #255,D1
0000273A  00FF      
0000273C  C3FC 0003 3488          muls      #3,D1
00002740  41F2 1800 3489          lea       0(A2,D1.L),A0
00002744  1228 0002 3490          move.b    2(A0),D1
00002748  C2BC 0000 3491          and.l     #255,D1
0000274C  00FF      
0000274E  E589      3492          lsl.l     #2,D1
00002750  41F9 0803 3493          lea       _enemy_bitmaps.L,A0
00002754  0762      
00002756  2F30 1800 3494          move.l    0(A0,D1.L),-(A7)
0000275A  4EB8 1BF6 3495          jsr       _draw_sprite
0000275E  DEFC 000C 3496          add.w     #12,A7
                    3497   ; enemy_index++;
00002762  5239 0803 3498          addq.b    #1,_enemy_index.L
00002766  0432      
00002768  4CDF 0C00 3499          movem.l   (A7)+,A2/A3
0000276C  4E75      3500          rts
                    3501   ; }
                    3502   ; void draw_bunker(byte x, byte y, byte y2, byte h, byte w) {
                    3503   _draw_bunker:
0000276E  4E56 0000 3504          link      A6,#0
00002772  48E7 3E20 3505          movem.l   D2/D3/D4/D5/D6/A2,-(A7)
00002776  162E 000F 3506          move.b    15(A6),D3
0000277A  C6BC 0000 3507          and.l     #255,D3
0000277E  00FF      
00002780  182E 0017 3508          move.b    23(A6),D4
00002784  C8BC 0000 3509          and.l     #255,D4
00002788  00FF      
0000278A  1A2E 000B 3510          move.b    11(A6),D5
0000278E  CABC 0000 3511          and.l     #255,D5
00002792  00FF      
00002794  1C2E 0013 3512          move.b    19(A6),D6
00002798  CCBC 0000 3513          and.l     #255,D6
0000279C  00FF      
0000279E  45F8 1FCC 3514          lea       _draw_vline.L,A2
                    3515   ; byte i;
                    3516   ; for (i=0; i<h; i++) {
000027A2  4202      3517          clr.b     D2
                    3518   draw_bunker_1:
000027A4  B404      3519          cmp.b     D4,D2
000027A6  6400 0092 3520          bhs       draw_bunker_3
                    3521   ; draw_vline(x+i, y+i, y+y2+i*2);
000027AA  1203      3522          move.b    D3,D1
000027AC  D206      3523          add.b     D6,D1
000027AE  2F00      3524          move.l    D0,-(A7)
000027B0  1002      3525          move.b    D2,D0
000027B2  C07C 00FF 3526          and.w     #255,D0
000027B6  C0FC 0002 3527          mulu.w    #2,D0
000027BA  D200      3528          add.b     D0,D1
000027BC  201F      3529          move.l    (A7)+,D0
000027BE  C2BC 0000 3530          and.l     #255,D1
000027C2  00FF      
000027C4  2F01      3531          move.l    D1,-(A7)
000027C6  1203      3532          move.b    D3,D1
000027C8  D202      3533          add.b     D2,D1
000027CA  C2BC 0000 3534          and.l     #255,D1
000027CE  00FF      
000027D0  2F01      3535          move.l    D1,-(A7)
000027D2  1205      3536          move.b    D5,D1
000027D4  D202      3537          add.b     D2,D1
000027D6  C2BC 0000 3538          and.l     #255,D1
000027DA  00FF      
000027DC  2F01      3539          move.l    D1,-(A7)
000027DE  4E92      3540          jsr       (A2)
000027E0  DEFC 000C 3541          add.w     #12,A7
                    3542   ; draw_vline(x+h*2+w-i-1, y+i, y+y2+i*2);
000027E4  1203      3543          move.b    D3,D1
000027E6  D206      3544          add.b     D6,D1
000027E8  2F00      3545          move.l    D0,-(A7)
000027EA  1002      3546          move.b    D2,D0
000027EC  C07C 00FF 3547          and.w     #255,D0
000027F0  C0FC 0002 3548          mulu.w    #2,D0
000027F4  D200      3549          add.b     D0,D1
000027F6  201F      3550          move.l    (A7)+,D0
000027F8  C2BC 0000 3551          and.l     #255,D1
000027FC  00FF      
000027FE  2F01      3552          move.l    D1,-(A7)
00002800  1203      3553          move.b    D3,D1
00002802  D202      3554          add.b     D2,D1
00002804  C2BC 0000 3555          and.l     #255,D1
00002808  00FF      
0000280A  2F01      3556          move.l    D1,-(A7)
0000280C  1205      3557          move.b    D5,D1
0000280E  2F00      3558          move.l    D0,-(A7)
00002810  1004      3559          move.b    D4,D0
00002812  C07C 00FF 3560          and.w     #255,D0
00002816  C0FC 0002 3561          mulu.w    #2,D0
0000281A  D200      3562          add.b     D0,D1
0000281C  201F      3563          move.l    (A7)+,D0
0000281E  D22E 001B 3564          add.b     27(A6),D1
00002822  9202      3565          sub.b     D2,D1
00002824  5301      3566          subq.b    #1,D1
00002826  C2BC 0000 3567          and.l     #255,D1
0000282A  00FF      
0000282C  2F01      3568          move.l    D1,-(A7)
0000282E  4E92      3569          jsr       (A2)
00002830  DEFC 000C 3570          add.w     #12,A7
00002834  5202      3571          addq.b    #1,D2
00002836  6000 FF6C 3572          bra       draw_bunker_1
                    3573   draw_bunker_3:
                    3574   ; }
                    3575   ; for (i=0; i<w; i++) {
0000283A  4202      3576          clr.b     D2
                    3577   draw_bunker_4:
0000283C  B42E 001B 3578          cmp.b     27(A6),D2
00002840  6400 0042 3579          bhs       draw_bunker_6
                    3580   ; draw_vline(x+h+i, y+h, y+y2+h*2);
00002844  1203      3581          move.b    D3,D1
00002846  D206      3582          add.b     D6,D1
00002848  2F00      3583          move.l    D0,-(A7)
0000284A  1004      3584          move.b    D4,D0
0000284C  C07C 00FF 3585          and.w     #255,D0
00002850  C0FC 0002 3586          mulu.w    #2,D0
00002854  D200      3587          add.b     D0,D1
00002856  201F      3588          move.l    (A7)+,D0
00002858  C2BC 0000 3589          and.l     #255,D1
0000285C  00FF      
0000285E  2F01      3590          move.l    D1,-(A7)
00002860  1203      3591          move.b    D3,D1
00002862  D204      3592          add.b     D4,D1
00002864  C2BC 0000 3593          and.l     #255,D1
00002868  00FF      
0000286A  2F01      3594          move.l    D1,-(A7)
0000286C  1205      3595          move.b    D5,D1
0000286E  D204      3596          add.b     D4,D1
00002870  D202      3597          add.b     D2,D1
00002872  C2BC 0000 3598          and.l     #255,D1
00002876  00FF      
00002878  2F01      3599          move.l    D1,-(A7)
0000287A  4E92      3600          jsr       (A2)
0000287C  DEFC 000C 3601          add.w     #12,A7
00002880  5202      3602          addq.b    #1,D2
00002882  60B8      3603          bra       draw_bunker_4
                    3604   draw_bunker_6:
00002884  4CDF 047C 3605          movem.l   (A7)+,D2/D3/D4/D5/D6/A2
00002888  4E5E      3606          unlk      A6
0000288A  4E75      3607          rts
                    3608   ; }
                    3609   ; }
                    3610   ; void draw_playfield() {
                    3611   _draw_playfield:
0000288C  2F02      3612          move.l    D2,-(A7)
                    3613   ; byte i;
                    3614   ; clrscr();
0000288E  4EB8 1F42 3615          jsr       _clrscr
                    3616   ; draw_string("PLAYER 1", 0, 31);
00002892  4878 001F 3617          pea       31
00002896  42A7      3618          clr.l     -(A7)
00002898  4879 0000 3619          pea       @cosmic~1_1.L
0000289C  4B86      
0000289E  4EB8 2126 3620          jsr       _draw_string
000028A2  DEFC 000C 3621          add.w     #12,A7
                    3622   ; draw_score(0);
000028A6  42A7      3623          clr.l     -(A7)
000028A8  4EB8 22CA 3624          jsr       _draw_score
000028AC  584F      3625          addq.w    #4,A7
                    3626   ; draw_lives(0);
000028AE  42A7      3627          clr.l     -(A7)
000028B0  4EB8 225A 3628          jsr       _draw_lives
000028B4  584F      3629          addq.w    #4,A7
                    3630   ; for (i=0; i<224; i++) {
000028B6  4202      3631          clr.b     D2
                    3632   draw_playfield_1:
000028B8  C47C 00FF 3633          and.w     #255,D2
000028BC  0C42 00E0 3634          cmp.w     #224,D2
000028C0  6418      3635          bhs.s     draw_playfield_3
                    3636   ; WRITE_VIDMEM(i,0,0x7f & 0x55);
000028C2  203C 0100 3637          move.l    #16777216,D0
000028C6  0000      
000028C8  C4BC 0000 3638          and.l     #255,D2
000028CC  00FF      
000028CE  D082      3639          add.l     D2,D0
000028D0  2040      3640          move.l    D0,A0
000028D2  10BC 0055 3641          move.b    #85,(A0)
000028D6  5202      3642          addq.b    #1,D2
000028D8  60DE      3643          bra       draw_playfield_1
                    3644   draw_playfield_3:
                    3645   ; }
                    3646   ; draw_bunker(30, 40, 15, 15, 20);
000028DA  4878 0014 3647          pea       20
000028DE  4878 000F 3648          pea       15
000028E2  4878 000F 3649          pea       15
000028E6  4878 0028 3650          pea       40
000028EA  4878 001E 3651          pea       30
000028EE  4EB8 276E 3652          jsr       _draw_bunker
000028F2  DEFC 0014 3653          add.w     #20,A7
                    3654   ; draw_bunker(140, 40, 15, 15, 20);
000028F6  4878 0014 3655          pea       20
000028FA  4878 000F 3656          pea       15
000028FE  4878 000F 3657          pea       15
00002902  4878 0028 3658          pea       40
00002906  4878 008C 3659          pea       140
0000290A  4EB8 276E 3660          jsr       _draw_bunker
0000290E  DEFC 0014 3661          add.w     #20,A7
00002912  241F      3662          move.l    (A7)+,D2
00002914  4E75      3663          rts
                    3664   ; }
                    3665   ; char in_rect(e, x, y, w, h)
                    3666   ; Enemy *e;
                    3667   ; byte x, y, w, h;
                    3668   ; {
                    3669   _in_rect:
00002916  4E56 FFFC 3670          link      A6,#-4
0000291A  2F02      3671          move.l    D2,-(A7)
0000291C  242E 0008 3672          move.l    8(A6),D2
                    3673   ; byte eh, ew;
                    3674   ; eh = enemy_bitmaps[e->shape][0];
00002920  2042      3675          move.l    D2,A0
00002922  1028 0002 3676          move.b    2(A0),D0
00002926  C0BC 0000 3677          and.l     #255,D0
0000292A  00FF      
0000292C  E588      3678          lsl.l     #2,D0
0000292E  41F9 0803 3679          lea       _enemy_bitmaps.L,A0
00002932  0762      
00002934  2070 0800 3680          move.l    0(A0,D0.L),A0
00002938  1D50 FFFE 3681          move.b    (A0),-2(A6)
                    3682   ; ew = enemy_bitmaps[e->shape][1];
0000293C  2042      3683          move.l    D2,A0
0000293E  1028 0002 3684          move.b    2(A0),D0
00002942  C0BC 0000 3685          and.l     #255,D0
00002946  00FF      
00002948  E588      3686          lsl.l     #2,D0
0000294A  41F9 0803 3687          lea       _enemy_bitmaps.L,A0
0000294E  0762      
00002950  2070 0800 3688          move.l    0(A0,D0.L),A0
00002954  1D68 0001 3689          move.b    1(A0),-1(A6)
00002958  FFFF      
                    3690   ; return (x >= e->x - w && x <= e->x + ew && y >= e->y - h && y <= e->y + eh);
0000295A  2042      3691          move.l    D2,A0
0000295C  1010      3692          move.b    (A0),D0
0000295E  902E 0017 3693          sub.b     23(A6),D0
00002962  B02E 000F 3694          cmp.b     15(A6),D0
00002966  6200 0034 3695          bhi       in_rect_1
0000296A  2042      3696          move.l    D2,A0
0000296C  1010      3697          move.b    (A0),D0
0000296E  D02E FFFF 3698          add.b     -1(A6),D0
00002972  B02E 000F 3699          cmp.b     15(A6),D0
00002976  6524      3700          blo.s     in_rect_1
00002978  2042      3701          move.l    D2,A0
0000297A  1028 0001 3702          move.b    1(A0),D0
0000297E  902E 001B 3703          sub.b     27(A6),D0
00002982  B02E 0013 3704          cmp.b     19(A6),D0
00002986  6214      3705          bhi.s     in_rect_1
00002988  2042      3706          move.l    D2,A0
0000298A  1028 0001 3707          move.b    1(A0),D0
0000298E  D02E FFFE 3708          add.b     -2(A6),D0
00002992  B02E 0013 3709          cmp.b     19(A6),D0
00002996  6504      3710          blo.s     in_rect_1
00002998  7001      3711          moveq     #1,D0
0000299A  6002      3712          bra.s     in_rect_2
                    3713   in_rect_1:
0000299C  4280      3714          clr.l     D0
                    3715   in_rect_2:
0000299E  241F      3716          move.l    (A7)+,D2
000029A0  4E5E      3717          unlk      A6
000029A2  4E75      3718          rts
                    3719   ; }
                    3720   ; Enemy *find_enemy_at(x, y)
                    3721   ; byte x, y;
                    3722   ; {
                    3723   _find_enemy_at:
000029A4  4E56 0000 3724          link      A6,#0
000029A8  48E7 3000 3725          movem.l   D2/D3,-(A7)
                    3726   ; byte i;
                    3727   ; Enemy *e;
                    3728   ; for (i = 0; i < num_enemies; i++) {
000029AC  4202      3729          clr.b     D2
                    3730   find_enemy_at_1:
000029AE  B439 0803 3731          cmp.b     _num_enemies.L,D2
000029B2  0434      
000029B4  6400 004C 3732          bhs       find_enemy_at_3
                    3733   ; e = &enemies[i];
000029B8  41F9 0803 3734          lea       _enemies.L,A0
000029BC  044A      
000029BE  C4BC 0000 3735          and.l     #255,D2
000029C2  00FF      
000029C4  2002      3736          move.l    D2,D0
000029C6  C1FC 0003 3737          muls      #3,D0
000029CA  D1C0      3738          add.l     D0,A0
000029CC  2608      3739          move.l    A0,D3
                    3740   ; if (in_rect(e, x, y, 2, 0)) {
000029CE  42A7      3741          clr.l     -(A7)
000029D0  4878 0002 3742          pea       2
000029D4  122E 000F 3743          move.b    15(A6),D1
000029D8  C2BC 0000 3744          and.l     #255,D1
000029DC  00FF      
000029DE  2F01      3745          move.l    D1,-(A7)
000029E0  122E 000B 3746          move.b    11(A6),D1
000029E4  C2BC 0000 3747          and.l     #255,D1
000029E8  00FF      
000029EA  2F01      3748          move.l    D1,-(A7)
000029EC  2F03      3749          move.l    D3,-(A7)
000029EE  4EB8 2916 3750          jsr       _in_rect
000029F2  DEFC 0014 3751          add.w     #20,A7
000029F6  4A00      3752          tst.b     D0
000029F8  6704      3753          beq.s     find_enemy_at_4
                    3754   ; return e;
000029FA  2003      3755          move.l    D3,D0
000029FC  6006      3756          bra.s     find_enemy_at_6
                    3757   find_enemy_at_4:
000029FE  5202      3758          addq.b    #1,D2
00002A00  60AC      3759          bra       find_enemy_at_1
                    3760   find_enemy_at_3:
                    3761   ; }
                    3762   ; }
                    3763   ; return NULL;
00002A02  4280      3764          clr.l     D0
                    3765   find_enemy_at_6:
00002A04  4CDF 000C 3766          movem.l   (A7)+,D2/D3
00002A08  4E5E      3767          unlk      A6
00002A0A  4E75      3768          rts
                    3769   ; }
                    3770   ; void check_bullet_hit(x, y)
                    3771   ; byte x, y;
                    3772   ; {
                    3773   _check_bullet_hit:
00002A0C  4E56 0000 3774          link      A6,#0
00002A10  2F02      3775          move.l    D2,-(A7)
                    3776   ; Enemy *e;
                    3777   ; e = find_enemy_at(x, y);
00002A12  122E 000F 3778          move.b    15(A6),D1
00002A16  C2BC 0000 3779          and.l     #255,D1
00002A1A  00FF      
00002A1C  2F01      3780          move.l    D1,-(A7)
00002A1E  122E 000B 3781          move.b    11(A6),D1
00002A22  C2BC 0000 3782          and.l     #255,D1
00002A26  00FF      
00002A28  2F01      3783          move.l    D1,-(A7)
00002A2A  4EB8 29A4 3784          jsr       _find_enemy_at
00002A2E  504F      3785          addq.w    #8,A7
00002A30  2400      3786          move.l    D0,D2
                    3787   ; if (e) {
00002A32  4A82      3788          tst.l     D2
00002A34  6712      3789          beq.s     check_bullet_hit_1
                    3790   ; delete_enemy(e);
00002A36  2F02      3791          move.l    D2,-(A7)
00002A38  4EB8 24DE 3792          jsr       _delete_enemy
00002A3C  584F      3793          addq.w    #4,A7
                    3794   ; add_score(0x25);
00002A3E  4878 0025 3795          pea       37
00002A42  4EB8 2316 3796          jsr       _add_score
00002A46  584F      3797          addq.w    #4,A7
                    3798   check_bullet_hit_1:
00002A48  241F      3799          move.l    (A7)+,D2
00002A4A  4E5E      3800          unlk      A6
00002A4C  4E75      3801          rts
                    3802   ; }
                    3803   ; }
                    3804   ; void fire_bullet()
                    3805   ; {
                    3806   _fire_bullet:
                    3807   ; bullet_x = player_x + 13;
00002A4E  1039 0803 3808          move.b    _player_x.L,D0
00002A52  0436      
00002A54  0600 000D 3809          add.b     #13,D0
00002A58  13C0 0803 3810          move.b    D0,_bullet_x.L
00002A5C  0438      
                    3811   ; bullet_y = 3;
00002A5E  13FC 0003 3812          move.b    #3,_bullet_y.L
00002A62  0803 043A 
                    3813   ; xor_sprite(bullet_bitmap, bullet_x, bullet_y); /* Draw bullet */
00002A66  1239 0803 3814          move.b    _bullet_y.L,D1
00002A6A  043A      
00002A6C  C2BC 0000 3815          and.l     #255,D1
00002A70  00FF      
00002A72  2F01      3816          move.l    D1,-(A7)
00002A74  1239 0803 3817          move.b    _bullet_x.L,D1
00002A78  0438      
00002A7A  C2BC 0000 3818          and.l     #255,D1
00002A7E  00FF      
00002A80  2F01      3819          move.l    D1,-(A7)
00002A82  4879 0803 3820          pea       _bullet_bitmap.L
00002A86  06D6      
00002A88  4EB8 1C66 3821          jsr       _xor_sprite
00002A8C  DEFC 000C 3822          add.w     #12,A7
00002A90  4E75      3823          rts
                    3824   ; }
                    3825   ; void move_bullet()
                    3826   ; {
                    3827   _move_bullet:
00002A92  4E56 FFFC 3828          link      A6,#-4
00002A96  2F0A      3829          move.l    A2,-(A7)
00002A98  45F9 0803 3830          lea       _bullet_bitmap.L,A2
00002A9C  06D6      
                    3831   ; byte leftover;
                    3832   ; leftover = xor_sprite(bullet_bitmap, bullet_x, bullet_y); /* Erase bullet */
00002A9E  1239 0803 3833          move.b    _bullet_y.L,D1
00002AA2  043A      
00002AA4  C2BC 0000 3834          and.l     #255,D1
00002AA8  00FF      
00002AAA  2F01      3835          move.l    D1,-(A7)
00002AAC  1239 0803 3836          move.b    _bullet_x.L,D1
00002AB0  0438      
00002AB2  C2BC 0000 3837          and.l     #255,D1
00002AB6  00FF      
00002AB8  2F01      3838          move.l    D1,-(A7)
00002ABA  2F0A      3839          move.l    A2,-(A7)
00002ABC  4EB8 1C66 3840          jsr       _xor_sprite
00002AC0  DEFC 000C 3841          add.w     #12,A7
00002AC4  1D40 FFFF 3842          move.b    D0,-1(A6)
                    3843   ; if (leftover || bullet_y > 26) {
00002AC8  102E FFFF 3844          move.b    -1(A6),D0
00002ACC  C0BC 0000 3845          and.l     #255,D0
00002AD0  00FF      
00002AD2  660E      3846          bne.s     move_bullet_3
00002AD4  1039 0803 3847          move.b    _bullet_y.L,D0
00002AD8  043A      
00002ADA  0C00 001A 3848          cmp.b     #26,D0
00002ADE  6300 0054 3849          bls       move_bullet_1
                    3850   move_bullet_3:
                    3851   ; clear_sprite(bullet_bitmap, bullet_x, bullet_y);
00002AE2  1239 0803 3852          move.b    _bullet_y.L,D1
00002AE6  043A      
00002AE8  C2BC 0000 3853          and.l     #255,D1
00002AEC  00FF      
00002AEE  2F01      3854          move.l    D1,-(A7)
00002AF0  1239 0803 3855          move.b    _bullet_x.L,D1
00002AF4  0438      
00002AF6  C2BC 0000 3856          and.l     #255,D1
00002AFA  00FF      
00002AFC  2F01      3857          move.l    D1,-(A7)
00002AFE  2F0A      3858          move.l    A2,-(A7)
00002B00  4EB8 1D54 3859          jsr       _clear_sprite
00002B04  DEFC 000C 3860          add.w     #12,A7
                    3861   ; check_bullet_hit(bullet_x, bullet_y + 2);
00002B08  1239 0803 3862          move.b    _bullet_y.L,D1
00002B0C  043A      
00002B0E  5401      3863          addq.b    #2,D1
00002B10  C2BC 0000 3864          and.l     #255,D1
00002B14  00FF      
00002B16  2F01      3865          move.l    D1,-(A7)
00002B18  1239 0803 3866          move.b    _bullet_x.L,D1
00002B1C  0438      
00002B1E  C2BC 0000 3867          and.l     #255,D1
00002B22  00FF      
00002B24  2F01      3868          move.l    D1,-(A7)
00002B26  4EB8 2A0C 3869          jsr       _check_bullet_hit
00002B2A  504F      3870          addq.w    #8,A7
                    3871   ; bullet_y = 0;
00002B2C  4239 0803 3872          clr.b     _bullet_y.L
00002B30  043A      
00002B32  602C      3873          bra.s     move_bullet_2
                    3874   move_bullet_1:
                    3875   ; } else {
                    3876   ; bullet_y++;
00002B34  5239 0803 3877          addq.b    #1,_bullet_y.L
00002B38  043A      
                    3878   ; xor_sprite(bullet_bitmap, bullet_x, bullet_y); /* Draw bullet */
00002B3A  1239 0803 3879          move.b    _bullet_y.L,D1
00002B3E  043A      
00002B40  C2BC 0000 3880          and.l     #255,D1
00002B44  00FF      
00002B46  2F01      3881          move.l    D1,-(A7)
00002B48  1239 0803 3882          move.b    _bullet_x.L,D1
00002B4C  0438      
00002B4E  C2BC 0000 3883          and.l     #255,D1
00002B52  00FF      
00002B54  2F01      3884          move.l    D1,-(A7)
00002B56  2F0A      3885          move.l    A2,-(A7)
00002B58  4EB8 1C66 3886          jsr       _xor_sprite
00002B5C  DEFC 000C 3887          add.w     #12,A7
                    3888   move_bullet_2:
00002B60  245F      3889          move.l    (A7)+,A2
00002B62  4E5E      3890          unlk      A6
00002B64  4E75      3891          rts
                    3892   ; }
                    3893   ; }
                    3894   ; void drop_bomb()
                    3895   ; {
                    3896   _drop_bomb:
00002B66  2F02      3897          move.l    D2,-(A7)
                    3898   ; Enemy *e;
                    3899   ; e = &enemies[enemy_index];
00002B68  41F9 0803 3900          lea       _enemies.L,A0
00002B6C  044A      
00002B6E  1039 0803 3901          move.b    _enemy_index.L,D0
00002B72  0432      
00002B74  C0BC 0000 3902          and.l     #255,D0
00002B78  00FF      
00002B7A  C1FC 0003 3903          muls      #3,D0
00002B7E  D1C0      3904          add.l     D0,A0
00002B80  2408      3905          move.l    A0,D2
                    3906   ; bomb_x = e->x + 7;
00002B82  2042      3907          move.l    D2,A0
00002B84  1010      3908          move.b    (A0),D0
00002B86  5E00      3909          addq.b    #7,D0
00002B88  13C0 0803 3910          move.b    D0,_bomb_x.L
00002B8C  043C      
                    3911   ; bomb_y = e->y - 2;
00002B8E  2042      3912          move.l    D2,A0
00002B90  1028 0001 3913          move.b    1(A0),D0
00002B94  5500      3914          subq.b    #2,D0
00002B96  13C0 0803 3915          move.b    D0,_bomb_y.L
00002B9A  043E      
                    3916   ; xor_sprite(bomb_bitmap, bomb_x, bomb_y); /* Draw bomb */
00002B9C  1239 0803 3917          move.b    _bomb_y.L,D1
00002BA0  043E      
00002BA2  C2BC 0000 3918          and.l     #255,D1
00002BA6  00FF      
00002BA8  2F01      3919          move.l    D1,-(A7)
00002BAA  1239 0803 3920          move.b    _bomb_x.L,D1
00002BAE  043C      
00002BB0  C2BC 0000 3921          and.l     #255,D1
00002BB4  00FF      
00002BB6  2F01      3922          move.l    D1,-(A7)
00002BB8  4879 0803 3923          pea       _bomb_bitmap.L
00002BBC  06CE      
00002BBE  4EB8 1C66 3924          jsr       _xor_sprite
00002BC2  DEFC 000C 3925          add.w     #12,A7
00002BC6  241F      3926          move.l    (A7)+,D2
00002BC8  4E75      3927          rts
                    3928   ; }
                    3929   ; void move_bomb()
                    3930   ; {
                    3931   _move_bomb:
00002BCA  4E56 FFFC 3932          link      A6,#-4
00002BCE  2F0A      3933          move.l    A2,-(A7)
00002BD0  45F9 0803 3934          lea       _bomb_bitmap.L,A2
00002BD4  06CE      
                    3935   ; byte leftover;
                    3936   ; leftover = xor_sprite(bomb_bitmap, bomb_x, bomb_y); /* Erase bomb */
00002BD6  1239 0803 3937          move.b    _bomb_y.L,D1
00002BDA  043E      
00002BDC  C2BC 0000 3938          and.l     #255,D1
00002BE0  00FF      
00002BE2  2F01      3939          move.l    D1,-(A7)
00002BE4  1239 0803 3940          move.b    _bomb_x.L,D1
00002BE8  043C      
00002BEA  C2BC 0000 3941          and.l     #255,D1
00002BEE  00FF      
00002BF0  2F01      3942          move.l    D1,-(A7)
00002BF2  2F0A      3943          move.l    A2,-(A7)
00002BF4  4EB8 1C66 3944          jsr       _xor_sprite
00002BF8  DEFC 000C 3945          add.w     #12,A7
00002BFC  1D40 FFFF 3946          move.b    D0,-1(A6)
                    3947   ; if (bomb_y < 2) {
00002C00  1039 0803 3948          move.b    _bomb_y.L,D0
00002C04  043E      
00002C06  0C00 0002 3949          cmp.b     #2,D0
00002C0A  640A      3950          bhs.s     move_bomb_1
                    3951   ; bomb_y = 0;
00002C0C  4239 0803 3952          clr.b     _bomb_y.L
00002C10  043E      
00002C12  6000 0072 3953          bra       move_bomb_4
                    3954   move_bomb_1:
                    3955   ; } else if (leftover) {
00002C16  4A2E FFFF 3956          tst.b     -1(A6)
00002C1A  673E      3957          beq.s     move_bomb_3
                    3958   ; erase_sprite(bomb_bitmap, bomb_x, bomb_y); /* Erase bunker */
00002C1C  1239 0803 3959          move.b    _bomb_y.L,D1
00002C20  043E      
00002C22  C2BC 0000 3960          and.l     #255,D1
00002C26  00FF      
00002C28  2F01      3961          move.l    D1,-(A7)
00002C2A  1239 0803 3962          move.b    _bomb_x.L,D1
00002C2E  043C      
00002C30  C2BC 0000 3963          and.l     #255,D1
00002C34  00FF      
00002C36  2F01      3964          move.l    D1,-(A7)
00002C38  2F0A      3965          move.l    A2,-(A7)
00002C3A  4EB8 1CE0 3966          jsr       _erase_sprite
00002C3E  DEFC 000C 3967          add.w     #12,A7
                    3968   ; if (bomb_y < 3) {
00002C42  1039 0803 3969          move.b    _bomb_y.L,D0
00002C46  043E      
00002C48  0C00 0003 3970          cmp.b     #3,D0
00002C4C  6404      3971          bhs.s     move_bomb_5
                    3972   ; /* Player was hit (probably) */
                    3973   ; destroy_player();
00002C4E  4EB8 240C 3974          jsr       _destroy_player
                    3975   move_bomb_5:
                    3976   ; }
                    3977   ; bomb_y = 0;
00002C52  4239 0803 3978          clr.b     _bomb_y.L
00002C56  043E      
00002C58  602C      3979          bra.s     move_bomb_4
                    3980   move_bomb_3:
                    3981   ; } else {
                    3982   ; bomb_y--;
00002C5A  5339 0803 3983          subq.b    #1,_bomb_y.L
00002C5E  043E      
                    3984   ; xor_sprite(bomb_bitmap, bomb_x, bomb_y); /* Draw bomb */
00002C60  1239 0803 3985          move.b    _bomb_y.L,D1
00002C64  043E      
00002C66  C2BC 0000 3986          and.l     #255,D1
00002C6A  00FF      
00002C6C  2F01      3987          move.l    D1,-(A7)
00002C6E  1239 0803 3988          move.b    _bomb_x.L,D1
00002C72  043C      
00002C74  C2BC 0000 3989          and.l     #255,D1
00002C78  00FF      
00002C7A  2F01      3990          move.l    D1,-(A7)
00002C7C  2F0A      3991          move.l    A2,-(A7)
00002C7E  4EB8 1C66 3992          jsr       _xor_sprite
00002C82  DEFC 000C 3993          add.w     #12,A7
                    3994   move_bomb_4:
00002C86  245F      3995          move.l    (A7)+,A2
00002C88  4E5E      3996          unlk      A6
00002C8A  4E75      3997          rts
                    3998   ; }
                    3999   ; }
                    4000   ; byte frame;
                    4001   ; void play_round() {
                    4002   _play_round:
                    4003   ; draw_playfield();
00002C8C  4EB8 288C 4004          jsr       _draw_playfield
                    4005   ; player_x = 96;
00002C90  13FC 0060 4006          move.b    #96,_player_x.L
00002C94  0803 0436 
                    4007   ; bullet_y = 0;
00002C98  4239 0803 4008          clr.b     _bullet_y.L
00002C9C  043A      
                    4009   ; bomb_y = 0;
00002C9E  4239 0803 4010          clr.b     _bomb_y.L
00002CA2  043E      
                    4011   ; frame = 0;
00002CA4  4239 0803 4012          clr.b     _frame.L
00002CA8  0776      
                    4013   ; while (player_x != 0xff && num_enemies) {
                    4014   play_round_1:
00002CAA  1039 0803 4015          move.b    _player_x.L,D0
00002CAE  0436      
00002CB0  C07C 00FF 4016          and.w     #255,D0
00002CB4  0C40 00FF 4017          cmp.w     #255,D0
00002CB8  6700 0056 4018          beq       play_round_3
00002CBC  1039 0803 4019          move.b    _num_enemies.L,D0
00002CC0  0434      
00002CC2  C0BC 0000 4020          and.l     #255,D0
00002CC6  00FF      
00002CC8  6700 0046 4021          beq       play_round_3
                    4022   ; delay_ms(COSMIC_IMPALAS_TIMER_DELAY_MS);
00002CCC  4878 0032 4023          pea       50
00002CD0  4EB8 1F0A 4024          jsr       _delay_ms
00002CD4  584F      4025          addq.w    #4,A7
                    4026   ; move_player();
00002CD6  4EB8 1DC4 4027          jsr       _move_player
                    4028   ; if (bullet_y) {
00002CDA  4A39 0803 4029          tst.b     _bullet_y.L
00002CDE  043A      
00002CE0  6704      4030          beq.s     play_round_4
                    4031   ; move_bullet();
00002CE2  4EB8 2A92 4032          jsr       _move_bullet
                    4033   play_round_4:
                    4034   ; }
                    4035   ; update_next_enemy();
00002CE6  4EB8 2568 4036          jsr       _update_next_enemy
                    4037   ; if (frame & 1) {
00002CEA  1039 0803 4038          move.b    _frame.L,D0
00002CEE  0776      
00002CF0  C03C 0001 4039          and.b     #1,D0
00002CF4  6712      4040          beq.s     play_round_9
                    4041   ; if (bomb_y == 0) {
00002CF6  1039 0803 4042          move.b    _bomb_y.L,D0
00002CFA  043E      
00002CFC  6606      4043          bne.s     play_round_8
                    4044   ; drop_bomb();
00002CFE  4EB8 2B66 4045          jsr       _drop_bomb
00002D02  6004      4046          bra.s     play_round_9
                    4047   play_round_8:
                    4048   ; } else {
                    4049   ; move_bomb();
00002D04  4EB8 2BCA 4050          jsr       _move_bomb
                    4051   play_round_9:
                    4052   ; }
                    4053   ; }
                    4054   ; frame++;
00002D08  5239 0803 4055          addq.b    #1,_frame.L
00002D0C  0776      
00002D0E  609A      4056          bra       play_round_1
                    4057   play_round_3:
00002D10  4E75      4058          rts
                    4059   ; }
                    4060   ; }
                    4061   ; void init_game() {
                    4062   _init_game:
                    4063   ; score = 0;
00002D12  4279 0803 4064          clr.w     _score.L
00002D16  0446      
                    4065   ; lives = MAXLIVES;
00002D18  13FC 0005 4066          move.b    #5,_lives.L
00002D1C  0803 0448 
                    4067   ; curplayer = 0;
00002D20  4239 0803 4068          clr.b     _curplayer.L
00002D24  0444      
00002D26  4E75      4069          rts
                    4070   ; }
                    4071   ; void game_over_msg() {
                    4072   _game_over_msg:
00002D28  48E7 2020 4073          movem.l   D2/A2,-(A7)
00002D2C  45F8 2126 4074          lea       _draw_string.L,A2
                    4075   ; byte i;
                    4076   ; for (i=0; i<50; i++) {
00002D30  4202      4077          clr.b     D2
                    4078   game_over_msg_1:
00002D32  0C02 0032 4079          cmp.b     #50,D2
00002D36  6400 006A 4080          bhs       game_over_msg_3
                    4081   ; draw_string(" *************** ", 5, 15);
00002D3A  4878 000F 4082          pea       15
00002D3E  4878 0005 4083          pea       5
00002D42  4879 0000 4084          pea       @cosmic~1_2.L
00002D46  4B90      
00002D48  4E92      4085          jsr       (A2)
00002D4A  DEFC 000C 4086          add.w     #12,A7
                    4087   ; draw_string("***           ***", 5, 16);
00002D4E  4878 0010 4088          pea       16
00002D52  4878 0005 4089          pea       5
00002D56  4879 0000 4090          pea       @cosmic~1_3.L
00002D5A  4BA2      
00002D5C  4E92      4091          jsr       (A2)
00002D5E  DEFC 000C 4092          add.w     #12,A7
                    4093   ; draw_string("**  GAME OVER  **", 5, 17);
00002D62  4878 0011 4094          pea       17
00002D66  4878 0005 4095          pea       5
00002D6A  4879 0000 4096          pea       @cosmic~1_4.L
00002D6E  4BB4      
00002D70  4E92      4097          jsr       (A2)
00002D72  DEFC 000C 4098          add.w     #12,A7
                    4099   ; draw_string("***           ***", 5, 18);
00002D76  4878 0012 4100          pea       18
00002D7A  4878 0005 4101          pea       5
00002D7E  4879 0000 4102          pea       @cosmic~1_5.L
00002D82  4BC6      
00002D84  4E92      4103          jsr       (A2)
00002D86  DEFC 000C 4104          add.w     #12,A7
                    4105   ; draw_string(" *************** ", 5, 19);
00002D8A  4878 0013 4106          pea       19
00002D8E  4878 0005 4107          pea       5
00002D92  4879 0000 4108          pea       @cosmic~1_6.L
00002D96  4BD8      
00002D98  4E92      4109          jsr       (A2)
00002D9A  DEFC 000C 4110          add.w     #12,A7
00002D9E  5202      4111          addq.b    #1,D2
00002DA0  6090      4112          bra       game_over_msg_1
                    4113   game_over_msg_3:
00002DA2  4CDF 0404 4114          movem.l   (A7)+,D2/A2
00002DA6  4E75      4115          rts
                    4116   ; }
                    4117   ; }
                    4118   ; void play_game() {
                    4119   _play_game:
                    4120   ; attract = 0;
00002DA8  4239 0803 4121          clr.b     _attract.L
00002DAC  0440      
                    4122   ; init_game();
00002DAE  4EB8 2D12 4123          jsr       _init_game
                    4124   ; init_enemies();
00002DB2  4EB8 2444 4125          jsr       _init_enemies
                    4126   ; while (lives) {
                    4127   play_game_1:
00002DB6  4A39 0803 4128          tst.b     _lives.L
00002DBA  0448      
00002DBC  6712      4129          beq.s     play_game_3
                    4130   ; play_round();
00002DBE  4EB8 2C8C 4131          jsr       _play_round
                    4132   ; if (num_enemies == 0) {
00002DC2  1039 0803 4133          move.b    _num_enemies.L,D0
00002DC6  0434      
00002DC8  6604      4134          bne.s     play_game_4
                    4135   ; init_enemies();
00002DCA  4EB8 2444 4136          jsr       _init_enemies
                    4137   play_game_4:
00002DCE  60E6      4138          bra       play_game_1
                    4139   play_game_3:
                    4140   ; }
                    4141   ; }
                    4142   ; game_over_msg();
00002DD0  4EB8 2D28 4143          jsr       _game_over_msg
00002DD4  4E75      4144          rts
                    4145   ; }
                    4146   ; void attract_mode() {
                    4147   _attract_mode:
                    4148   ; attract = 1;
00002DD6  13FC 0001 4149          move.b    #1,_attract.L
00002DDA  0803 0440 
                    4150   ; while (1) {
                    4151   attract_mode_1:
                    4152   ; init_enemies();
00002DDE  4EB8 2444 4153          jsr       _init_enemies
                    4154   ; play_round();
00002DE2  4EB8 2C8C 4155          jsr       _play_round
00002DE6  60F6      4156          bra       attract_mode_1
                    4157   ; }
                    4158   ; }
                    4159   ; void initialize_all_bitmaps() {
                    4160   _initialize_all_bitmaps:
00002DE8  48E7 003C 4161          movem.l   A2/A3/A4/A5,-(A7)
00002DEC  45F9 0803 4162          lea       _font8x8.L,A2
00002DF0  049E      
00002DF2  47F9 0803 4163          lea       _player_bitmap.L,A3
00002DF6  0696      
00002DF8  49F9 0803 4164          lea       _enemy4_bitmap.L,A4
00002DFC  0740      
00002DFE  4BF9 0803 4165          lea       _enemy3_bitmap.L,A5
00002E02  071E      
                    4166   ; /* Initialize player_bitmap */
                    4167   ; player_bitmap[0] = 2;
00002E04  16BC 0002 4168          move.b    #2,(A3)
                    4169   ; player_bitmap[1] = 27;
00002E08  177C 001B 4170          move.b    #27,1(A3)
00002E0C  0001      
                    4171   ; player_bitmap[2] = 0x00;
00002E0E  422B 0002 4172          clr.b     2(A3)
                    4173   ; player_bitmap[3] = 0x00;
00002E12  422B 0003 4174          clr.b     3(A3)
                    4175   ; player_bitmap[4] = 0x00;
00002E16  422B 0004 4176          clr.b     4(A3)
                    4177   ; player_bitmap[5] = 0x00;
00002E1A  422B 0005 4178          clr.b     5(A3)
                    4179   ; player_bitmap[6] = 0x0F;
00002E1E  177C 000F 4180          move.b    #15,6(A3)
00002E22  0006      
                    4181   ; player_bitmap[7] = 0x00;
00002E24  422B 0007 4182          clr.b     7(A3)
                    4183   ; player_bitmap[8] = 0x3E;
00002E28  177C 003E 4184          move.b    #62,8(A3)
00002E2C  0008      
                    4185   ; player_bitmap[9] = 0x00;
00002E2E  422B 0009 4186          clr.b     9(A3)
                    4187   ; player_bitmap[10] = 0xF4;
00002E32  177C 00F4 4188          move.b    #244,10(A3)
00002E36  000A      
                    4189   ; player_bitmap[11] = 0x07;
00002E38  177C 0007 4190          move.b    #7,11(A3)
00002E3C  000B      
                    4191   ; player_bitmap[12] = 0xEC;
00002E3E  177C 00EC 4192          move.b    #236,12(A3)
00002E42  000C      
                    4193   ; player_bitmap[13] = 0x00;
00002E44  422B 000D 4194          clr.b     13(A3)
                    4195   ; player_bitmap[14] = 0x76;
00002E48  177C 0076 4196          move.b    #118,14(A3)
00002E4C  000E      
                    4197   ; player_bitmap[15] = 0x00;
00002E4E  422B 000F 4198          clr.b     15(A3)
                    4199   ; player_bitmap[16] = 0x2B;
00002E52  177C 002B 4200          move.b    #43,16(A3)
00002E56  0010      
                    4201   ; player_bitmap[17] = 0x00;
00002E58  422B 0011 4202          clr.b     17(A3)
                    4203   ; player_bitmap[18] = 0x33;
00002E5C  177C 0033 4204          move.b    #51,18(A3)
00002E60  0012      
                    4205   ; player_bitmap[19] = 0x00;
00002E62  422B 0013 4206          clr.b     19(A3)
                    4207   ; player_bitmap[20] = 0x75;
00002E66  177C 0075 4208          move.b    #117,20(A3)
00002E6A  0014      
                    4209   ; player_bitmap[21] = 0x00;
00002E6C  422B 0015 4210          clr.b     21(A3)
                    4211   ; player_bitmap[22] = 0xF5;
00002E70  177C 00F5 4212          move.b    #245,22(A3)
00002E74  0016      
                    4213   ; player_bitmap[23] = 0x00;
00002E76  422B 0017 4214          clr.b     23(A3)
                    4215   ; player_bitmap[24] = 0xEB;
00002E7A  177C 00EB 4216          move.b    #235,24(A3)
00002E7E  0018      
                    4217   ; player_bitmap[25] = 0x31;
00002E80  177C 0031 4218          move.b    #49,25(A3)
00002E84  0019      
                    4219   ; player_bitmap[26] = 0xBF;
00002E86  177C 00BF 4220          move.b    #191,26(A3)
00002E8A  001A      
                    4221   ; player_bitmap[27] = 0xEF;
00002E8C  177C 00EF 4222          move.b    #239,27(A3)
00002E90  001B      
                    4223   ; player_bitmap[28] = 0x3F;
00002E92  177C 003F 4224          move.b    #63,28(A3)
00002E96  001C      
                    4225   ; player_bitmap[29] = 0xCF;
00002E98  177C 00CF 4226          move.b    #207,29(A3)
00002E9C  001D      
                    4227   ; player_bitmap[30] = 0xBF;
00002E9E  177C 00BF 4228          move.b    #191,30(A3)
00002EA2  001E      
                    4229   ; player_bitmap[31] = 0xEF;
00002EA4  177C 00EF 4230          move.b    #239,31(A3)
00002EA8  001F      
                    4231   ; player_bitmap[32] = 0xEB;
00002EAA  177C 00EB 4232          move.b    #235,32(A3)
00002EAE  0020      
                    4233   ; player_bitmap[33] = 0x31;
00002EB0  177C 0031 4234          move.b    #49,33(A3)
00002EB4  0021      
                    4235   ; player_bitmap[34] = 0xF5;
00002EB6  177C 00F5 4236          move.b    #245,34(A3)
00002EBA  0022      
                    4237   ; player_bitmap[35] = 0x00;
00002EBC  422B 0023 4238          clr.b     35(A3)
                    4239   ; player_bitmap[36] = 0x75;
00002EC0  177C 0075 4240          move.b    #117,36(A3)
00002EC4  0024      
                    4241   ; player_bitmap[37] = 0x00;
00002EC6  422B 0025 4242          clr.b     37(A3)
                    4243   ; player_bitmap[38] = 0x33;
00002ECA  177C 0033 4244          move.b    #51,38(A3)
00002ECE  0026      
                    4245   ; player_bitmap[39] = 0x00;
00002ED0  422B 0027 4246          clr.b     39(A3)
                    4247   ; player_bitmap[40] = 0x2B;
00002ED4  177C 002B 4248          move.b    #43,40(A3)
00002ED8  0028      
                    4249   ; player_bitmap[41] = 0x00;
00002EDA  422B 0029 4250          clr.b     41(A3)
                    4251   ; player_bitmap[42] = 0x76;
00002EDE  177C 0076 4252          move.b    #118,42(A3)
00002EE2  002A      
                    4253   ; player_bitmap[43] = 0x00;
00002EE4  422B 002B 4254          clr.b     43(A3)
                    4255   ; player_bitmap[44] = 0xEC;
00002EE8  177C 00EC 4256          move.b    #236,44(A3)
00002EEC  002C      
                    4257   ; player_bitmap[45] = 0x00;
00002EEE  422B 002D 4258          clr.b     45(A3)
                    4259   ; player_bitmap[46] = 0xF4;
00002EF2  177C 00F4 4260          move.b    #244,46(A3)
00002EF6  002E      
                    4261   ; player_bitmap[47] = 0x07;
00002EF8  177C 0007 4262          move.b    #7,47(A3)
00002EFC  002F      
                    4263   ; player_bitmap[48] = 0x3E;
00002EFE  177C 003E 4264          move.b    #62,48(A3)
00002F02  0030      
                    4265   ; player_bitmap[49] = 0x00;
00002F04  422B 0031 4266          clr.b     49(A3)
                    4267   ; player_bitmap[50] = 0x0F;
00002F08  177C 000F 4268          move.b    #15,50(A3)
00002F0C  0032      
                    4269   ; player_bitmap[51] = 0x00;
00002F0E  422B 0033 4270          clr.b     51(A3)
                    4271   ; player_bitmap[52] = 0x00;
00002F12  422B 0034 4272          clr.b     52(A3)
                    4273   ; player_bitmap[53] = 0x00;
00002F16  422B 0035 4274          clr.b     53(A3)
                    4275   ; player_bitmap[54] = 0x00;
00002F1A  422B 0036 4276          clr.b     54(A3)
                    4277   ; player_bitmap[55] = 0x00;
00002F1E  422B 0037 4278          clr.b     55(A3)
                    4279   ; /* Initialize bomb_bitmap */
                    4280   ; bomb_bitmap[0] = 1;
00002F22  13FC 0001 4281          move.b    #1,_bomb_bitmap.L
00002F26  0803 06CE 
                    4282   ; bomb_bitmap[1] = 5;
00002F2A  13FC 0005 4283          move.b    #5,_bomb_bitmap+1.L
00002F2E  0803 06CF 
                    4284   ; bomb_bitmap[2] = 0x88;
00002F32  13FC 0088 4285          move.b    #136,_bomb_bitmap+2.L
00002F36  0803 06D0 
                    4286   ; bomb_bitmap[3] = 0x55;
00002F3A  13FC 0055 4287          move.b    #85,_bomb_bitmap+3.L
00002F3E  0803 06D1 
                    4288   ; bomb_bitmap[4] = 0x77;
00002F42  13FC 0077 4289          move.b    #119,_bomb_bitmap+4.L
00002F46  0803 06D2 
                    4290   ; bomb_bitmap[5] = 0x55;
00002F4A  13FC 0055 4291          move.b    #85,_bomb_bitmap+5.L
00002F4E  0803 06D3 
                    4292   ; bomb_bitmap[6] = 0x88;
00002F52  13FC 0088 4293          move.b    #136,_bomb_bitmap+6.L
00002F56  0803 06D4 
                    4294   ; /* Initialize bullet_bitmap */
                    4295   ; bullet_bitmap[0] = 2;
00002F5A  13FC 0002 4296          move.b    #2,_bullet_bitmap.L
00002F5E  0803 06D6 
                    4297   ; bullet_bitmap[1] = 2;
00002F62  13FC 0002 4298          move.b    #2,_bullet_bitmap+1.L
00002F66  0803 06D7 
                    4299   ; bullet_bitmap[2] = 0x88;
00002F6A  13FC 0088 4300          move.b    #136,_bullet_bitmap+2.L
00002F6E  0803 06D8 
                    4301   ; bullet_bitmap[3] = 0x88;
00002F72  13FC 0088 4302          move.b    #136,_bullet_bitmap+3.L
00002F76  0803 06D9 
                    4303   ; bullet_bitmap[4] = 0x44;
00002F7A  13FC 0044 4304          move.b    #68,_bullet_bitmap+4.L
00002F7E  0803 06DA 
                    4305   ; bullet_bitmap[5] = 0x44;
00002F82  13FC 0044 4306          move.b    #68,_bullet_bitmap+5.L
00002F86  0803 06DB 
                    4307   ; /* Initialize enemy1_bitmap */
                    4308   ; enemy1_bitmap[0] = 2;
00002F8A  13FC 0002 4309          move.b    #2,_enemy1_bitmap.L
00002F8E  0803 06DA 
                    4310   ; enemy1_bitmap[1] = 17;
00002F92  13FC 0011 4311          move.b    #17,_enemy1_bitmap+1.L
00002F96  0803 06DB 
                    4312   ; enemy1_bitmap[2] = 0x00;
00002F9A  4239 0803 4313          clr.b     _enemy1_bitmap+2.L
00002F9E  06DC      
                    4314   ; enemy1_bitmap[3] = 0x00;
00002FA0  4239 0803 4315          clr.b     _enemy1_bitmap+3.L
00002FA4  06DD      
                    4316   ; enemy1_bitmap[4] = 0x00;
00002FA6  4239 0803 4317          clr.b     _enemy1_bitmap+4.L
00002FAA  06DE      
                    4318   ; enemy1_bitmap[5] = 0x0C;
00002FAC  13FC 000C 4319          move.b    #12,_enemy1_bitmap+5.L
00002FB0  0803 06DF 
                    4320   ; enemy1_bitmap[6] = 0x04;
00002FB4  13FC 0004 4321          move.b    #4,_enemy1_bitmap+6.L
00002FB8  0803 06E0 
                    4322   ; enemy1_bitmap[7] = 0x1E;
00002FBC  13FC 001E 4323          move.b    #30,_enemy1_bitmap+7.L
00002FC0  0803 06E1 
                    4324   ; enemy1_bitmap[8] = 0x46;
00002FC4  13FC 0046 4325          move.b    #70,_enemy1_bitmap+8.L
00002FC8  0803 06E2 
                    4326   ; enemy1_bitmap[9] = 0x3F;
00002FCC  13FC 003F 4327          move.b    #63,_enemy1_bitmap+9.L
00002FD0  0803 06E3 
                    4328   ; enemy1_bitmap[10] = 0xB8;
00002FD4  13FC 00B8 4329          move.b    #184,_enemy1_bitmap+10.L
00002FD8  0803 06E4 
                    4330   ; enemy1_bitmap[11] = 0x7F;
00002FDC  13FC 007F 4331          move.b    #127,_enemy1_bitmap+11.L
00002FE0  0803 06E5 
                    4332   ; enemy1_bitmap[12] = 0xB0;
00002FE4  13FC 00B0 4333          move.b    #176,_enemy1_bitmap+12.L
00002FE8  0803 06E6 
                    4334   ; enemy1_bitmap[13] = 0x7F;
00002FEC  13FC 007F 4335          move.b    #127,_enemy1_bitmap+13.L
00002FF0  0803 06E7 
                    4336   ; enemy1_bitmap[14] = 0xBA;
00002FF4  13FC 00BA 4337          move.b    #186,_enemy1_bitmap+14.L
00002FF8  0803 06E8 
                    4338   ; enemy1_bitmap[15] = 0x7F;
00002FFC  13FC 007F 4339          move.b    #127,_enemy1_bitmap+15.L
00003000  0803 06E9 
                    4340   ; enemy1_bitmap[16] = 0xFD;
00003004  13FC 00FD 4341          move.b    #253,_enemy1_bitmap+16.L
00003008  0803 06EA 
                    4342   ; enemy1_bitmap[17] = 0x3F;
0000300C  13FC 003F 4343          move.b    #63,_enemy1_bitmap+17.L
00003010  0803 06EB 
                    4344   ; enemy1_bitmap[18] = 0xFC;
00003014  13FC 00FC 4345          move.b    #252,_enemy1_bitmap+18.L
00003018  0803 06EC 
                    4346   ; enemy1_bitmap[19] = 0x07;
0000301C  13FC 0007 4347          move.b    #7,_enemy1_bitmap+19.L
00003020  0803 06ED 
                    4348   ; enemy1_bitmap[20] = 0xFC;
00003024  13FC 00FC 4349          move.b    #252,_enemy1_bitmap+20.L
00003028  0803 06EE 
                    4350   ; enemy1_bitmap[21] = 0x07;
0000302C  13FC 0007 4351          move.b    #7,_enemy1_bitmap+21.L
00003030  0803 06EF 
                    4352   ; enemy1_bitmap[22] = 0xFD;
00003034  13FC 00FD 4353          move.b    #253,_enemy1_bitmap+22.L
00003038  0803 06F0 
                    4354   ; enemy1_bitmap[23] = 0x3F;
0000303C  13FC 003F 4355          move.b    #63,_enemy1_bitmap+23.L
00003040  0803 06F1 
                    4356   ; enemy1_bitmap[24] = 0xBA;
00003044  13FC 00BA 4357          move.b    #186,_enemy1_bitmap+24.L
00003048  0803 06F2 
                    4358   ; enemy1_bitmap[25] = 0x7F;
0000304C  13FC 007F 4359          move.b    #127,_enemy1_bitmap+25.L
00003050  0803 06F3 
                    4360   ; enemy1_bitmap[26] = 0xB0;
00003054  13FC 00B0 4361          move.b    #176,_enemy1_bitmap+26.L
00003058  0803 06F4 
                    4362   ; enemy1_bitmap[27] = 0x7F;
0000305C  13FC 007F 4363          move.b    #127,_enemy1_bitmap+27.L
00003060  0803 06F5 
                    4364   ; enemy1_bitmap[28] = 0xB8;
00003064  13FC 00B8 4365          move.b    #184,_enemy1_bitmap+28.L
00003068  0803 06F6 
                    4366   ; enemy1_bitmap[29] = 0x7F;
0000306C  13FC 007F 4367          move.b    #127,_enemy1_bitmap+29.L
00003070  0803 06F7 
                    4368   ; enemy1_bitmap[30] = 0x46;
00003074  13FC 0046 4369          move.b    #70,_enemy1_bitmap+30.L
00003078  0803 06F8 
                    4370   ; enemy1_bitmap[31] = 0x3F;
0000307C  13FC 003F 4371          move.b    #63,_enemy1_bitmap+31.L
00003080  0803 06F9 
                    4372   ; enemy1_bitmap[32] = 0x04;
00003084  13FC 0004 4373          move.b    #4,_enemy1_bitmap+32.L
00003088  0803 06FA 
                    4374   ; enemy1_bitmap[33] = 0x1E;
0000308C  13FC 001E 4375          move.b    #30,_enemy1_bitmap+33.L
00003090  0803 06FB 
                    4376   ; /* Initialize enemy2_bitmap */
                    4377   ; enemy2_bitmap[0] = 2;
00003094  13FC 0002 4378          move.b    #2,_enemy2_bitmap.L
00003098  0803 06FC 
                    4379   ; enemy2_bitmap[1] = 16;
0000309C  13FC 0010 4380          move.b    #16,_enemy2_bitmap+1.L
000030A0  0803 06FD 
                    4381   ; enemy2_bitmap[2] = 0x26;
000030A4  13FC 0026 4382          move.b    #38,_enemy2_bitmap+2.L
000030A8  0803 06FE 
                    4383   ; enemy2_bitmap[3] = 0x00;
000030AC  4239 0803 4384          clr.b     _enemy2_bitmap+3.L
000030B0  06FF      
                    4385   ; enemy2_bitmap[4] = 0x59;
000030B2  13FC 0059 4386          move.b    #89,_enemy2_bitmap+4.L
000030B6  0803 0700 
                    4387   ; enemy2_bitmap[5] = 0x10;
000030BA  13FC 0010 4388          move.b    #16,_enemy2_bitmap+5.L
000030BE  0803 0701 
                    4389   ; enemy2_bitmap[6] = 0x10;
000030C2  13FC 0010 4390          move.b    #16,_enemy2_bitmap+6.L
000030C6  0803 0702 
                    4391   ; enemy2_bitmap[7] = 0x30;
000030CA  13FC 0030 4392          move.b    #48,_enemy2_bitmap+7.L
000030CE  0803 0703 
                    4393   ; enemy2_bitmap[8] = 0x33;
000030D2  13FC 0033 4394          move.b    #51,_enemy2_bitmap+8.L
000030D6  0803 0704 
                    4395   ; enemy2_bitmap[9] = 0x18;
000030DA  13FC 0018 4396          move.b    #24,_enemy2_bitmap+9.L
000030DE  0803 0705 
                    4397   ; enemy2_bitmap[10] = 0xE6;
000030E2  13FC 00E6 4398          move.b    #230,_enemy2_bitmap+10.L
000030E6  0803 0706 
                    4399   ; enemy2_bitmap[11] = 0x61;
000030EA  13FC 0061 4400          move.b    #97,_enemy2_bitmap+11.L
000030EE  0803 0707 
                    4401   ; enemy2_bitmap[12] = 0xC4;
000030F2  13FC 00C4 4402          move.b    #196,_enemy2_bitmap+12.L
000030F6  0803 0708 
                    4403   ; enemy2_bitmap[13] = 0x56;
000030FA  13FC 0056 4404          move.b    #86,_enemy2_bitmap+13.L
000030FE  0803 0709 
                    4405   ; enemy2_bitmap[14] = 0x03;
00003102  13FC 0003 4406          move.b    #3,_enemy2_bitmap+14.L
00003106  0803 070A 
                    4407   ; enemy2_bitmap[15] = 0x03;
0000310A  13FC 0003 4408          move.b    #3,_enemy2_bitmap+15.L
0000310E  0803 070B 
                    4409   ; enemy2_bitmap[16] = 0xDC;
00003112  13FC 00DC 4410          move.b    #220,_enemy2_bitmap+16.L
00003116  0803 070C 
                    4411   ; enemy2_bitmap[17] = 0x03;
0000311A  13FC 0003 4412          move.b    #3,_enemy2_bitmap+17.L
0000311E  0803 070D 
                    4413   ; enemy2_bitmap[18] = 0xDC;
00003122  13FC 00DC 4414          move.b    #220,_enemy2_bitmap+18.L
00003126  0803 070E 
                    4415   ; enemy2_bitmap[19] = 0x03;
0000312A  13FC 0003 4416          move.b    #3,_enemy2_bitmap+19.L
0000312E  0803 070F 
                    4417   ; enemy2_bitmap[20] = 0x03;
00003132  13FC 0003 4418          move.b    #3,_enemy2_bitmap+20.L
00003136  0803 0710 
                    4419   ; enemy2_bitmap[21] = 0x03;
0000313A  13FC 0003 4420          move.b    #3,_enemy2_bitmap+21.L
0000313E  0803 0711 
                    4421   ; enemy2_bitmap[22] = 0xC4;
00003142  13FC 00C4 4422          move.b    #196,_enemy2_bitmap+22.L
00003146  0803 0712 
                    4423   ; enemy2_bitmap[23] = 0x56;
0000314A  13FC 0056 4424          move.b    #86,_enemy2_bitmap+23.L
0000314E  0803 0713 
                    4425   ; enemy2_bitmap[24] = 0xE6;
00003152  13FC 00E6 4426          move.b    #230,_enemy2_bitmap+24.L
00003156  0803 0714 
                    4427   ; enemy2_bitmap[25] = 0x61;
0000315A  13FC 0061 4428          move.b    #97,_enemy2_bitmap+25.L
0000315E  0803 0715 
                    4429   ; enemy2_bitmap[26] = 0x33;
00003162  13FC 0033 4430          move.b    #51,_enemy2_bitmap+26.L
00003166  0803 0716 
                    4431   ; enemy2_bitmap[27] = 0x18;
0000316A  13FC 0018 4432          move.b    #24,_enemy2_bitmap+27.L
0000316E  0803 0717 
                    4433   ; enemy2_bitmap[28] = 0x10;
00003172  13FC 0010 4434          move.b    #16,_enemy2_bitmap+28.L
00003176  0803 0718 
                    4435   ; enemy2_bitmap[29] = 0x30;
0000317A  13FC 0030 4436          move.b    #48,_enemy2_bitmap+29.L
0000317E  0803 0719 
                    4437   ; enemy2_bitmap[30] = 0x59;
00003182  13FC 0059 4438          move.b    #89,_enemy2_bitmap+30.L
00003186  0803 071A 
                    4439   ; enemy2_bitmap[31] = 0x10;
0000318A  13FC 0010 4440          move.b    #16,_enemy2_bitmap+31.L
0000318E  0803 071B 
                    4441   ; enemy2_bitmap[32] = 0x26;
00003192  13FC 0026 4442          move.b    #38,_enemy2_bitmap+32.L
00003196  0803 071C 
                    4443   ; enemy2_bitmap[33] = 0x00;
0000319A  4239 0803 4444          clr.b     _enemy2_bitmap+33.L
0000319E  071D      
                    4445   ; /* Initialize enemy3_bitmap */
                    4446   ; enemy3_bitmap[0] = 2;
000031A0  1ABC 0002 4447          move.b    #2,(A5)
                    4448   ; enemy3_bitmap[1] = 16;
000031A4  1B7C 0010 4449          move.b    #16,1(A5)
000031A8  0001      
                    4450   ; enemy3_bitmap[2] = 0x80;
000031AA  1B7C 0080 4451          move.b    #128,2(A5)
000031AE  0002      
                    4452   ; enemy3_bitmap[3] = 0x1F;
000031B0  1B7C 001F 4453          move.b    #31,3(A5)
000031B4  0003      
                    4454   ; enemy3_bitmap[4] = 0xC0;
000031B6  1B7C 00C0 4455          move.b    #192,4(A5)
000031BA  0004      
                    4456   ; enemy3_bitmap[5] = 0x03;
000031BC  1B7C 0003 4457          move.b    #3,5(A5)
000031C0  0005      
                    4458   ; enemy3_bitmap[6] = 0xF8;
000031C2  1B7C 00F8 4459          move.b    #248,6(A5)
000031C6  0006      
                    4460   ; enemy3_bitmap[7] = 0x3F;
000031C8  1B7C 003F 4461          move.b    #63,7(A5)
000031CC  0007      
                    4462   ; enemy3_bitmap[8] = 0x70;
000031CE  1B7C 0070 4463          move.b    #112,8(A5)
000031D2  0008      
                    4464   ; enemy3_bitmap[9] = 0x00;
000031D4  422D 0009 4465          clr.b     9(A5)
                    4466   ; enemy3_bitmap[10] = 0xF0;
000031D8  1B7C 00F0 4467          move.b    #240,10(A5)
000031DC  000A      
                    4468   ; enemy3_bitmap[11] = 0x01;
000031DE  1B7C 0001 4469          move.b    #1,11(A5)
000031E2  000B      
                    4470   ; enemy3_bitmap[12] = 0xFC;
000031E4  1B7C 00FC 4471          move.b    #252,12(A5)
000031E8  000C      
                    4472   ; enemy3_bitmap[13] = 0x07;
000031EA  1B7C 0007 4473          move.b    #7,13(A5)
000031EE  000D      
                    4474   ; enemy3_bitmap[14] = 0xE8;
000031F0  1B7C 00E8 4475          move.b    #232,14(A5)
000031F4  000E      
                    4476   ; enemy3_bitmap[15] = 0x01;
000031F6  1B7C 0001 4477          move.b    #1,15(A5)
000031FA  000F      
                    4478   ; enemy3_bitmap[16] = 0xF8;
000031FC  1B7C 00F8 4479          move.b    #248,16(A5)
00003200  0010      
                    4480   ; enemy3_bitmap[17] = 0x03;
00003202  1B7C 0003 4481          move.b    #3,17(A5)
00003206  0011      
                    4482   ; enemy3_bitmap[18] = 0xF8;
00003208  1B7C 00F8 4483          move.b    #248,18(A5)
0000320C  0012      
                    4484   ; enemy3_bitmap[19] = 0x03;
0000320E  1B7C 0003 4485          move.b    #3,19(A5)
00003212  0013      
                    4486   ; enemy3_bitmap[20] = 0xE8;
00003214  1B7C 00E8 4487          move.b    #232,20(A5)
00003218  0014      
                    4488   ; enemy3_bitmap[21] = 0x01;
0000321A  1B7C 0001 4489          move.b    #1,21(A5)
0000321E  0015      
                    4490   ; enemy3_bitmap[22] = 0xF8;
00003220  1B7C 00F8 4491          move.b    #248,22(A5)
00003224  0016      
                    4492   ; enemy3_bitmap[23] = 0x07;
00003226  1B7C 0007 4493          move.b    #7,23(A5)
0000322A  0017      
                    4494   ; enemy3_bitmap[24] = 0xF0;
0000322C  1B7C 00F0 4495          move.b    #240,24(A5)
00003230  0018      
                    4496   ; enemy3_bitmap[25] = 0x01;
00003232  1B7C 0001 4497          move.b    #1,25(A5)
00003236  0019      
                    4498   ; enemy3_bitmap[26] = 0x70;
00003238  1B7C 0070 4499          move.b    #112,26(A5)
0000323C  001A      
                    4500   ; enemy3_bitmap[27] = 0x00;
0000323E  422D 001B 4501          clr.b     27(A5)
                    4502   ; enemy3_bitmap[28] = 0xF8;
00003242  1B7C 00F8 4503          move.b    #248,28(A5)
00003246  001C      
                    4504   ; enemy3_bitmap[29] = 0x3F;
00003248  1B7C 003F 4505          move.b    #63,29(A5)
0000324C  001D      
                    4506   ; enemy3_bitmap[30] = 0xC0;
0000324E  1B7C 00C0 4507          move.b    #192,30(A5)
00003252  001E      
                    4508   ; enemy3_bitmap[31] = 0x03;
00003254  1B7C 0003 4509          move.b    #3,31(A5)
00003258  001F      
                    4510   ; enemy3_bitmap[32] = 0x80;
0000325A  1B7C 0080 4511          move.b    #128,32(A5)
0000325E  0020      
                    4512   ; enemy3_bitmap[33] = 0x1F;
00003260  1B7C 001F 4513          move.b    #31,33(A5)
00003264  0021      
                    4514   ; /* Initialize enemy4_bitmap */
                    4515   ; enemy4_bitmap[0] = 2;
00003266  18BC 0002 4516          move.b    #2,(A4)
                    4517   ; enemy4_bitmap[1] = 16;
0000326A  197C 0010 4518          move.b    #16,1(A4)
0000326E  0001      
                    4519   ; enemy4_bitmap[2] = 0x06;
00003270  197C 0006 4520          move.b    #6,2(A4)
00003274  0002      
                    4521   ; enemy4_bitmap[3] = 0x00;
00003276  422C 0003 4522          clr.b     3(A4)
                    4523   ; enemy4_bitmap[4] = 0x0C;
0000327A  197C 000C 4524          move.b    #12,4(A4)
0000327E  0004      
                    4525   ; enemy4_bitmap[5] = 0x00;
00003280  422C 0005 4526          clr.b     5(A4)
                    4527   ; enemy4_bitmap[6] = 0x28;
00003284  197C 0028 4528          move.b    #40,6(A4)
00003288  0006      
                    4529   ; enemy4_bitmap[7] = 0x00;
0000328A  422C 0007 4530          clr.b     7(A4)
                    4531   ; enemy4_bitmap[8] = 0x70;
0000328E  197C 0070 4532          move.b    #112,8(A4)
00003292  0008      
                    4533   ; enemy4_bitmap[9] = 0x1F;
00003294  197C 001F 4534          move.b    #31,9(A4)
00003298  0009      
                    4535   ; enemy4_bitmap[10] = 0x84;
0000329A  197C 0084 4536          move.b    #132,10(A4)
0000329E  000A      
                    4537   ; enemy4_bitmap[11] = 0x3F;
000032A0  197C 003F 4538          move.b    #63,11(A4)
000032A4  000B      
                    4539   ; enemy4_bitmap[12] = 0xDE;
000032A6  197C 00DE 4540          move.b    #222,12(A4)
000032AA  000C      
                    4541   ; enemy4_bitmap[13] = 0x37;
000032AC  197C 0037 4542          move.b    #55,13(A4)
000032B0  000D      
                    4543   ; enemy4_bitmap[14] = 0xBB;
000032B2  197C 00BB 4544          move.b    #187,14(A4)
000032B6  000E      
                    4545   ; enemy4_bitmap[15] = 0x3F;
000032B8  197C 003F 4546          move.b    #63,15(A4)
000032BC  000F      
                    4547   ; enemy4_bitmap[16] = 0xF0;
000032BE  197C 00F0 4548          move.b    #240,16(A4)
000032C2  0010      
                    4549   ; enemy4_bitmap[17] = 0x3F;
000032C4  197C 003F 4550          move.b    #63,17(A4)
000032C8  0011      
                    4551   ; enemy4_bitmap[18] = 0xF0;
000032CA  197C 00F0 4552          move.b    #240,18(A4)
000032CE  0012      
                    4553   ; enemy4_bitmap[19] = 0x3F;
000032D0  197C 003F 4554          move.b    #63,19(A4)
000032D4  0013      
                    4555   ; enemy4_bitmap[20] = 0xBB;
000032D6  197C 00BB 4556          move.b    #187,20(A4)
000032DA  0014      
                    4557   ; enemy4_bitmap[21] = 0x3F;
000032DC  197C 003F 4558          move.b    #63,21(A4)
000032E0  0015      
                    4559   ; enemy4_bitmap[22] = 0xDE;
000032E2  197C 00DE 4560          move.b    #222,22(A4)
000032E6  0016      
                    4561   ; enemy4_bitmap[23] = 0x37;
000032E8  197C 0037 4562          move.b    #55,23(A4)
000032EC  0017      
                    4563   ; enemy4_bitmap[24] = 0x84;
000032EE  197C 0084 4564          move.b    #132,24(A4)
000032F2  0018      
                    4565   ; enemy4_bitmap[25] = 0x3F;
000032F4  197C 003F 4566          move.b    #63,25(A4)
000032F8  0019      
                    4567   ; enemy4_bitmap[26] = 0x70;
000032FA  197C 0070 4568          move.b    #112,26(A4)
000032FE  001A      
                    4569   ; enemy4_bitmap[27] = 0x1F;
00003300  197C 001F 4570          move.b    #31,27(A4)
00003304  001B      
                    4571   ; enemy4_bitmap[28] = 0x28;
00003306  197C 0028 4572          move.b    #40,28(A4)
0000330A  001C      
                    4573   ; enemy4_bitmap[29] = 0x00;
0000330C  422C 001D 4574          clr.b     29(A4)
                    4575   ; enemy4_bitmap[30] = 0x0C;
00003310  197C 000C 4576          move.b    #12,30(A4)
00003314  001E      
                    4577   ; enemy4_bitmap[31] = 0x00;
00003316  422C 001F 4578          clr.b     31(A4)
                    4579   ; enemy4_bitmap[32] = 0x06;
0000331A  197C 0006 4580          move.b    #6,32(A4)
0000331E  0020      
                    4581   ; enemy4_bitmap[33] = 0x00;
00003320  422C 0021 4582          clr.b     33(A4)
                    4583   ; enemy_bitmaps[0] = enemy1_bitmap;
00003324  41F9 0803 4584          lea       _enemy1_bitmap.L,A0
00003328  06DA      
0000332A  23C8 0803 4585          move.l    A0,_enemy_bitmaps.L
0000332E  0762      
                    4586   ; enemy_bitmaps[1] = enemy2_bitmap;
00003330  41F9 0803 4587          lea       _enemy2_bitmap.L,A0
00003334  06FC      
00003336  23C8 0803 4588          move.l    A0,_enemy_bitmaps+4.L
0000333A  0766      
                    4589   ; enemy_bitmaps[2] = enemy3_bitmap;
0000333C  23CD 0803 4590          move.l    A5,_enemy_bitmaps+8.L
00003340  076A      
                    4591   ; enemy_bitmaps[3] = enemy4_bitmap;
00003342  23CC 0803 4592          move.l    A4,_enemy_bitmaps+12.L
00003346  076E      
                    4593   ; font8x8[0 ][0]=0x00;font8x8[0 ][1]=0x00;font8x8[0 ][2]=0x00;font8x8[0 ][3]=0x00;font8x8[0 ][4]=0x00;font8x8[0 ][5]=0x00;font8x8[0 ][6]=0x00;font8x8[0 ][7]=0x00;
00003348  4212      4594          clr.b     (A2)
0000334A  422A 0001 4595          clr.b     1(A2)
0000334E  422A 0002 4596          clr.b     2(A2)
00003352  422A 0003 4597          clr.b     3(A2)
00003356  422A 0004 4598          clr.b     4(A2)
0000335A  422A 0005 4599          clr.b     5(A2)
0000335E  422A 0006 4600          clr.b     6(A2)
00003362  422A 0007 4601          clr.b     7(A2)
                    4602   ; font8x8[1 ][0]=0x00;font8x8[1 ][1]=0x00;font8x8[1 ][2]=0x00;font8x8[1 ][3]=0x79;font8x8[1 ][4]=0x79;font8x8[1 ][5]=0x00;font8x8[1 ][6]=0x00;font8x8[1 ][7]=0x00;
00003366  422A 0008 4603          clr.b     8(A2)
0000336A  422A 0009 4604          clr.b     8+1(A2)
0000336E  422A 000A 4605          clr.b     8+2(A2)
00003372  157C 0079 4606          move.b    #121,8+3(A2)
00003376  000B      
00003378  157C 0079 4607          move.b    #121,8+4(A2)
0000337C  000C      
0000337E  422A 000D 4608          clr.b     8+5(A2)
00003382  422A 000E 4609          clr.b     8+6(A2)
00003386  422A 000F 4610          clr.b     8+7(A2)
                    4611   ; font8x8[2 ][0]=0x00;font8x8[2 ][1]=0x70;font8x8[2 ][2]=0x70;font8x8[2 ][3]=0x00;font8x8[2 ][4]=0x00;font8x8[2 ][5]=0x70;font8x8[2 ][6]=0x70;font8x8[2 ][7]=0x00; 
0000338A  422A 0010 4612          clr.b     16(A2)
0000338E  157C 0070 4613          move.b    #112,16+1(A2)
00003392  0011      
00003394  157C 0070 4614          move.b    #112,16+2(A2)
00003398  0012      
0000339A  422A 0013 4615          clr.b     16+3(A2)
0000339E  422A 0014 4616          clr.b     16+4(A2)
000033A2  157C 0070 4617          move.b    #112,16+5(A2)
000033A6  0015      
000033A8  157C 0070 4618          move.b    #112,16+6(A2)
000033AC  0016      
000033AE  422A 0017 4619          clr.b     16+7(A2)
                    4620   ; font8x8[3 ][0]=0x14;font8x8[3 ][1]=0x7f;font8x8[3 ][2]=0x7f;font8x8[3 ][3]=0x14;font8x8[3 ][4]=0x14;font8x8[3 ][5]=0x7f;font8x8[3 ][6]=0x7f;font8x8[3 ][7]=0x14; 
000033B2  157C 0014 4621          move.b    #20,24(A2)
000033B6  0018      
000033B8  157C 007F 4622          move.b    #127,24+1(A2)
000033BC  0019      
000033BE  157C 007F 4623          move.b    #127,24+2(A2)
000033C2  001A      
000033C4  157C 0014 4624          move.b    #20,24+3(A2)
000033C8  001B      
000033CA  157C 0014 4625          move.b    #20,24+4(A2)
000033CE  001C      
000033D0  157C 007F 4626          move.b    #127,24+5(A2)
000033D4  001D      
000033D6  157C 007F 4627          move.b    #127,24+6(A2)
000033DA  001E      
000033DC  157C 0014 4628          move.b    #20,24+7(A2)
000033E0  001F      
                    4629   ; font8x8[4 ][0]=0x00;font8x8[4 ][1]=0x12;font8x8[4 ][2]=0x3a;font8x8[4 ][3]=0x6b;font8x8[4 ][4]=0x6b;font8x8[4 ][5]=0x2e;font8x8[4 ][6]=0x24;font8x8[4 ][7]=0x00;
000033E2  422A 0020 4630          clr.b     32(A2)
000033E6  157C 0012 4631          move.b    #18,32+1(A2)
000033EA  0021      
000033EC  157C 003A 4632          move.b    #58,32+2(A2)
000033F0  0022      
000033F2  157C 006B 4633          move.b    #107,32+3(A2)
000033F6  0023      
000033F8  157C 006B 4634          move.b    #107,32+4(A2)
000033FC  0024      
000033FE  157C 002E 4635          move.b    #46,32+5(A2)
00003402  0025      
00003404  157C 0024 4636          move.b    #36,32+6(A2)
00003408  0026      
0000340A  422A 0027 4637          clr.b     32+7(A2)
                    4638   ; font8x8[5 ][0]=0x00;font8x8[5 ][1]=0x63;font8x8[5 ][2]=0x66;font8x8[5 ][3]=0x0c;font8x8[5 ][4]=0x18;font8x8[5 ][5]=0x33;font8x8[5 ][6]=0x63;font8x8[5 ][7]=0x00; 
0000340E  422A 0028 4639          clr.b     40(A2)
00003412  157C 0063 4640          move.b    #99,40+1(A2)
00003416  0029      
00003418  157C 0066 4641          move.b    #102,40+2(A2)
0000341C  002A      
0000341E  157C 000C 4642          move.b    #12,40+3(A2)
00003422  002B      
00003424  157C 0018 4643          move.b    #24,40+4(A2)
00003428  002C      
0000342A  157C 0033 4644          move.b    #51,40+5(A2)
0000342E  002D      
00003430  157C 0063 4645          move.b    #99,40+6(A2)
00003434  002E      
00003436  422A 002F 4646          clr.b     40+7(A2)
                    4647   ; font8x8[6 ][0]=0x00;font8x8[6 ][1]=0x26;font8x8[6 ][2]=0x7f;font8x8[6 ][3]=0x59;font8x8[6 ][4]=0x59;font8x8[6 ][5]=0x77;font8x8[6 ][6]=0x27;font8x8[6 ][7]=0x05; 
0000343A  422A 0030 4648          clr.b     48(A2)
0000343E  157C 0026 4649          move.b    #38,48+1(A2)
00003442  0031      
00003444  157C 007F 4650          move.b    #127,48+2(A2)
00003448  0032      
0000344A  157C 0059 4651          move.b    #89,48+3(A2)
0000344E  0033      
00003450  157C 0059 4652          move.b    #89,48+4(A2)
00003454  0034      
00003456  157C 0077 4653          move.b    #119,48+5(A2)
0000345A  0035      
0000345C  157C 0027 4654          move.b    #39,48+6(A2)
00003460  0036      
00003462  157C 0005 4655          move.b    #5,48+7(A2)
00003466  0037      
                    4656   ; font8x8[7 ][0]=0x00;font8x8[7 ][1]=0x00;font8x8[7 ][2]=0x00;font8x8[7 ][3]=0x10;font8x8[7 ][4]=0x30;font8x8[7 ][5]=0x60;font8x8[7 ][6]=0x40;font8x8[7 ][7]=0x00; 
00003468  422A 0038 4657          clr.b     56(A2)
0000346C  422A 0039 4658          clr.b     56+1(A2)
00003470  422A 003A 4659          clr.b     56+2(A2)
00003474  157C 0010 4660          move.b    #16,56+3(A2)
00003478  003B      
0000347A  157C 0030 4661          move.b    #48,56+4(A2)
0000347E  003C      
00003480  157C 0060 4662          move.b    #96,56+5(A2)
00003484  003D      
00003486  157C 0040 4663          move.b    #64,56+6(A2)
0000348A  003E      
0000348C  422A 003F 4664          clr.b     56+7(A2)
                    4665   ; font8x8[8 ][0]=0x00;font8x8[8 ][1]=0x00;font8x8[8 ][2]=0x1c;font8x8[8 ][3]=0x3e;font8x8[8 ][4]=0x63;font8x8[8 ][5]=0x41;font8x8[8 ][6]=0x00;font8x8[8 ][7]=0x00; 
00003490  422A 0040 4666          clr.b     64(A2)
00003494  422A 0041 4667          clr.b     64+1(A2)
00003498  157C 001C 4668          move.b    #28,64+2(A2)
0000349C  0042      
0000349E  157C 003E 4669          move.b    #62,64+3(A2)
000034A2  0043      
000034A4  157C 0063 4670          move.b    #99,64+4(A2)
000034A8  0044      
000034AA  157C 0041 4671          move.b    #65,64+5(A2)
000034AE  0045      
000034B0  422A 0046 4672          clr.b     64+6(A2)
000034B4  422A 0047 4673          clr.b     64+7(A2)
                    4674   ; font8x8[9 ][0]=0x00;font8x8[9 ][1]=0x00;font8x8[9 ][2]=0x41;font8x8[9 ][3]=0x63;font8x8[9 ][4]=0x3e;font8x8[9 ][5]=0x1c;font8x8[9 ][6]=0x00;font8x8[9 ][7]=0x00; 
000034B8  422A 0048 4675          clr.b     72(A2)
000034BC  422A 0049 4676          clr.b     72+1(A2)
000034C0  157C 0041 4677          move.b    #65,72+2(A2)
000034C4  004A      
000034C6  157C 0063 4678          move.b    #99,72+3(A2)
000034CA  004B      
000034CC  157C 003E 4679          move.b    #62,72+4(A2)
000034D0  004C      
000034D2  157C 001C 4680          move.b    #28,72+5(A2)
000034D6  004D      
000034D8  422A 004E 4681          clr.b     72+6(A2)
000034DC  422A 004F 4682          clr.b     72+7(A2)
                    4683   ; font8x8[10][0]=0x08;font8x8[10][1]=0x2a;font8x8[10][2]=0x3e;font8x8[10][3]=0x1c;font8x8[10][4]=0x1c;font8x8[10][5]=0x3e;font8x8[10][6]=0x2a;font8x8[10][7]=0x08; 
000034E0  157C 0008 4684          move.b    #8,80(A2)
000034E4  0050      
000034E6  157C 002A 4685          move.b    #42,80+1(A2)
000034EA  0051      
000034EC  157C 003E 4686          move.b    #62,80+2(A2)
000034F0  0052      
000034F2  157C 001C 4687          move.b    #28,80+3(A2)
000034F6  0053      
000034F8  157C 001C 4688          move.b    #28,80+4(A2)
000034FC  0054      
000034FE  157C 003E 4689          move.b    #62,80+5(A2)
00003502  0055      
00003504  157C 002A 4690          move.b    #42,80+6(A2)
00003508  0056      
0000350A  157C 0008 4691          move.b    #8,80+7(A2)
0000350E  0057      
                    4692   ; font8x8[11][0]=0x00;font8x8[11][1]=0x08;font8x8[11][2]=0x08;font8x8[11][3]=0x3e;font8x8[11][4]=0x3e;font8x8[11][5]=0x08;font8x8[11][6]=0x08;font8x8[11][7]=0x00; 
00003510  422A 0058 4693          clr.b     88(A2)
00003514  157C 0008 4694          move.b    #8,88+1(A2)
00003518  0059      
0000351A  157C 0008 4695          move.b    #8,88+2(A2)
0000351E  005A      
00003520  157C 003E 4696          move.b    #62,88+3(A2)
00003524  005B      
00003526  157C 003E 4697          move.b    #62,88+4(A2)
0000352A  005C      
0000352C  157C 0008 4698          move.b    #8,88+5(A2)
00003530  005D      
00003532  157C 0008 4699          move.b    #8,88+6(A2)
00003536  005E      
00003538  422A 005F 4700          clr.b     88+7(A2)
                    4701   ; font8x8[12][0]=0x00;font8x8[12][1]=0x00;font8x8[12][2]=0x00;font8x8[12][3]=0x03;font8x8[12][4]=0x03;font8x8[12][5]=0x00;font8x8[12][6]=0x00;font8x8[12][7]=0x00; 
0000353C  422A 0060 4702          clr.b     96(A2)
00003540  422A 0061 4703          clr.b     96+1(A2)
00003544  422A 0062 4704          clr.b     96+2(A2)
00003548  157C 0003 4705          move.b    #3,96+3(A2)
0000354C  0063      
0000354E  157C 0003 4706          move.b    #3,96+4(A2)
00003552  0064      
00003554  422A 0065 4707          clr.b     96+5(A2)
00003558  422A 0066 4708          clr.b     96+6(A2)
0000355C  422A 0067 4709          clr.b     96+7(A2)
                    4710   ; font8x8[13][0]=0x00;font8x8[13][1]=0x08;font8x8[13][2]=0x08;font8x8[13][3]=0x08;font8x8[13][4]=0x08;font8x8[13][5]=0x08;font8x8[13][6]=0x08;font8x8[13][7]=0x00; 
00003560  422A 0068 4711          clr.b     104(A2)
00003564  157C 0008 4712          move.b    #8,104+1(A2)
00003568  0069      
0000356A  157C 0008 4713          move.b    #8,104+2(A2)
0000356E  006A      
00003570  157C 0008 4714          move.b    #8,104+3(A2)
00003574  006B      
00003576  157C 0008 4715          move.b    #8,104+4(A2)
0000357A  006C      
0000357C  157C 0008 4716          move.b    #8,104+5(A2)
00003580  006D      
00003582  157C 0008 4717          move.b    #8,104+6(A2)
00003586  006E      
00003588  422A 006F 4718          clr.b     104+7(A2)
                    4719   ; font8x8[14][0]=0x00;font8x8[14][1]=0x00;font8x8[14][2]=0x00;font8x8[14][3]=0x03;font8x8[14][4]=0x03;font8x8[14][5]=0x00;font8x8[14][6]=0x00;font8x8[14][7]=0x00; 
0000358C  422A 0070 4720          clr.b     112(A2)
00003590  422A 0071 4721          clr.b     112+1(A2)
00003594  422A 0072 4722          clr.b     112+2(A2)
00003598  157C 0003 4723          move.b    #3,112+3(A2)
0000359C  0073      
0000359E  157C 0003 4724          move.b    #3,112+4(A2)
000035A2  0074      
000035A4  422A 0075 4725          clr.b     112+5(A2)
000035A8  422A 0076 4726          clr.b     112+6(A2)
000035AC  422A 0077 4727          clr.b     112+7(A2)
                    4728   ; font8x8[15][0]=0x00;font8x8[15][1]=0x01;font8x8[15][2]=0x03;font8x8[15][3]=0x06;font8x8[15][4]=0x0c;font8x8[15][5]=0x18;font8x8[15][6]=0x30;font8x8[15][7]=0x20; 
000035B0  422A 0078 4729          clr.b     120(A2)
000035B4  157C 0001 4730          move.b    #1,120+1(A2)
000035B8  0079      
000035BA  157C 0003 4731          move.b    #3,120+2(A2)
000035BE  007A      
000035C0  157C 0006 4732          move.b    #6,120+3(A2)
000035C4  007B      
000035C6  157C 000C 4733          move.b    #12,120+4(A2)
000035CA  007C      
000035CC  157C 0018 4734          move.b    #24,120+5(A2)
000035D0  007D      
000035D2  157C 0030 4735          move.b    #48,120+6(A2)
000035D6  007E      
000035D8  157C 0020 4736          move.b    #32,120+7(A2)
000035DC  007F      
                    4737   ; font8x8[16][0]=0x00;font8x8[16][1]=0x3e;font8x8[16][2]=0x7f;font8x8[16][3]=0x49;font8x8[16][4]=0x51;font8x8[16][5]=0x7f;font8x8[16][6]=0x3e;font8x8[16][7]=0x00; 
000035DE  422A 0080 4738          clr.b     128(A2)
000035E2  157C 003E 4739          move.b    #62,128+1(A2)
000035E6  0081      
000035E8  157C 007F 4740          move.b    #127,128+2(A2)
000035EC  0082      
000035EE  157C 0049 4741          move.b    #73,128+3(A2)
000035F2  0083      
000035F4  157C 0051 4742          move.b    #81,128+4(A2)
000035F8  0084      
000035FA  157C 007F 4743          move.b    #127,128+5(A2)
000035FE  0085      
00003600  157C 003E 4744          move.b    #62,128+6(A2)
00003604  0086      
00003606  422A 0087 4745          clr.b     128+7(A2)
                    4746   ; font8x8[17][0]=0x00;font8x8[17][1]=0x01;font8x8[17][2]=0x11;font8x8[17][3]=0x7f;font8x8[17][4]=0x7f;font8x8[17][5]=0x01;font8x8[17][6]=0x01;font8x8[17][7]=0x00; 
0000360A  422A 0088 4747          clr.b     136(A2)
0000360E  157C 0001 4748          move.b    #1,136+1(A2)
00003612  0089      
00003614  157C 0011 4749          move.b    #17,136+2(A2)
00003618  008A      
0000361A  157C 007F 4750          move.b    #127,136+3(A2)
0000361E  008B      
00003620  157C 007F 4751          move.b    #127,136+4(A2)
00003624  008C      
00003626  157C 0001 4752          move.b    #1,136+5(A2)
0000362A  008D      
0000362C  157C 0001 4753          move.b    #1,136+6(A2)
00003630  008E      
00003632  422A 008F 4754          clr.b     136+7(A2)
                    4755   ; font8x8[18][0]=0x00;font8x8[18][1]=0x23;font8x8[18][2]=0x67;font8x8[18][3]=0x45;font8x8[18][4]=0x49;font8x8[18][5]=0x79;font8x8[18][6]=0x31;font8x8[18][7]=0x00; 
00003636  422A 0090 4756          clr.b     144(A2)
0000363A  157C 0023 4757          move.b    #35,144+1(A2)
0000363E  0091      
00003640  157C 0067 4758          move.b    #103,144+2(A2)
00003644  0092      
00003646  157C 0045 4759          move.b    #69,144+3(A2)
0000364A  0093      
0000364C  157C 0049 4760          move.b    #73,144+4(A2)
00003650  0094      
00003652  157C 0079 4761          move.b    #121,144+5(A2)
00003656  0095      
00003658  157C 0031 4762          move.b    #49,144+6(A2)
0000365C  0096      
0000365E  422A 0097 4763          clr.b     144+7(A2)
                    4764   ; font8x8[19][0]=0x00;font8x8[19][1]=0x22;font8x8[19][2]=0x63;font8x8[19][3]=0x49;font8x8[19][4]=0x49;font8x8[19][5]=0x7f;font8x8[19][6]=0x36;font8x8[19][7]=0x00; 
00003662  422A 0098 4765          clr.b     152(A2)
00003666  157C 0022 4766          move.b    #34,152+1(A2)
0000366A  0099      
0000366C  157C 0063 4767          move.b    #99,152+2(A2)
00003670  009A      
00003672  157C 0049 4768          move.b    #73,152+3(A2)
00003676  009B      
00003678  157C 0049 4769          move.b    #73,152+4(A2)
0000367C  009C      
0000367E  157C 007F 4770          move.b    #127,152+5(A2)
00003682  009D      
00003684  157C 0036 4771          move.b    #54,152+6(A2)
00003688  009E      
0000368A  422A 009F 4772          clr.b     152+7(A2)
                    4773   ; font8x8[20][0]=0x00;font8x8[20][1]=0x0c;font8x8[20][2]=0x0c;font8x8[20][3]=0x14;font8x8[20][4]=0x34;font8x8[20][5]=0x7f;font8x8[20][6]=0x7f;font8x8[20][7]=0x04; 
0000368E  422A 00A0 4774          clr.b     160(A2)
00003692  157C 000C 4775          move.b    #12,160+1(A2)
00003696  00A1      
00003698  157C 000C 4776          move.b    #12,160+2(A2)
0000369C  00A2      
0000369E  157C 0014 4777          move.b    #20,160+3(A2)
000036A2  00A3      
000036A4  157C 0034 4778          move.b    #52,160+4(A2)
000036A8  00A4      
000036AA  157C 007F 4779          move.b    #127,160+5(A2)
000036AE  00A5      
000036B0  157C 007F 4780          move.b    #127,160+6(A2)
000036B4  00A6      
000036B6  157C 0004 4781          move.b    #4,160+7(A2)
000036BA  00A7      
                    4782   ; font8x8[21][0]=0x00;font8x8[21][1]=0x72;font8x8[21][2]=0x73;font8x8[21][3]=0x51;font8x8[21][4]=0x51;font8x8[21][5]=0x5f;font8x8[21][6]=0x4e;font8x8[21][7]=0x00; 
000036BC  422A 00A8 4783          clr.b     168(A2)
000036C0  157C 0072 4784          move.b    #114,168+1(A2)
000036C4  00A9      
000036C6  157C 0073 4785          move.b    #115,168+2(A2)
000036CA  00AA      
000036CC  157C 0051 4786          move.b    #81,168+3(A2)
000036D0  00AB      
000036D2  157C 0051 4787          move.b    #81,168+4(A2)
000036D6  00AC      
000036D8  157C 005F 4788          move.b    #95,168+5(A2)
000036DC  00AD      
000036DE  157C 004E 4789          move.b    #78,168+6(A2)
000036E2  00AE      
000036E4  422A 00AF 4790          clr.b     168+7(A2)
                    4791   ; font8x8[22][0]=0x00;font8x8[22][1]=0x3e;font8x8[22][2]=0x7f;font8x8[22][3]=0x49;font8x8[22][4]=0x49;font8x8[22][5]=0x6f;font8x8[22][6]=0x26;font8x8[22][7]=0x00; 
000036E8  422A 00B0 4792          clr.b     176(A2)
000036EC  157C 003E 4793          move.b    #62,176+1(A2)
000036F0  00B1      
000036F2  157C 007F 4794          move.b    #127,176+2(A2)
000036F6  00B2      
000036F8  157C 0049 4795          move.b    #73,176+3(A2)
000036FC  00B3      
000036FE  157C 0049 4796          move.b    #73,176+4(A2)
00003702  00B4      
00003704  157C 006F 4797          move.b    #111,176+5(A2)
00003708  00B5      
0000370A  157C 0026 4798          move.b    #38,176+6(A2)
0000370E  00B6      
00003710  422A 00B7 4799          clr.b     176+7(A2)
                    4800   ; font8x8[23][0]=0x00;font8x8[23][1]=0x60;font8x8[23][2]=0x60;font8x8[23][3]=0x4f;font8x8[23][4]=0x5f;font8x8[23][5]=0x70;font8x8[23][6]=0x60;font8x8[23][7]=0x00; 
00003714  422A 00B8 4801          clr.b     184(A2)
00003718  157C 0060 4802          move.b    #96,184+1(A2)
0000371C  00B9      
0000371E  157C 0060 4803          move.b    #96,184+2(A2)
00003722  00BA      
00003724  157C 004F 4804          move.b    #79,184+3(A2)
00003728  00BB      
0000372A  157C 005F 4805          move.b    #95,184+4(A2)
0000372E  00BC      
00003730  157C 0070 4806          move.b    #112,184+5(A2)
00003734  00BD      
00003736  157C 0060 4807          move.b    #96,184+6(A2)
0000373A  00BE      
0000373C  422A 00BF 4808          clr.b     184+7(A2)
                    4809   ; font8x8[24][0]=0x00;font8x8[24][1]=0x36;font8x8[24][2]=0x7f;font8x8[24][3]=0x49;font8x8[24][4]=0x49;font8x8[24][5]=0x7f;font8x8[24][6]=0x36;font8x8[24][7]=0x00; 
00003740  422A 00C0 4810          clr.b     192(A2)
00003744  157C 0036 4811          move.b    #54,192+1(A2)
00003748  00C1      
0000374A  157C 007F 4812          move.b    #127,192+2(A2)
0000374E  00C2      
00003750  157C 0049 4813          move.b    #73,192+3(A2)
00003754  00C3      
00003756  157C 0049 4814          move.b    #73,192+4(A2)
0000375A  00C4      
0000375C  157C 007F 4815          move.b    #127,192+5(A2)
00003760  00C5      
00003762  157C 0036 4816          move.b    #54,192+6(A2)
00003766  00C6      
00003768  422A 00C7 4817          clr.b     192+7(A2)
                    4818   ; font8x8[25][0]=0x00;font8x8[25][1]=0x32;font8x8[25][2]=0x7b;font8x8[25][3]=0x49;font8x8[25][4]=0x49;font8x8[25][5]=0x7f;font8x8[25][6]=0x3e;font8x8[25][7]=0x00; 
0000376C  422A 00C8 4819          clr.b     200(A2)
00003770  157C 0032 4820          move.b    #50,200+1(A2)
00003774  00C9      
00003776  157C 007B 4821          move.b    #123,200+2(A2)
0000377A  00CA      
0000377C  157C 0049 4822          move.b    #73,200+3(A2)
00003780  00CB      
00003782  157C 0049 4823          move.b    #73,200+4(A2)
00003786  00CC      
00003788  157C 007F 4824          move.b    #127,200+5(A2)
0000378C  00CD      
0000378E  157C 003E 4825          move.b    #62,200+6(A2)
00003792  00CE      
00003794  422A 00CF 4826          clr.b     200+7(A2)
                    4827   ; font8x8[26][0]=0x00;font8x8[26][1]=0x00;font8x8[26][2]=0x00;font8x8[26][3]=0x12;font8x8[26][4]=0x12;font8x8[26][5]=0x00;font8x8[26][6]=0x00;font8x8[26][7]=0x00; 
00003798  422A 00D0 4828          clr.b     208(A2)
0000379C  422A 00D1 4829          clr.b     208+1(A2)
000037A0  422A 00D2 4830          clr.b     208+2(A2)
000037A4  157C 0012 4831          move.b    #18,208+3(A2)
000037A8  00D3      
000037AA  157C 0012 4832          move.b    #18,208+4(A2)
000037AE  00D4      
000037B0  422A 00D5 4833          clr.b     208+5(A2)
000037B4  422A 00D6 4834          clr.b     208+6(A2)
000037B8  422A 00D7 4835          clr.b     208+7(A2)
                    4836   ; font8x8[27][0]=0x00;font8x8[27][1]=0x00;font8x8[27][2]=0x00;font8x8[27][3]=0x13;font8x8[27][4]=0x13;font8x8[27][5]=0x00;font8x8[27][6]=0x00;font8x8[27][7]=0x00; 
000037BC  422A 00D8 4837          clr.b     216(A2)
000037C0  422A 00D9 4838          clr.b     216+1(A2)
000037C4  422A 00DA 4839          clr.b     216+2(A2)
000037C8  157C 0013 4840          move.b    #19,216+3(A2)
000037CC  00DB      
000037CE  157C 0013 4841          move.b    #19,216+4(A2)
000037D2  00DC      
000037D4  422A 00DD 4842          clr.b     216+5(A2)
000037D8  422A 00DE 4843          clr.b     216+6(A2)
000037DC  422A 00DF 4844          clr.b     216+7(A2)
                    4845   ; font8x8[28][0]=0x00;font8x8[28][1]=0x08;font8x8[28][2]=0x1c;font8x8[28][3]=0x36;font8x8[28][4]=0x63;font8x8[28][5]=0x41;font8x8[28][6]=0x41;font8x8[28][7]=0x00; 
000037E0  422A 00E0 4846          clr.b     224(A2)
000037E4  157C 0008 4847          move.b    #8,224+1(A2)
000037E8  00E1      
000037EA  157C 001C 4848          move.b    #28,224+2(A2)
000037EE  00E2      
000037F0  157C 0036 4849          move.b    #54,224+3(A2)
000037F4  00E3      
000037F6  157C 0063 4850          move.b    #99,224+4(A2)
000037FA  00E4      
000037FC  157C 0041 4851          move.b    #65,224+5(A2)
00003800  00E5      
00003802  157C 0041 4852          move.b    #65,224+6(A2)
00003806  00E6      
00003808  422A 00E7 4853          clr.b     224+7(A2)
                    4854   ; font8x8[29][0]=0x00;font8x8[29][1]=0x14;font8x8[29][2]=0x14;font8x8[29][3]=0x14;font8x8[29][4]=0x14;font8x8[29][5]=0x14;font8x8[29][6]=0x14;font8x8[29][7]=0x00; 
0000380C  422A 00E8 4855          clr.b     232(A2)
00003810  157C 0014 4856          move.b    #20,232+1(A2)
00003814  00E9      
00003816  157C 0014 4857          move.b    #20,232+2(A2)
0000381A  00EA      
0000381C  157C 0014 4858          move.b    #20,232+3(A2)
00003820  00EB      
00003822  157C 0014 4859          move.b    #20,232+4(A2)
00003826  00EC      
00003828  157C 0014 4860          move.b    #20,232+5(A2)
0000382C  00ED      
0000382E  157C 0014 4861          move.b    #20,232+6(A2)
00003832  00EE      
00003834  422A 00EF 4862          clr.b     232+7(A2)
                    4863   ; font8x8[30][0]=0x00;font8x8[30][1]=0x41;font8x8[30][2]=0x41;font8x8[30][3]=0x63;font8x8[30][4]=0x36;font8x8[30][5]=0x1c;font8x8[30][6]=0x08;font8x8[30][7]=0x00; 
00003838  422A 00F0 4864          clr.b     240(A2)
0000383C  157C 0041 4865          move.b    #65,240+1(A2)
00003840  00F1      
00003842  157C 0041 4866          move.b    #65,240+2(A2)
00003846  00F2      
00003848  157C 0063 4867          move.b    #99,240+3(A2)
0000384C  00F3      
0000384E  157C 0036 4868          move.b    #54,240+4(A2)
00003852  00F4      
00003854  157C 001C 4869          move.b    #28,240+5(A2)
00003858  00F5      
0000385A  157C 0008 4870          move.b    #8,240+6(A2)
0000385E  00F6      
00003860  422A 00F7 4871          clr.b     240+7(A2)
                    4872   ; font8x8[31][0]=0x00;font8x8[31][1]=0x20;font8x8[31][2]=0x60;font8x8[31][3]=0x45;font8x8[31][4]=0x4d;font8x8[31][5]=0x78;font8x8[31][6]=0x30;font8x8[31][7]=0x00; 
00003864  422A 00F8 4873          clr.b     248(A2)
00003868  157C 0020 4874          move.b    #32,248+1(A2)
0000386C  00F9      
0000386E  157C 0060 4875          move.b    #96,248+2(A2)
00003872  00FA      
00003874  157C 0045 4876          move.b    #69,248+3(A2)
00003878  00FB      
0000387A  157C 004D 4877          move.b    #77,248+4(A2)
0000387E  00FC      
00003880  157C 0078 4878          move.b    #120,248+5(A2)
00003884  00FD      
00003886  157C 0030 4879          move.b    #48,248+6(A2)
0000388A  00FE      
0000388C  422A 00FF 4880          clr.b     248+7(A2)
                    4881   ; font8x8[32][0]=0x00;font8x8[32][1]=0x3e;font8x8[32][2]=0x7f;font8x8[32][3]=0x41;font8x8[32][4]=0x59;font8x8[32][5]=0x79;font8x8[32][6]=0x3a;font8x8[32][7]=0x00; 
00003890  422A 0100 4882          clr.b     256(A2)
00003894  157C 003E 4883          move.b    #62,256+1(A2)
00003898  0101      
0000389A  157C 007F 4884          move.b    #127,256+2(A2)
0000389E  0102      
000038A0  157C 0041 4885          move.b    #65,256+3(A2)
000038A4  0103      
000038A6  157C 0059 4886          move.b    #89,256+4(A2)
000038AA  0104      
000038AC  157C 0079 4887          move.b    #121,256+5(A2)
000038B0  0105      
000038B2  157C 003A 4888          move.b    #58,256+6(A2)
000038B6  0106      
000038B8  422A 0107 4889          clr.b     256+7(A2)
                    4890   ; font8x8[33][0]=0x00;font8x8[33][1]=0x1f;font8x8[33][2]=0x3f;font8x8[33][3]=0x68;font8x8[33][4]=0x68;font8x8[33][5]=0x3f;font8x8[33][6]=0x1f;font8x8[33][7]=0x00; 
000038BC  422A 0108 4891          clr.b     264(A2)
000038C0  157C 001F 4892          move.b    #31,264+1(A2)
000038C4  0109      
000038C6  157C 003F 4893          move.b    #63,264+2(A2)
000038CA  010A      
000038CC  157C 0068 4894          move.b    #104,264+3(A2)
000038D0  010B      
000038D2  157C 0068 4895          move.b    #104,264+4(A2)
000038D6  010C      
000038D8  157C 003F 4896          move.b    #63,264+5(A2)
000038DC  010D      
000038DE  157C 001F 4897          move.b    #31,264+6(A2)
000038E2  010E      
000038E4  422A 010F 4898          clr.b     264+7(A2)
                    4899   ; font8x8[34][0]=0x00;font8x8[34][1]=0x7f;font8x8[34][2]=0x7f;font8x8[34][3]=0x49;font8x8[34][4]=0x49;font8x8[34][5]=0x7f;font8x8[34][6]=0x36;font8x8[34][7]=0x00; 
000038E8  422A 0110 4900          clr.b     272(A2)
000038EC  157C 007F 4901          move.b    #127,272+1(A2)
000038F0  0111      
000038F2  157C 007F 4902          move.b    #127,272+2(A2)
000038F6  0112      
000038F8  157C 0049 4903          move.b    #73,272+3(A2)
000038FC  0113      
000038FE  157C 0049 4904          move.b    #73,272+4(A2)
00003902  0114      
00003904  157C 007F 4905          move.b    #127,272+5(A2)
00003908  0115      
0000390A  157C 0036 4906          move.b    #54,272+6(A2)
0000390E  0116      
00003910  422A 0117 4907          clr.b     272+7(A2)
                    4908   ; font8x8[35][0]=0x00;font8x8[35][1]=0x3e;font8x8[35][2]=0x7f;font8x8[35][3]=0x41;font8x8[35][4]=0x41;font8x8[35][5]=0x63;font8x8[35][6]=0x22;font8x8[35][7]=0x00; 
00003914  422A 0118 4909          clr.b     280(A2)
00003918  157C 003E 4910          move.b    #62,280+1(A2)
0000391C  0119      
0000391E  157C 007F 4911          move.b    #127,280+2(A2)
00003922  011A      
00003924  157C 0041 4912          move.b    #65,280+3(A2)
00003928  011B      
0000392A  157C 0041 4913          move.b    #65,280+4(A2)
0000392E  011C      
00003930  157C 0063 4914          move.b    #99,280+5(A2)
00003934  011D      
00003936  157C 0022 4915          move.b    #34,280+6(A2)
0000393A  011E      
0000393C  422A 011F 4916          clr.b     280+7(A2)
                    4917   ; font8x8[36][0]=0x00;font8x8[36][1]=0x7f;font8x8[36][2]=0x7f;font8x8[36][3]=0x41;font8x8[36][4]=0x63;font8x8[36][5]=0x3e;font8x8[36][6]=0x1c;font8x8[36][7]=0x00; 
00003940  422A 0120 4918          clr.b     288(A2)
00003944  157C 007F 4919          move.b    #127,288+1(A2)
00003948  0121      
0000394A  157C 007F 4920          move.b    #127,288+2(A2)
0000394E  0122      
00003950  157C 0041 4921          move.b    #65,288+3(A2)
00003954  0123      
00003956  157C 0063 4922          move.b    #99,288+4(A2)
0000395A  0124      
0000395C  157C 003E 4923          move.b    #62,288+5(A2)
00003960  0125      
00003962  157C 001C 4924          move.b    #28,288+6(A2)
00003966  0126      
00003968  422A 0127 4925          clr.b     288+7(A2)
                    4926   ; font8x8[37][0]=0x00;font8x8[37][1]=0x7f;font8x8[37][2]=0x7f;font8x8[37][3]=0x49;font8x8[37][4]=0x49;font8x8[37][5]=0x41;font8x8[37][6]=0x41;font8x8[37][7]=0x00; 
0000396C  422A 0128 4927          clr.b     296(A2)
00003970  157C 007F 4928          move.b    #127,296+1(A2)
00003974  0129      
00003976  157C 007F 4929          move.b    #127,296+2(A2)
0000397A  012A      
0000397C  157C 0049 4930          move.b    #73,296+3(A2)
00003980  012B      
00003982  157C 0049 4931          move.b    #73,296+4(A2)
00003986  012C      
00003988  157C 0041 4932          move.b    #65,296+5(A2)
0000398C  012D      
0000398E  157C 0041 4933          move.b    #65,296+6(A2)
00003992  012E      
00003994  422A 012F 4934          clr.b     296+7(A2)
                    4935   ; font8x8[38][0]=0x00;font8x8[38][1]=0x7f;font8x8[38][2]=0x7f;font8x8[38][3]=0x48;font8x8[38][4]=0x48;font8x8[38][5]=0x40;font8x8[38][6]=0x40;font8x8[38][7]=0x00; 
00003998  422A 0130 4936          clr.b     304(A2)
0000399C  157C 007F 4937          move.b    #127,304+1(A2)
000039A0  0131      
000039A2  157C 007F 4938          move.b    #127,304+2(A2)
000039A6  0132      
000039A8  157C 0048 4939          move.b    #72,304+3(A2)
000039AC  0133      
000039AE  157C 0048 4940          move.b    #72,304+4(A2)
000039B2  0134      
000039B4  157C 0040 4941          move.b    #64,304+5(A2)
000039B8  0135      
000039BA  157C 0040 4942          move.b    #64,304+6(A2)
000039BE  0136      
000039C0  422A 0137 4943          clr.b     304+7(A2)
                    4944   ; font8x8[39][0]=0x00;font8x8[39][1]=0x3e;font8x8[39][2]=0x7f;font8x8[39][3]=0x41;font8x8[39][4]=0x49;font8x8[39][5]=0x6f;font8x8[39][6]=0x2e;font8x8[39][7]=0x00; 
000039C4  422A 0138 4945          clr.b     312(A2)
000039C8  157C 003E 4946          move.b    #62,312+1(A2)
000039CC  0139      
000039CE  157C 007F 4947          move.b    #127,312+2(A2)
000039D2  013A      
000039D4  157C 0041 4948          move.b    #65,312+3(A2)
000039D8  013B      
000039DA  157C 0049 4949          move.b    #73,312+4(A2)
000039DE  013C      
000039E0  157C 006F 4950          move.b    #111,312+5(A2)
000039E4  013D      
000039E6  157C 002E 4951          move.b    #46,312+6(A2)
000039EA  013E      
000039EC  422A 013F 4952          clr.b     312+7(A2)
                    4953   ; font8x8[40][0]=0x00;font8x8[40][1]=0x7f;font8x8[40][2]=0x7f;font8x8[40][3]=0x08;font8x8[40][4]=0x08;font8x8[40][5]=0x7f;font8x8[40][6]=0x7f;font8x8[40][7]=0x00; 
000039F0  422A 0140 4954          clr.b     320(A2)
000039F4  157C 007F 4955          move.b    #127,320+1(A2)
000039F8  0141      
000039FA  157C 007F 4956          move.b    #127,320+2(A2)
000039FE  0142      
00003A00  157C 0008 4957          move.b    #8,320+3(A2)
00003A04  0143      
00003A06  157C 0008 4958          move.b    #8,320+4(A2)
00003A0A  0144      
00003A0C  157C 007F 4959          move.b    #127,320+5(A2)
00003A10  0145      
00003A12  157C 007F 4960          move.b    #127,320+6(A2)
00003A16  0146      
00003A18  422A 0147 4961          clr.b     320+7(A2)
                    4962   ; font8x8[41][0]=0x00;font8x8[41][1]=0x00;font8x8[41][2]=0x41;font8x8[41][3]=0x7f;font8x8[41][4]=0x7f;font8x8[41][5]=0x41;font8x8[41][6]=0x00;font8x8[41][7]=0x00; 
00003A1C  422A 0148 4963          clr.b     328(A2)
00003A20  422A 0149 4964          clr.b     328+1(A2)
00003A24  157C 0041 4965          move.b    #65,328+2(A2)
00003A28  014A      
00003A2A  157C 007F 4966          move.b    #127,328+3(A2)
00003A2E  014B      
00003A30  157C 007F 4967          move.b    #127,328+4(A2)
00003A34  014C      
00003A36  157C 0041 4968          move.b    #65,328+5(A2)
00003A3A  014D      
00003A3C  422A 014E 4969          clr.b     328+6(A2)
00003A40  422A 014F 4970          clr.b     328+7(A2)
                    4971   ; font8x8[42][0]=0x00;font8x8[42][1]=0x02;font8x8[42][2]=0x03;font8x8[42][3]=0x41;font8x8[42][4]=0x7f;font8x8[42][5]=0x7e;font8x8[42][6]=0x40;font8x8[42][7]=0x00; 
00003A44  422A 0150 4972          clr.b     336(A2)
00003A48  157C 0002 4973          move.b    #2,336+1(A2)
00003A4C  0151      
00003A4E  157C 0003 4974          move.b    #3,336+2(A2)
00003A52  0152      
00003A54  157C 0041 4975          move.b    #65,336+3(A2)
00003A58  0153      
00003A5A  157C 007F 4976          move.b    #127,336+4(A2)
00003A5E  0154      
00003A60  157C 007E 4977          move.b    #126,336+5(A2)
00003A64  0155      
00003A66  157C 0040 4978          move.b    #64,336+6(A2)
00003A6A  0156      
00003A6C  422A 0157 4979          clr.b     336+7(A2)
                    4980   ; font8x8[43][0]=0x00;font8x8[43][1]=0x7f;font8x8[43][2]=0x7f;font8x8[43][3]=0x1c;font8x8[43][4]=0x36;font8x8[43][5]=0x63;font8x8[43][6]=0x41;font8x8[43][7]=0x00; 
00003A70  422A 0158 4981          clr.b     344(A2)
00003A74  157C 007F 4982          move.b    #127,344+1(A2)
00003A78  0159      
00003A7A  157C 007F 4983          move.b    #127,344+2(A2)
00003A7E  015A      
00003A80  157C 001C 4984          move.b    #28,344+3(A2)
00003A84  015B      
00003A86  157C 0036 4985          move.b    #54,344+4(A2)
00003A8A  015C      
00003A8C  157C 0063 4986          move.b    #99,344+5(A2)
00003A90  015D      
00003A92  157C 0041 4987          move.b    #65,344+6(A2)
00003A96  015E      
00003A98  422A 015F 4988          clr.b     344+7(A2)
                    4989   ; font8x8[44][0]=0x00;font8x8[44][1]=0x7f;font8x8[44][2]=0x7f;font8x8[44][3]=0x01;font8x8[44][4]=0x01;font8x8[44][5]=0x01;font8x8[44][6]=0x01;font8x8[44][7]=0x00; 
00003A9C  422A 0160 4990          clr.b     352(A2)
00003AA0  157C 007F 4991          move.b    #127,352+1(A2)
00003AA4  0161      
00003AA6  157C 007F 4992          move.b    #127,352+2(A2)
00003AAA  0162      
00003AAC  157C 0001 4993          move.b    #1,352+3(A2)
00003AB0  0163      
00003AB2  157C 0001 4994          move.b    #1,352+4(A2)
00003AB6  0164      
00003AB8  157C 0001 4995          move.b    #1,352+5(A2)
00003ABC  0165      
00003ABE  157C 0001 4996          move.b    #1,352+6(A2)
00003AC2  0166      
00003AC4  422A 0167 4997          clr.b     352+7(A2)
                    4998   ; font8x8[45][0]=0x00;font8x8[45][1]=0x7f;font8x8[45][2]=0x7f;font8x8[45][3]=0x30;font8x8[45][4]=0x18;font8x8[45][5]=0x30;font8x8[45][6]=0x7f;font8x8[45][7]=0x7f; 
00003AC8  422A 0168 4999          clr.b     360(A2)
00003ACC  157C 007F 5000          move.b    #127,360+1(A2)
00003AD0  0169      
00003AD2  157C 007F 5001          move.b    #127,360+2(A2)
00003AD6  016A      
00003AD8  157C 0030 5002          move.b    #48,360+3(A2)
00003ADC  016B      
00003ADE  157C 0018 5003          move.b    #24,360+4(A2)
00003AE2  016C      
00003AE4  157C 0030 5004          move.b    #48,360+5(A2)
00003AE8  016D      
00003AEA  157C 007F 5005          move.b    #127,360+6(A2)
00003AEE  016E      
00003AF0  157C 007F 5006          move.b    #127,360+7(A2)
00003AF4  016F      
                    5007   ; font8x8[46][0]=0x00;font8x8[46][1]=0x7f;font8x8[46][2]=0x7f;font8x8[46][3]=0x38;font8x8[46][4]=0x1c;font8x8[46][5]=0x7f;font8x8[46][6]=0x7f;font8x8[46][7]=0x00; 
00003AF6  422A 0170 5008          clr.b     368(A2)
00003AFA  157C 007F 5009          move.b    #127,368+1(A2)
00003AFE  0171      
00003B00  157C 007F 5010          move.b    #127,368+2(A2)
00003B04  0172      
00003B06  157C 0038 5011          move.b    #56,368+3(A2)
00003B0A  0173      
00003B0C  157C 001C 5012          move.b    #28,368+4(A2)
00003B10  0174      
00003B12  157C 007F 5013          move.b    #127,368+5(A2)
00003B16  0175      
00003B18  157C 007F 5014          move.b    #127,368+6(A2)
00003B1C  0176      
00003B1E  422A 0177 5015          clr.b     368+7(A2)
                    5016   ; font8x8[47][0]=0x00;font8x8[47][1]=0x3e;font8x8[47][2]=0x7f;font8x8[47][3]=0x41;font8x8[47][4]=0x41;font8x8[47][5]=0x7f;font8x8[47][6]=0x3e;font8x8[47][7]=0x00; 
00003B22  422A 0178 5017          clr.b     376(A2)
00003B26  157C 003E 5018          move.b    #62,376+1(A2)
00003B2A  0179      
00003B2C  157C 007F 5019          move.b    #127,376+2(A2)
00003B30  017A      
00003B32  157C 0041 5020          move.b    #65,376+3(A2)
00003B36  017B      
00003B38  157C 0041 5021          move.b    #65,376+4(A2)
00003B3C  017C      
00003B3E  157C 007F 5022          move.b    #127,376+5(A2)
00003B42  017D      
00003B44  157C 003E 5023          move.b    #62,376+6(A2)
00003B48  017E      
00003B4A  422A 017F 5024          clr.b     376+7(A2)
                    5025   ; font8x8[48][0]=0x00;font8x8[48][1]=0x7f;font8x8[48][2]=0x7f;font8x8[48][3]=0x48;font8x8[48][4]=0x48;font8x8[48][5]=0x78;font8x8[48][6]=0x30;font8x8[48][7]=0x00; 
00003B4E  422A 0180 5026          clr.b     384(A2)
00003B52  157C 007F 5027          move.b    #127,384+1(A2)
00003B56  0181      
00003B58  157C 007F 5028          move.b    #127,384+2(A2)
00003B5C  0182      
00003B5E  157C 0048 5029          move.b    #72,384+3(A2)
00003B62  0183      
00003B64  157C 0048 5030          move.b    #72,384+4(A2)
00003B68  0184      
00003B6A  157C 0078 5031          move.b    #120,384+5(A2)
00003B6E  0185      
00003B70  157C 0030 5032          move.b    #48,384+6(A2)
00003B74  0186      
00003B76  422A 0187 5033          clr.b     384+7(A2)
                    5034   ; font8x8[49][0]=0x00;font8x8[49][1]=0x3c;font8x8[49][2]=0x7e;font8x8[49][3]=0x42;font8x8[49][4]=0x43;font8x8[49][5]=0x7f;font8x8[49][6]=0x3d;font8x8[49][7]=0x00; 
00003B7A  422A 0188 5035          clr.b     392(A2)
00003B7E  157C 003C 5036          move.b    #60,392+1(A2)
00003B82  0189      
00003B84  157C 007E 5037          move.b    #126,392+2(A2)
00003B88  018A      
00003B8A  157C 0042 5038          move.b    #66,392+3(A2)
00003B8E  018B      
00003B90  157C 0043 5039          move.b    #67,392+4(A2)
00003B94  018C      
00003B96  157C 007F 5040          move.b    #127,392+5(A2)
00003B9A  018D      
00003B9C  157C 003D 5041          move.b    #61,392+6(A2)
00003BA0  018E      
00003BA2  422A 018F 5042          clr.b     392+7(A2)
                    5043   ; font8x8[50][0]=0x00;font8x8[50][1]=0x7f;font8x8[50][2]=0x7f;font8x8[50][3]=0x4c;font8x8[50][4]=0x4e;font8x8[50][5]=0x7b;font8x8[50][6]=0x31;font8x8[50][7]=0x00; 
00003BA6  422A 0190 5044          clr.b     400(A2)
00003BAA  157C 007F 5045          move.b    #127,400+1(A2)
00003BAE  0191      
00003BB0  157C 007F 5046          move.b    #127,400+2(A2)
00003BB4  0192      
00003BB6  157C 004C 5047          move.b    #76,400+3(A2)
00003BBA  0193      
00003BBC  157C 004E 5048          move.b    #78,400+4(A2)
00003BC0  0194      
00003BC2  157C 007B 5049          move.b    #123,400+5(A2)
00003BC6  0195      
00003BC8  157C 0031 5050          move.b    #49,400+6(A2)
00003BCC  0196      
00003BCE  422A 0197 5051          clr.b     400+7(A2)
                    5052   ; font8x8[51][0]=0x00;font8x8[51][1]=0x32;font8x8[51][2]=0x7b;font8x8[51][3]=0x49;font8x8[51][4]=0x49;font8x8[51][5]=0x6f;font8x8[51][6]=0x26;font8x8[51][7]=0x00; 
00003BD2  422A 0198 5053          clr.b     408(A2)
00003BD6  157C 0032 5054          move.b    #50,408+1(A2)
00003BDA  0199      
00003BDC  157C 007B 5055          move.b    #123,408+2(A2)
00003BE0  019A      
00003BE2  157C 0049 5056          move.b    #73,408+3(A2)
00003BE6  019B      
00003BE8  157C 0049 5057          move.b    #73,408+4(A2)
00003BEC  019C      
00003BEE  157C 006F 5058          move.b    #111,408+5(A2)
00003BF2  019D      
00003BF4  157C 0026 5059          move.b    #38,408+6(A2)
00003BF8  019E      
00003BFA  422A 019F 5060          clr.b     408+7(A2)
                    5061   ; font8x8[52][0]=0x00;font8x8[52][1]=0x40;font8x8[52][2]=0x40;font8x8[52][3]=0x7f;font8x8[52][4]=0x7f;font8x8[52][5]=0x40;font8x8[52][6]=0x40;font8x8[52][7]=0x00; 
00003BFE  422A 01A0 5062          clr.b     416(A2)
00003C02  157C 0040 5063          move.b    #64,416+1(A2)
00003C06  01A1      
00003C08  157C 0040 5064          move.b    #64,416+2(A2)
00003C0C  01A2      
00003C0E  157C 007F 5065          move.b    #127,416+3(A2)
00003C12  01A3      
00003C14  157C 007F 5066          move.b    #127,416+4(A2)
00003C18  01A4      
00003C1A  157C 0040 5067          move.b    #64,416+5(A2)
00003C1E  01A5      
00003C20  157C 0040 5068          move.b    #64,416+6(A2)
00003C24  01A6      
00003C26  422A 01A7 5069          clr.b     416+7(A2)
                    5070   ; font8x8[53][0]=0x00;font8x8[53][1]=0x7e;font8x8[53][2]=0x7f;font8x8[53][3]=0x01;font8x8[53][4]=0x01;font8x8[53][5]=0x7f;font8x8[53][6]=0x7e;font8x8[53][7]=0x00; 
00003C2A  422A 01A8 5071          clr.b     424(A2)
00003C2E  157C 007E 5072          move.b    #126,424+1(A2)
00003C32  01A9      
00003C34  157C 007F 5073          move.b    #127,424+2(A2)
00003C38  01AA      
00003C3A  157C 0001 5074          move.b    #1,424+3(A2)
00003C3E  01AB      
00003C40  157C 0001 5075          move.b    #1,424+4(A2)
00003C44  01AC      
00003C46  157C 007F 5076          move.b    #127,424+5(A2)
00003C4A  01AD      
00003C4C  157C 007E 5077          move.b    #126,424+6(A2)
00003C50  01AE      
00003C52  422A 01AF 5078          clr.b     424+7(A2)
                    5079   ; font8x8[54][0]=0x00;font8x8[54][1]=0x7c;font8x8[54][2]=0x7e;font8x8[54][3]=0x03;font8x8[54][4]=0x03;font8x8[54][5]=0x7e;font8x8[54][6]=0x7c;font8x8[54][7]=0x00; 
00003C56  422A 01B0 5080          clr.b     432(A2)
00003C5A  157C 007C 5081          move.b    #124,432+1(A2)
00003C5E  01B1      
00003C60  157C 007E 5082          move.b    #126,432+2(A2)
00003C64  01B2      
00003C66  157C 0003 5083          move.b    #3,432+3(A2)
00003C6A  01B3      
00003C6C  157C 0003 5084          move.b    #3,432+4(A2)
00003C70  01B4      
00003C72  157C 007E 5085          move.b    #126,432+5(A2)
00003C76  01B5      
00003C78  157C 007C 5086          move.b    #124,432+6(A2)
00003C7C  01B6      
00003C7E  422A 01B7 5087          clr.b     432+7(A2)
                    5088   ; font8x8[55][0]=0x00;font8x8[55][1]=0x7f;font8x8[55][2]=0x7f;font8x8[55][3]=0x06;font8x8[55][4]=0x0c;font8x8[55][5]=0x06;font8x8[55][6]=0x7f;font8x8[55][7]=0x7f; 
00003C82  422A 01B8 5089          clr.b     440(A2)
00003C86  157C 007F 5090          move.b    #127,440+1(A2)
00003C8A  01B9      
00003C8C  157C 007F 5091          move.b    #127,440+2(A2)
00003C90  01BA      
00003C92  157C 0006 5092          move.b    #6,440+3(A2)
00003C96  01BB      
00003C98  157C 000C 5093          move.b    #12,440+4(A2)
00003C9C  01BC      
00003C9E  157C 0006 5094          move.b    #6,440+5(A2)
00003CA2  01BD      
00003CA4  157C 007F 5095          move.b    #127,440+6(A2)
00003CA8  01BE      
00003CAA  157C 007F 5096          move.b    #127,440+7(A2)
00003CAE  01BF      
                    5097   ; font8x8[56][0]=0x00;font8x8[56][1]=0x63;font8x8[56][2]=0x77;font8x8[56][3]=0x1c;font8x8[56][4]=0x1c;font8x8[56][5]=0x77;font8x8[56][6]=0x63;font8x8[56][7]=0x00; 
00003CB0  422A 01C0 5098          clr.b     448(A2)
00003CB4  157C 0063 5099          move.b    #99,448+1(A2)
00003CB8  01C1      
00003CBA  157C 0077 5100          move.b    #119,448+2(A2)
00003CBE  01C2      
00003CC0  157C 001C 5101          move.b    #28,448+3(A2)
00003CC4  01C3      
00003CC6  157C 001C 5102          move.b    #28,448+4(A2)
00003CCA  01C4      
00003CCC  157C 0077 5103          move.b    #119,448+5(A2)
00003CD0  01C5      
00003CD2  157C 0063 5104          move.b    #99,448+6(A2)
00003CD6  01C6      
00003CD8  422A 01C7 5105          clr.b     448+7(A2)
                    5106   ; font8x8[57][0]=0x00;font8x8[57][1]=0x70;font8x8[57][2]=0x78;font8x8[57][3]=0x0f;font8x8[57][4]=0x0f;font8x8[57][5]=0x78;font8x8[57][6]=0x70;font8x8[57][7]=0x00; 
00003CDC  422A 01C8 5107          clr.b     456(A2)
00003CE0  157C 0070 5108          move.b    #112,456+1(A2)
00003CE4  01C9      
00003CE6  157C 0078 5109          move.b    #120,456+2(A2)
00003CEA  01CA      
00003CEC  157C 000F 5110          move.b    #15,456+3(A2)
00003CF0  01CB      
00003CF2  157C 000F 5111          move.b    #15,456+4(A2)
00003CF6  01CC      
00003CF8  157C 0078 5112          move.b    #120,456+5(A2)
00003CFC  01CD      
00003CFE  157C 0070 5113          move.b    #112,456+6(A2)
00003D02  01CE      
00003D04  422A 01CF 5114          clr.b     456+7(A2)
                    5115   ; font8x8[58][0]=0x00;font8x8[58][1]=0x43;font8x8[58][2]=0x47;font8x8[58][3]=0x4d;font8x8[58][4]=0x59;font8x8[58][5]=0x71;font8x8[58][6]=0x61;font8x8[58][7]=0x00; 
00003D08  422A 01D0 5116          clr.b     464(A2)
00003D0C  157C 0043 5117          move.b    #67,464+1(A2)
00003D10  01D1      
00003D12  157C 0047 5118          move.b    #71,464+2(A2)
00003D16  01D2      
00003D18  157C 004D 5119          move.b    #77,464+3(A2)
00003D1C  01D3      
00003D1E  157C 0059 5120          move.b    #89,464+4(A2)
00003D22  01D4      
00003D24  157C 0071 5121          move.b    #113,464+5(A2)
00003D28  01D5      
00003D2A  157C 0061 5122          move.b    #97,464+6(A2)
00003D2E  01D6      
00003D30  422A 01D7 5123          clr.b     464+7(A2)
                    5124   ; font8x8[59][0]=0x00;font8x8[59][1]=0x00;font8x8[59][2]=0x7f;font8x8[59][3]=0x7f;font8x8[59][4]=0x41;font8x8[59][5]=0x41;font8x8[59][6]=0x00;font8x8[59][7]=0x00; 
00003D34  422A 01D8 5125          clr.b     472(A2)
00003D38  422A 01D9 5126          clr.b     472+1(A2)
00003D3C  157C 007F 5127          move.b    #127,472+2(A2)
00003D40  01DA      
00003D42  157C 007F 5128          move.b    #127,472+3(A2)
00003D46  01DB      
00003D48  157C 0041 5129          move.b    #65,472+4(A2)
00003D4C  01DC      
00003D4E  157C 0041 5130          move.b    #65,472+5(A2)
00003D52  01DD      
00003D54  422A 01DE 5131          clr.b     472+6(A2)
00003D58  422A 01DF 5132          clr.b     472+7(A2)
                    5133   ; font8x8[60][0]=0x00;font8x8[60][1]=0x20;font8x8[60][2]=0x30;font8x8[60][3]=0x18;font8x8[60][4]=0x0c;font8x8[60][5]=0x06;font8x8[60][6]=0x03;font8x8[60][7]=0x01; 
00003D5C  422A 01E0 5134          clr.b     480(A2)
00003D60  157C 0020 5135          move.b    #32,480+1(A2)
00003D64  01E1      
00003D66  157C 0030 5136          move.b    #48,480+2(A2)
00003D6A  01E2      
00003D6C  157C 0018 5137          move.b    #24,480+3(A2)
00003D70  01E3      
00003D72  157C 000C 5138          move.b    #12,480+4(A2)
00003D76  01E4      
00003D78  157C 0006 5139          move.b    #6,480+5(A2)
00003D7C  01E5      
00003D7E  157C 0003 5140          move.b    #3,480+6(A2)
00003D82  01E6      
00003D84  157C 0001 5141          move.b    #1,480+7(A2)
00003D88  01E7      
                    5142   ; font8x8[61][0]=0x00;font8x8[61][1]=0x00;font8x8[61][2]=0x41;font8x8[61][3]=0x41;font8x8[61][4]=0x7f;font8x8[61][5]=0x7f;font8x8[61][6]=0x00;font8x8[61][7]=0x00; 
00003D8A  422A 01E8 5143          clr.b     488(A2)
00003D8E  422A 01E9 5144          clr.b     488+1(A2)
00003D92  157C 0041 5145          move.b    #65,488+2(A2)
00003D96  01EA      
00003D98  157C 0041 5146          move.b    #65,488+3(A2)
00003D9C  01EB      
00003D9E  157C 007F 5147          move.b    #127,488+4(A2)
00003DA2  01EC      
00003DA4  157C 007F 5148          move.b    #127,488+5(A2)
00003DA8  01ED      
00003DAA  422A 01EE 5149          clr.b     488+6(A2)
00003DAE  422A 01EF 5150          clr.b     488+7(A2)
                    5151   ; font8x8[62][0]=0x00;font8x8[62][1]=0x08;font8x8[62][2]=0x18;font8x8[62][3]=0x3f;font8x8[62][4]=0x3f;font8x8[62][5]=0x18;font8x8[62][6]=0x08;font8x8[62][7]=0x00;
00003DB2  422A 01F0 5152          clr.b     496(A2)
00003DB6  157C 0008 5153          move.b    #8,496+1(A2)
00003DBA  01F1      
00003DBC  157C 0018 5154          move.b    #24,496+2(A2)
00003DC0  01F2      
00003DC2  157C 003F 5155          move.b    #63,496+3(A2)
00003DC6  01F3      
00003DC8  157C 003F 5156          move.b    #63,496+4(A2)
00003DCC  01F4      
00003DCE  157C 0018 5157          move.b    #24,496+5(A2)
00003DD2  01F5      
00003DD4  157C 0008 5158          move.b    #8,496+6(A2)
00003DD8  01F6      
00003DDA  422A 01F7 5159          clr.b     496+7(A2)
00003DDE  4CDF 3C00 5160          movem.l   (A7)+,A2/A3/A4/A5
00003DE2  4E75      5161          rts
                    5162   ; }
                    5163   ; void cosmic_impalas_main() {
                    5164   _cosmic_impalas_main:
                    5165   ; // NOTE: initializers don't get run, so we init here
                    5166   ; FIRE1  = 0;
00003DE4  42B9 0803 5167          clr.l     _FIRE1.L
00003DE8  0422      
                    5168   ; LEFT1  = 0;
00003DEA  42B9 0803 5169          clr.l     _LEFT1.L
00003DEE  0426      
                    5170   ; RIGHT1 = 0;
00003DF0  42B9 0803 5171          clr.l     _RIGHT1.L
00003DF4  042A      
                    5172   ; srand(1234);
00003DF6  4878 04D2 5173          pea       1234
00003DFA  4EB8 1ECC 5174          jsr       _srand
00003DFE  584F      5175          addq.w    #4,A7
                    5176   ; initialize_all_bitmaps();
00003E00  4EB8 2DE8 5177          jsr       _initialize_all_bitmaps
                    5178   ; credits = 0;
00003E04  4239 0803 5179          clr.b     _credits.L
00003E08  0442      
                    5180   ; play_game(); 
00003E0A  4EB8 2DA8 5181          jsr       _play_game
00003E0E  4E75      5182          rts
                    5183   ; }
                    5184   _toupper:
00003E10  4E56 0000 5185          link      A6,#0
00003E14  48E7 2000 5186          movem.l   D2,-(A7)
00003E18  242E 0008 5187          move.l    8(A6),D2
00003E1C  0C82 0000 5188          cmp.l     #97,D2
00003E20  0061      
00003E22  6D0E      5189          blt.s     toupper_1
00003E24  0C82 0000 5190          cmp.l     #122,D2
00003E28  007A      
00003E2A  6E06      5191          bgt.s     toupper_1
00003E2C  C4BC 0000 5192          and.l     #95,D2
00003E30  005F      
                    5193   toupper_1:
00003E32  2002      5194          move.l    D2,D0
00003E34  4CDF 0004 5195          movem.l   (A7)+,D2
00003E38  4E5E      5196          unlk      A6
00003E3A  4E75      5197          rts
                    5198   _printf:
00003E3C  4E56 FFFC 5199          link      A6,#-4
00003E40  48E7 2000 5200          movem.l   D2,-(A7)
00003E44  41EE 0008 5201          lea       8(A6),A0
00003E48  5848      5202          addq.w    #4,A0
00003E4A  2408      5203          move.l    A0,D2
00003E4C  2F02      5204          move.l    D2,-(A7)
00003E4E  2F2E 0008 5205          move.l    8(A6),-(A7)
00003E52  42A7      5206          clr.l     -(A7)
00003E54  6100 0190 5207          bsr       _vsprintf
00003E58  DEFC 000C 5208          add.w     #12,A7
00003E5C  2D40 FFFC 5209          move.l    D0,-4(A6)
00003E60  4282      5210          clr.l     D2
00003E62  202E FFFC 5211          move.l    -4(A6),D0
00003E66  4CDF 0004 5212          movem.l   (A7)+,D2
00003E6A  4E5E      5213          unlk      A6
00003E6C  4E75      5214          rts
                    5215   ULMUL:
00003E6E  4E56 0000 5216          link    A6,#0
00003E72  48E7 C000 5217          movem.l D0/D1,-(A7)
00003E76  222E 0008 5218          move.l  8(A6),D1
00003E7A  202E 000C 5219          move.l  12(A6),D0
00003E7E  602C      5220          bra.s   lmul_3
                    5221   LMUL:
00003E80  4E56 0000 5222          link    A6,#0
00003E84  48E7 C000 5223          movem.l D0/D1,-(A7)
00003E88  222E 0008 5224          move.l  8(A6),D1
00003E8C  202E 000C 5225          move.l  12(A6),D0
00003E90  4A80      5226          tst.l   D0
00003E92  6A0A      5227          bpl.s   lmul_1
00003E94  4480      5228          neg.l   D0
00003E96  4A81      5229          tst.l   D1
00003E98  6A0A      5230          bpl.s   lmul_2
00003E9A  4481      5231          neg.l   D1
00003E9C  600E      5232          bra.s   lmul_3
                    5233   lmul_1:
00003E9E  4A81      5234          tst.l   D1
00003EA0  6A0A      5235          bpl.s   lmul_3
00003EA2  4481      5236          neg.l   D1
                    5237   lmul_2:
00003EA4  6114      5238          bsr.s   domul
00003EA6  4481      5239          neg.l   D1
00003EA8  4080      5240          negx.l  D0
00003EAA  6002      5241          bra.s   lmul_4
                    5242   lmul_3:
00003EAC  610C      5243          bsr.s   domul
                    5244   lmul_4:
00003EAE  2D41 0008 5245          move.l  D1,8(A6)
00003EB2  4CDF 0003 5246          movem.l (A7)+,D0/D1
00003EB6  4E5E      5247          unlk    A6
00003EB8  4E75      5248          rts
                    5249   domul:
00003EBA  0C81 0000 5250          cmpi.l  #$FFFF,D1
00003EBE  FFFF      
00003EC0  620C      5251          bhi.s   domul_1
00003EC2  0C80 0000 5252          cmpi.l  #$FFFF,D0
00003EC6  FFFF      
00003EC8  620E      5253          bhi.s   domul_2
00003ECA  C2C0      5254          mulu    D0,D1
00003ECC  4E75      5255          rts
                    5256   domul_1:
00003ECE  0C80 0000 5257          cmpi.l  #$FFFF,D0
00003ED2  FFFF      
00003ED4  6218      5258          bhi.s   domul_4
00003ED6  6002      5259          bra.s   domul_3
                    5260   domul_2
00003ED8  C141      5261          exg     D0,D1
                    5262   domul_3:
00003EDA  2F02      5263          move.l  D2,-(A7)
00003EDC  2401      5264          move.l  D1,D2
00003EDE  4842      5265          swap    D2
00003EE0  C2C0      5266          mulu    D0,D1
00003EE2  C4C0      5267          mulu    D0,D2
00003EE4  4842      5268          swap    D2
00003EE6  4242      5269          clr.w   D2
00003EE8  D282      5270          add.l   D2,D1
00003EEA  241F      5271          move.l  (A7)+,D2
00003EEC  4E75      5272          rts
                    5273   domul_4:
00003EEE  48E7 3000 5274          movem.l D2/D3,-(A7)
00003EF2  2401      5275          move.l  D1,D2
00003EF4  2601      5276          move.l  D1,D3
00003EF6  C2C0      5277          mulu    D0,D1
00003EF8  4842      5278          swap    D2
00003EFA  C4C0      5279          mulu    D0,D2
00003EFC  4840      5280          swap    D0
00003EFE  C6C0      5281          mulu    D0,D3
00003F00  D483      5282          add.l   D3,D2
00003F02  4842      5283          swap    D2
00003F04  4242      5284          clr.w   D2
00003F06  D282      5285          add.l   D2,D1
00003F08  4CDF 000C 5286          movem.l (A7)+,D2/D3
00003F0C  4E75      5287          rts
                    5288   _memmove:
00003F0E  206F 0004 5289          move.l    (4,A7),A0
00003F12  226F 0008 5290          move.l    (8,A7),A1
00003F16  222F 000C 5291          move.l    (12,A7),D1
00003F1A  2008      5292          move.l    A0,D0
00003F1C  B1C9      5293          cmp.l     A1,A0
00003F1E  6408      5294          bcc.s     memmove_1
                    5295   memmove_0:
00003F20  10D9      5296          move.b    (A1)+,(A0)+
00003F22  5341      5297          subq      #1,D1
00003F24  66FA      5298          bne       memmove_0
00003F26  4E75      5299          rts
                    5300   memmove_1:
00003F28  D3C1      5301          add.l     D1,A1
00003F2A  D1C1      5302          add.l     D1,A0
                    5303   memmove_2:
00003F2C  1121      5304          move.b    -(A1),-(A0)
00003F2E  5341      5305          subq      #1,d1
00003F30  66FA      5306          bne       memmove_2
00003F32  4E75      5307          rts
                    5308   @vsprintf_copy:
00003F34  4E56 0000 5309          link      A6,#0
00003F38  206E 0008 5310          move.l    8(A6),A0
00003F3C  4A90      5311          tst.l     (A0)
00003F3E  6710      5312          beq.s     @vsprintf_copy_1
00003F40  202E 000C 5313          move.l    12(A6),D0
00003F44  206E 0008 5314          move.l    8(A6),A0
00003F48  2250      5315          move.l    (A0),A1
00003F4A  5290      5316          addq.l    #1,(A0)
00003F4C  1280      5317          move.b    D0,(A1)
00003F4E  600A      5318          bra.s     @vsprintf_copy_2
                    5319   @vsprintf_copy_1:
00003F50  2F2E 000C 5320          move.l    12(A6),-(A7)
00003F54  6100 085C 5321          bsr       _putch
00003F58  584F      5322          addq.w    #4,A7
                    5323   @vsprintf_copy_2:
00003F5A  4E5E      5324          unlk      A6
00003F5C  4E75      5325          rts
                    5326   @vsprintf_getval:
00003F5E  4E56 0000 5327          link      A6,#0
00003F62  48E7 3000 5328          movem.l   D2/D3,-(A7)
00003F66  242E 0008 5329          move.l    8(A6),D2
00003F6A  4283      5330          clr.l     D3
00003F6C  2042      5331          move.l    D2,A0
00003F6E  2050      5332          move.l    (A0),A0
00003F70  1010      5333          move.b    (A0),D0
00003F72  4880      5334          ext.w     D0
00003F74  48C0      5335          ext.l     D0
00003F76  0C80 0000 5336          cmp.l     #42,D0
00003F7A  002A      
00003F7C  6612      5337          bne.s     @vsprintf_getval_1
00003F7E  206E 000C 5338          move.l    12(A6),A0
00003F82  2250      5339          move.l    (A0),A1
00003F84  5890      5340          addq.l    #4,(A0)
00003F86  2611      5341          move.l    (A1),D3
00003F88  2042      5342          move.l    D2,A0
00003F8A  5290      5343          addq.l    #1,(A0)
00003F8C  6000 004E 5344          bra       @vsprintf_getval_5
                    5345   @vsprintf_getval_1:
00003F90  2042      5346          move.l    D2,A0
00003F92  2050      5347          move.l    (A0),A0
00003F94  1010      5348          move.b    (A0),D0
00003F96  4880      5349          ext.w     D0
00003F98  48C0      5350          ext.l     D0
00003F9A  0C80 0000 5351          cmp.l     #48,D0
00003F9E  0030      
00003FA0  6D00 003A 5352          blt       @vsprintf_getval_5
00003FA4  2042      5353          move.l    D2,A0
00003FA6  2050      5354          move.l    (A0),A0
00003FA8  1010      5355          move.b    (A0),D0
00003FAA  4880      5356          ext.w     D0
00003FAC  48C0      5357          ext.l     D0
00003FAE  0C80 0000 5358          cmp.l     #57,D0
00003FB2  0039      
00003FB4  6E26      5359          bgt.s     @vsprintf_getval_5
00003FB6  2F03      5360          move.l    D3,-(A7)
00003FB8  4878 000A 5361          pea       10
00003FBC  6100 FEC2 5362          bsr       LMUL
00003FC0  2017      5363          move.l    (A7),D0
00003FC2  504F      5364          addq.w    #8,A7
00003FC4  2042      5365          move.l    D2,A0
00003FC6  2250      5366          move.l    (A0),A1
00003FC8  5290      5367          addq.l    #1,(A0)
00003FCA  1211      5368          move.b    (A1),D1
00003FCC  4881      5369          ext.w     D1
00003FCE  48C1      5370          ext.l     D1
00003FD0  D081      5371          add.l     D1,D0
00003FD2  0480 0000 5372          sub.l     #48,D0
00003FD6  0030      
00003FD8  2600      5373          move.l    D0,D3
00003FDA  60B4      5374          bra       @vsprintf_getval_1
                    5375   @vsprintf_getval_5:
00003FDC  2003      5376          move.l    D3,D0
00003FDE  4CDF 000C 5377          movem.l   (A7)+,D2/D3
00003FE2  4E5E      5378          unlk      A6
00003FE4  4E75      5379          rts
                    5380   _vsprintf:
00003FE6  4E56 FFCC 5381          link      A6,#-52
00003FEA  48E7 3F3C 5382          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003FEE  45EE 0008 5383          lea       8(A6),A2
00003FF2  47F8 3F34 5384          lea       @vsprintf_copy,A3
00003FF6  49F9 0000 5385          lea       _ultoa,A4
00003FFA  473E      
00003FFC  4286      5386          clr.l     D6
                    5387   vsprintf_1:
00003FFE  206E 000C 5388          move.l    12(A6),A0
00004002  4A10      5389          tst.b     (A0)
00004004  6700 0624 5390          beq       vsprintf_3
00004008  206E 000C 5391          move.l    12(A6),A0
0000400C  1010      5392          move.b    (A0),D0
0000400E  4880      5393          ext.w     D0
00004010  48C0      5394          ext.l     D0
00004012  0C80 0000 5395          cmp.l     #37,D0
00004016  0025      
00004018  671C      5396          beq.s     vsprintf_4
0000401A  206E 000C 5397          move.l    12(A6),A0
0000401E  52AE 000C 5398          addq.l    #1,12(A6)
00004022  1210      5399          move.b    (A0),D1
00004024  4881      5400          ext.w     D1
00004026  48C1      5401          ext.l     D1
00004028  2F01      5402          move.l    D1,-(A7)
0000402A  2F0A      5403          move.l    A2,-(A7)
0000402C  4E93      5404          jsr       (A3)
0000402E  504F      5405          addq.w    #8,A7
00004030  5286      5406          addq.l    #1,D6
00004032  6000 05F2 5407          bra       vsprintf_2
                    5408   vsprintf_4:
00004036  52AE 000C 5409          addq.l    #1,12(A6)
0000403A  422E FFD3 5410          clr.b     -45(A6)
0000403E  422E FFD2 5411          clr.b     -46(A6)
00004042  422E FFD0 5412          clr.b     -48(A6)
00004046  422E FFCF 5413          clr.b     -49(A6)
0000404A  422E FFCE 5414          clr.b     -50(A6)
0000404E  422E FFCD 5415          clr.b     -51(A6)
00004052  42AE FFFC 5416          clr.l     -4(A6)
00004056  7AFF      5417          moveq     #-1,D5
00004058  41EE FFDC 5418          lea       -36(A6),A0
0000405C  2608      5419          move.l    A0,D3
0000405E  2408      5420          move.l    A0,D2
                    5421   vsprintf_6:
00004060  206E 000C 5422          move.l    12(A6),A0
00004064  1010      5423          move.b    (A0),D0
00004066  4880      5424          ext.w     D0
00004068  48C0      5425          ext.l     D0
0000406A  0C80 0000 5426          cmp.l     #43,D0
0000406E  002B      
00004070  6730      5427          beq.s     vsprintf_12
00004072  6E18      5428          bgt.s     vsprintf_15
00004074  0C80 0000 5429          cmp.l     #35,D0
00004078  0023      
0000407A  6700 003E 5430          beq       vsprintf_14
0000407E  6E00 0046 5431          bgt       vsprintf_9
00004082  0C80 0000 5432          cmp.l     #32,D0
00004086  0020      
00004088  6724      5433          beq.s     vsprintf_13
0000408A  603A      5434          bra.s     vsprintf_9
                    5435   vsprintf_15:
0000408C  0C80 0000 5436          cmp.l     #45,D0
00004090  002D      
00004092  6702      5437          beq.s     vsprintf_11
00004094  6030      5438          bra.s     vsprintf_9
                    5439   vsprintf_11:
00004096  1D7C 0001 5440          move.b    #1,-51(A6)
0000409A  FFCD      
0000409C  52AE 000C 5441          addq.l    #1,12(A6)
000040A0  6026      5442          bra.s     vsprintf_7
                    5443   vsprintf_12:
000040A2  1D7C 0001 5444          move.b    #1,-50(A6)
000040A6  FFCE      
000040A8  52AE 000C 5445          addq.l    #1,12(A6)
000040AC  601A      5446          bra.s     vsprintf_7
                    5447   vsprintf_13:
000040AE  1D7C 0001 5448          move.b    #1,-49(A6)
000040B2  FFCF      
000040B4  52AE 000C 5449          addq.l    #1,12(A6)
000040B8  600E      5450          bra.s     vsprintf_7
                    5451   vsprintf_14:
000040BA  1D7C 0001 5452          move.b    #1,-48(A6)
000040BE  FFD0      
000040C0  52AE 000C 5453          addq.l    #1,12(A6)
000040C4  6002      5454          bra.s     vsprintf_7
                    5455   vsprintf_9:
000040C6  6002      5456          bra.s     vsprintf_8
                    5457   vsprintf_7:
000040C8  6096      5458          bra       vsprintf_6
                    5459   vsprintf_8:
000040CA  206E 000C 5460          move.l    12(A6),A0
000040CE  1010      5461          move.b    (A0),D0
000040D0  4880      5462          ext.w     D0
000040D2  48C0      5463          ext.l     D0
000040D4  0C80 0000 5464          cmp.l     #48,D0
000040D8  0030      
000040DA  660A      5465          bne.s     vsprintf_16
000040DC  52AE 000C 5466          addq.l    #1,12(A6)
000040E0  1D7C 0001 5467          move.b    #1,-46(A6)
000040E4  FFD2      
                    5468   vsprintf_16:
000040E6  486E 0010 5469          pea       16(A6)
000040EA  486E 000C 5470          pea       12(A6)
000040EE  6100 FE6E 5471          bsr       @vsprintf_getval
000040F2  504F      5472          addq.w    #8,A7
000040F4  2A40      5473          move.l    D0,A5
000040F6  206E 000C 5474          move.l    12(A6),A0
000040FA  1010      5475          move.b    (A0),D0
000040FC  4880      5476          ext.w     D0
000040FE  48C0      5477          ext.l     D0
00004100  0C80 0000 5478          cmp.l     #46,D0
00004104  002E      
00004106  6614      5479          bne.s     vsprintf_18
00004108  52AE 000C 5480          addq.l    #1,12(A6)
0000410C  486E 0010 5481          pea       16(A6)
00004110  486E 000C 5482          pea       12(A6)
00004114  6100 FE48 5483          bsr       @vsprintf_getval
00004118  504F      5484          addq.w    #8,A7
0000411A  2A00      5485          move.l    D0,D5
                    5486   vsprintf_18:
0000411C  206E 000C 5487          move.l    12(A6),A0
00004120  1010      5488          move.b    (A0),D0
00004122  4880      5489          ext.w     D0
00004124  48C0      5490          ext.l     D0
00004126  0C80 0000 5491          cmp.l     #108,D0
0000412A  006C      
0000412C  660A      5492          bne.s     vsprintf_20
0000412E  52AE 000C 5493          addq.l    #1,12(A6)
00004132  1D7C 0001 5494          move.b    #1,-45(A6)
00004136  FFD3      
                    5495   vsprintf_20:
00004138  206E 000C 5496          move.l    12(A6),A0
0000413C  1010      5497          move.b    (A0),D0
0000413E  4880      5498          ext.w     D0
00004140  48C0      5499          ext.l     D0
00004142  0C80 0000 5500          cmp.l     #111,D0
00004146  006F      
00004148  6700 00D4 5501          beq       vsprintf_27
0000414C  6E34      5502          bgt.s     vsprintf_33
0000414E  0C80 0000 5503          cmp.l     #100,D0
00004152  0064      
00004154  6700 0054 5504          beq       vsprintf_24
00004158  6E1C      5505          bgt.s     vsprintf_34
0000415A  0C80 0000 5506          cmp.l     #99,D0
0000415E  0063      
00004160  6700 012C 5507          beq       vsprintf_30
00004164  6E00 016A 5508          bgt       vsprintf_22
00004168  0C80 0000 5509          cmp.l     #88,D0
0000416C  0058      
0000416E  6700 00E6 5510          beq       vsprintf_28
00004172  6000 015C 5511          bra       vsprintf_22
                    5512   vsprintf_34:
00004176  0C80 0000 5513          cmp.l     #105,D0
0000417A  0069      
0000417C  672C      5514          beq.s     vsprintf_24
0000417E  6000 0150 5515          bra       vsprintf_22
                    5516   vsprintf_33:
00004182  0C80 0000 5517          cmp.l     #117,D0
00004186  0075      
00004188  6700 005C 5518          beq       vsprintf_26
0000418C  6E0E      5519          bgt.s     vsprintf_35
0000418E  0C80 0000 5520          cmp.l     #115,D0
00004192  0073      
00004194  6700 011C 5521          beq       vsprintf_31
00004198  6000 0136 5522          bra       vsprintf_22
                    5523   vsprintf_35:
0000419C  0C80 0000 5524          cmp.l     #120,D0
000041A0  0078      
000041A2  6700 00B2 5525          beq       vsprintf_28
000041A6  6000 0128 5526          bra       vsprintf_22
                    5527   vsprintf_24:
000041AA  4A2E FFD3 5528          tst.b     -45(A6)
000041AE  671A      5529          beq.s     vsprintf_36
000041B0  4878 000A 5530          pea       10
000041B4  2F03      5531          move.l    D3,-(A7)
000041B6  206E 0010 5532          move.l    16(A6),A0
000041BA  58AE 0010 5533          addq.l    #4,16(A6)
000041BE  2F10      5534          move.l    (A0),-(A7)
000041C0  6100 04F8 5535          bsr       _ltoa
000041C4  DEFC 000C 5536          add.w     #12,A7
000041C8  6018      5537          bra.s     vsprintf_37
                    5538   vsprintf_36:
000041CA  4878 000A 5539          pea       10
000041CE  2F03      5540          move.l    D3,-(A7)
000041D0  206E 0010 5541          move.l    16(A6),A0
000041D4  58AE 0010 5542          addq.l    #4,16(A6)
000041D8  2F10      5543          move.l    (A0),-(A7)
000041DA  6100 04DE 5544          bsr       _ltoa
000041DE  DEFC 000C 5545          add.w     #12,A7
                    5546   vsprintf_37:
000041E2  6000 00FA 5547          bra       vsprintf_23
                    5548   vsprintf_26:
000041E6  4A2E FFD3 5549          tst.b     -45(A6)
000041EA  6718      5550          beq.s     vsprintf_38
000041EC  4878 000A 5551          pea       10
000041F0  2F03      5552          move.l    D3,-(A7)
000041F2  206E 0010 5553          move.l    16(A6),A0
000041F6  58AE 0010 5554          addq.l    #4,16(A6)
000041FA  2F10      5555          move.l    (A0),-(A7)
000041FC  4E94      5556          jsr       (A4)
000041FE  DEFC 000C 5557          add.w     #12,A7
00004202  6016      5558          bra.s     vsprintf_39
                    5559   vsprintf_38:
00004204  4878 000A 5560          pea       10
00004208  2F03      5561          move.l    D3,-(A7)
0000420A  206E 0010 5562          move.l    16(A6),A0
0000420E  58AE 0010 5563          addq.l    #4,16(A6)
00004212  2F10      5564          move.l    (A0),-(A7)
00004214  4E94      5565          jsr       (A4)
00004216  DEFC 000C 5566          add.w     #12,A7
                    5567   vsprintf_39:
0000421A  6000 00C2 5568          bra       vsprintf_23
                    5569   vsprintf_27:
0000421E  4A2E FFD3 5570          tst.b     -45(A6)
00004222  6718      5571          beq.s     vsprintf_40
00004224  4878 0008 5572          pea       8
00004228  2F03      5573          move.l    D3,-(A7)
0000422A  206E 0010 5574          move.l    16(A6),A0
0000422E  58AE 0010 5575          addq.l    #4,16(A6)
00004232  2F10      5576          move.l    (A0),-(A7)
00004234  4E94      5577          jsr       (A4)
00004236  DEFC 000C 5578          add.w     #12,A7
0000423A  6016      5579          bra.s     vsprintf_41
                    5580   vsprintf_40:
0000423C  4878 0008 5581          pea       8
00004240  2F03      5582          move.l    D3,-(A7)
00004242  206E 0010 5583          move.l    16(A6),A0
00004246  58AE 0010 5584          addq.l    #4,16(A6)
0000424A  2F10      5585          move.l    (A0),-(A7)
0000424C  4E94      5586          jsr       (A4)
0000424E  DEFC 000C 5587          add.w     #12,A7
                    5588   vsprintf_41:
00004252  6000 008A 5589          bra       vsprintf_23
                    5590   vsprintf_28:
00004256  4A2E FFD3 5591          tst.b     -45(A6)
0000425A  6718      5592          beq.s     vsprintf_42
0000425C  4878 0010 5593          pea       16
00004260  2F03      5594          move.l    D3,-(A7)
00004262  206E 0010 5595          move.l    16(A6),A0
00004266  58AE 0010 5596          addq.l    #4,16(A6)
0000426A  2F10      5597          move.l    (A0),-(A7)
0000426C  4E94      5598          jsr       (A4)
0000426E  DEFC 000C 5599          add.w     #12,A7
00004272  6016      5600          bra.s     vsprintf_43
                    5601   vsprintf_42:
00004274  4878 0010 5602          pea       16
00004278  2F03      5603          move.l    D3,-(A7)
0000427A  206E 0010 5604          move.l    16(A6),A0
0000427E  58AE 0010 5605          addq.l    #4,16(A6)
00004282  2F10      5606          move.l    (A0),-(A7)
00004284  4E94      5607          jsr       (A4)
00004286  DEFC 000C 5608          add.w     #12,A7
                    5609   vsprintf_43:
0000428A  6000 0052 5610          bra       vsprintf_23
                    5611   vsprintf_30:
0000428E  206E 0010 5612          move.l    16(A6),A0
00004292  58AE 0010 5613          addq.l    #4,16(A6)
00004296  2010      5614          move.l    (A0),D0
00004298  2042      5615          move.l    D2,A0
0000429A  5282      5616          addq.l    #1,D2
0000429C  1080      5617          move.b    D0,(A0)
0000429E  2042      5618          move.l    D2,A0
000042A0  4210      5619          clr.b     (A0)
000042A2  200D      5620          move.l    A5,D0
000042A4  6704      5621          beq.s     vsprintf_44
000042A6  200D      5622          move.l    A5,D0
000042A8  6002      5623          bra.s     vsprintf_45
                    5624   vsprintf_44:
000042AA  7001      5625          moveq     #1,D0
                    5626   vsprintf_45:
000042AC  2A00      5627          move.l    D0,D5
000042AE  6000 002E 5628          bra       vsprintf_23
                    5629   vsprintf_31:
000042B2  206E 0010 5630          move.l    16(A6),A0
000042B6  58AE 0010 5631          addq.l    #4,16(A6)
000042BA  2610      5632          move.l    (A0),D3
000042BC  0C85 FFFF 5633          cmp.l     #-1,D5
000042C0  FFFF      
000042C2  660A      5634          bne.s     vsprintf_46
000042C4  2F03      5635          move.l    D3,-(A7)
000042C6  6100 04D8 5636          bsr       _strlen
000042CA  584F      5637          addq.w    #4,A7
000042CC  2A00      5638          move.l    D0,D5
                    5639   vsprintf_46:
000042CE  600E      5640          bra.s     vsprintf_23
                    5641   vsprintf_22:
000042D0  206E 000C 5642          move.l    12(A6),A0
000042D4  2242      5643          move.l    D2,A1
000042D6  5282      5644          addq.l    #1,D2
000042D8  1290      5645          move.b    (A0),(A1)
000042DA  2042      5646          move.l    D2,A0
000042DC  4210      5647          clr.b     (A0)
                    5648   vsprintf_23:
000042DE  2F03      5649          move.l    D3,-(A7)
000042E0  6100 04BE 5650          bsr       _strlen
000042E4  584F      5651          addq.w    #4,A7
000042E6  1800      5652          move.b    D0,D4
000042E8  206E 000C 5653          move.l    12(A6),A0
000042EC  1010      5654          move.b    (A0),D0
000042EE  4880      5655          ext.w     D0
000042F0  48C0      5656          ext.l     D0
000042F2  0C80 0000 5657          cmp.l     #115,D0
000042F6  0073      
000042F8  6618      5658          bne.s     vsprintf_48
000042FA  0C85 0000 5659          cmp.l     #0,D5
000042FE  0000      
00004300  6D10      5660          blt.s     vsprintf_48
00004302  4884      5661          ext.w     D4
00004304  48C4      5662          ext.l     D4
00004306  B885      5663          cmp.l     D5,D4
00004308  6F04      5664          ble.s     vsprintf_50
0000430A  1005      5665          move.b    D5,D0
0000430C  6002      5666          bra.s     vsprintf_51
                    5667   vsprintf_50:
0000430E  1004      5668          move.b    D4,D0
                    5669   vsprintf_51:
00004310  1800      5670          move.b    D0,D4
                    5671   vsprintf_48:
00004312  206E 000C 5672          move.l    12(A6),A0
00004316  1010      5673          move.b    (A0),D0
00004318  4880      5674          ext.w     D0
0000431A  48C0      5675          ext.l     D0
0000431C  0C80 0000 5676          cmp.l     #88,D0
00004320  0058      
00004322  6600 0026 5677          bne       vsprintf_56
00004326  41EE FFDC 5678          lea       -36(A6),A0
0000432A  2408      5679          move.l    A0,D2
                    5680   vsprintf_54:
0000432C  2042      5681          move.l    D2,A0
0000432E  4A10      5682          tst.b     (A0)
00004330  6718      5683          beq.s     vsprintf_56
00004332  2042      5684          move.l    D2,A0
00004334  1210      5685          move.b    (A0),D1
00004336  4881      5686          ext.w     D1
00004338  48C1      5687          ext.l     D1
0000433A  2F01      5688          move.l    D1,-(A7)
0000433C  6100 FAD2 5689          bsr       _toupper
00004340  584F      5690          addq.w    #4,A7
00004342  2042      5691          move.l    D2,A0
00004344  1080      5692          move.b    D0,(A0)
00004346  5282      5693          addq.l    #1,D2
00004348  60E2      5694          bra       vsprintf_54
                    5695   vsprintf_56:
0000434A  7E00      5696          moveq     #0,D7
0000434C  41EE FFD4 5697          lea       -44(A6),A0
00004350  2408      5698          move.l    A0,D2
00004352  206E 000C 5699          move.l    12(A6),A0
00004356  1010      5700          move.b    (A0),D0
00004358  4880      5701          ext.w     D0
0000435A  48C0      5702          ext.l     D0
0000435C  0C80 0000 5703          cmp.l     #100,D0
00004360  0064      
00004362  6714      5704          beq.s     vsprintf_59
00004364  206E 000C 5705          move.l    12(A6),A0
00004368  1010      5706          move.b    (A0),D0
0000436A  4880      5707          ext.w     D0
0000436C  48C0      5708          ext.l     D0
0000436E  0C80 0000 5709          cmp.l     #105,D0
00004372  0069      
00004374  6600 0076 5710          bne       vsprintf_65
                    5711   vsprintf_59:
00004378  4A2E FFCE 5712          tst.b     -50(A6)
0000437C  6612      5713          bne.s     vsprintf_62
0000437E  2043      5714          move.l    D3,A0
00004380  1010      5715          move.b    (A0),D0
00004382  4880      5716          ext.w     D0
00004384  48C0      5717          ext.l     D0
00004386  0C80 0000 5718          cmp.l     #45,D0
0000438A  002D      
0000438C  6600 002E 5719          bne       vsprintf_60
                    5720   vsprintf_62:
00004390  2043      5721          move.l    D3,A0
00004392  1010      5722          move.b    (A0),D0
00004394  4880      5723          ext.w     D0
00004396  48C0      5724          ext.l     D0
00004398  0C80 0000 5725          cmp.l     #45,D0
0000439C  002D      
0000439E  660E      5726          bne.s     vsprintf_63
000043A0  2043      5727          move.l    D3,A0
000043A2  5283      5728          addq.l    #1,D3
000043A4  2242      5729          move.l    D2,A1
000043A6  5282      5730          addq.l    #1,D2
000043A8  1290      5731          move.b    (A0),(A1)
000043AA  5304      5732          subq.b    #1,D4
000043AC  6008      5733          bra.s     vsprintf_64
                    5734   vsprintf_63:
000043AE  2042      5735          move.l    D2,A0
000043B0  5282      5736          addq.l    #1,D2
000043B2  10BC 002B 5737          move.b    #43,(A0)
                    5738   vsprintf_64:
000043B6  5287      5739          addq.l    #1,D7
000043B8  6000 0032 5740          bra       vsprintf_65
                    5741   vsprintf_60:
000043BC  4A2E FFCF 5742          tst.b     -49(A6)
000043C0  6700 002A 5743          beq       vsprintf_65
000043C4  2043      5744          move.l    D3,A0
000043C6  1010      5745          move.b    (A0),D0
000043C8  4880      5746          ext.w     D0
000043CA  48C0      5747          ext.l     D0
000043CC  0C80 0000 5748          cmp.l     #45,D0
000043D0  002D      
000043D2  660E      5749          bne.s     vsprintf_67
000043D4  2043      5750          move.l    D3,A0
000043D6  5283      5751          addq.l    #1,D3
000043D8  2242      5752          move.l    D2,A1
000043DA  5282      5753          addq.l    #1,D2
000043DC  1290      5754          move.b    (A0),(A1)
000043DE  5304      5755          subq.b    #1,D4
000043E0  6008      5756          bra.s     vsprintf_68
                    5757   vsprintf_67:
000043E2  2042      5758          move.l    D2,A0
000043E4  5282      5759          addq.l    #1,D2
000043E6  10BC 0020 5760          move.b    #32,(A0)
                    5761   vsprintf_68:
000043EA  5287      5762          addq.l    #1,D7
                    5763   vsprintf_65:
000043EC  4A2E FFD0 5764          tst.b     -48(A6)
000043F0  6700 0066 5765          beq       vsprintf_77
000043F4  206E 000C 5766          move.l    12(A6),A0
000043F8  1010      5767          move.b    (A0),D0
000043FA  4880      5768          ext.w     D0
000043FC  48C0      5769          ext.l     D0
000043FE  0C80 0000 5770          cmp.l     #111,D0
00004402  006F      
00004404  671A      5771          beq.s     vsprintf_73
00004406  6E0C      5772          bgt.s     vsprintf_76
00004408  0C80 0000 5773          cmp.l     #88,D0
0000440C  0058      
0000440E  6710      5774          beq.s     vsprintf_73
00004410  6000 0046 5775          bra       vsprintf_77
                    5776   vsprintf_76:
00004414  0C80 0000 5777          cmp.l     #120,D0
00004418  0078      
0000441A  6704      5778          beq.s     vsprintf_73
0000441C  6000 003A 5779          bra       vsprintf_77
                    5780   vsprintf_73:
00004420  2042      5781          move.l    D2,A0
00004422  5282      5782          addq.l    #1,D2
00004424  10BC 0030 5783          move.b    #48,(A0)
00004428  5287      5784          addq.l    #1,D7
0000442A  206E 000C 5785          move.l    12(A6),A0
0000442E  1010      5786          move.b    (A0),D0
00004430  4880      5787          ext.w     D0
00004432  48C0      5788          ext.l     D0
00004434  0C80 0000 5789          cmp.l     #120,D0
00004438  0078      
0000443A  6712      5790          beq.s     vsprintf_79
0000443C  206E 000C 5791          move.l    12(A6),A0
00004440  1010      5792          move.b    (A0),D0
00004442  4880      5793          ext.w     D0
00004444  48C0      5794          ext.l     D0
00004446  0C80 0000 5795          cmp.l     #88,D0
0000444A  0058      
0000444C  660A      5796          bne.s     vsprintf_77
                    5797   vsprintf_79:
0000444E  2042      5798          move.l    D2,A0
00004450  5282      5799          addq.l    #1,D2
00004452  10BC 0078 5800          move.b    #120,(A0)
00004456  5287      5801          addq.l    #1,D7
                    5802   vsprintf_77:
00004458  2042      5803          move.l    D2,A0
0000445A  4210      5804          clr.b     (A0)
0000445C  206E 000C 5805          move.l    12(A6),A0
00004460  1010      5806          move.b    (A0),D0
00004462  4880      5807          ext.w     D0
00004464  48C0      5808          ext.l     D0
00004466  0C80 0000 5809          cmp.l     #105,D0
0000446A  0069      
0000446C  6700 0076 5810          beq       vsprintf_82
00004470  6E42      5811          bgt.s     vsprintf_93
00004472  0C80 0000 5812          cmp.l     #99,D0
00004476  0063      
00004478  6700 0084 5813          beq       vsprintf_96
0000447C  6E1C      5814          bgt.s     vsprintf_94
0000447E  0C80 0000 5815          cmp.l     #88,D0
00004482  0058      
00004484  6700 005E 5816          beq       vsprintf_82
00004488  6E00 0184 5817          bgt       vsprintf_80
0000448C  0C80 0000 5818          cmp.l     #69,D0
00004490  0045      
00004492  6700 0050 5819          beq       vsprintf_82
00004496  6000 0176 5820          bra       vsprintf_80
                    5821   vsprintf_94:
0000449A  0C80 0000 5822          cmp.l     #101,D0
0000449E  0065      
000044A0  6700 0042 5823          beq       vsprintf_82
000044A4  6E00 0168 5824          bgt       vsprintf_80
000044A8  0C80 0000 5825          cmp.l     #100,D0
000044AC  0064      
000044AE  6734      5826          beq.s     vsprintf_82
000044B0  6000 015C 5827          bra       vsprintf_80
                    5828   vsprintf_93:
000044B4  0C80 0000 5829          cmp.l     #117,D0
000044B8  0075      
000044BA  6728      5830          beq.s     vsprintf_82
000044BC  6E1A      5831          bgt.s     vsprintf_95
000044BE  0C80 0000 5832          cmp.l     #115,D0
000044C2  0073      
000044C4  6700 0038 5833          beq       vsprintf_96
000044C8  6E00 0144 5834          bgt       vsprintf_80
000044CC  0C80 0000 5835          cmp.l     #111,D0
000044D0  006F      
000044D2  6710      5836          beq.s     vsprintf_82
000044D4  6000 0138 5837          bra       vsprintf_80
                    5838   vsprintf_95:
000044D8  0C80 0000 5839          cmp.l     #120,D0
000044DC  0078      
000044DE  6704      5840          beq.s     vsprintf_82
000044E0  6000 012C 5841          bra       vsprintf_80
                    5842   vsprintf_82:
000044E4  4A2E FFD2 5843          tst.b     -46(A6)
000044E8  6714      5844          beq.s     vsprintf_96
000044EA  4A2E FFCD 5845          tst.b     -51(A6)
000044EE  660E      5846          bne.s     vsprintf_96
000044F0  200D      5847          move.l    A5,D0
000044F2  9087      5848          sub.l     D7,D0
000044F4  4884      5849          ext.w     D4
000044F6  48C4      5850          ext.l     D4
000044F8  9084      5851          sub.l     D4,D0
000044FA  2D40 FFFC 5852          move.l    D0,-4(A6)
                    5853   vsprintf_96:
000044FE  202E FFFC 5854          move.l    -4(A6),D0
00004502  0C80 0000 5855          cmp.l     #0,D0
00004506  0000      
00004508  6C04      5856          bge.s     vsprintf_98
0000450A  42AE FFFC 5857          clr.l     -4(A6)
                    5858   vsprintf_98:
0000450E  4A2E FFCD 5859          tst.b     -51(A6)
00004512  6600 0030 5860          bne       vsprintf_104
00004516  4884      5861          ext.w     D4
00004518  48C4      5862          ext.l     D4
0000451A  2004      5863          move.l    D4,D0
0000451C  D0AE FFFC 5864          add.l     -4(A6),D0
00004520  D087      5865          add.l     D7,D0
00004522  1D40 FFD1 5866          move.b    D0,-47(A6)
                    5867   vsprintf_102:
00004526  102E FFD1 5868          move.b    -47(A6),D0
0000452A  4880      5869          ext.w     D0
0000452C  48C0      5870          ext.l     D0
0000452E  220D      5871          move.l    A5,D1
00004530  534D      5872          subq.w    #1,A5
00004532  B081      5873          cmp.l     D1,D0
00004534  6C0E      5874          bge.s     vsprintf_104
00004536  4878 0020 5875          pea       32
0000453A  2F0A      5876          move.l    A2,-(A7)
0000453C  4E93      5877          jsr       (A3)
0000453E  504F      5878          addq.w    #8,A7
00004540  5286      5879          addq.l    #1,D6
00004542  60E2      5880          bra       vsprintf_102
                    5881   vsprintf_104:
00004544  41EE FFD4 5882          lea       -44(A6),A0
00004548  2408      5883          move.l    A0,D2
                    5884   vsprintf_105:
0000454A  2042      5885          move.l    D2,A0
0000454C  4A10      5886          tst.b     (A0)
0000454E  6716      5887          beq.s     vsprintf_107
00004550  2042      5888          move.l    D2,A0
00004552  5282      5889          addq.l    #1,D2
00004554  1210      5890          move.b    (A0),D1
00004556  4881      5891          ext.w     D1
00004558  48C1      5892          ext.l     D1
0000455A  2F01      5893          move.l    D1,-(A7)
0000455C  2F0A      5894          move.l    A2,-(A7)
0000455E  4E93      5895          jsr       (A3)
00004560  504F      5896          addq.w    #8,A7
00004562  5286      5897          addq.l    #1,D6
00004564  60E4      5898          bra       vsprintf_105
                    5899   vsprintf_107:
00004566  202E FFFC 5900          move.l    -4(A6),D0
0000456A  1D40 FFD1 5901          move.b    D0,-47(A6)
                    5902   vsprintf_108:
0000456E  102E FFD1 5903          move.b    -47(A6),D0
00004572  532E FFD1 5904          subq.b    #1,-47(A6)
00004576  4A00      5905          tst.b     D0
00004578  670E      5906          beq.s     vsprintf_110
0000457A  4878 0030 5907          pea       48
0000457E  2F0A      5908          move.l    A2,-(A7)
00004580  4E93      5909          jsr       (A3)
00004582  504F      5910          addq.w    #8,A7
00004584  5286      5911          addq.l    #1,D6
00004586  60E6      5912          bra       vsprintf_108
                    5913   vsprintf_110:
00004588  2043      5914          move.l    D3,A0
0000458A  4A10      5915          tst.b     (A0)
0000458C  6700 0048 5916          beq       vsprintf_113
00004590  206E 000C 5917          move.l    12(A6),A0
00004594  1010      5918          move.b    (A0),D0
00004596  4880      5919          ext.w     D0
00004598  48C0      5920          ext.l     D0
0000459A  0C80 0000 5921          cmp.l     #115,D0
0000459E  0073      
000045A0  670C      5922          beq.s     vsprintf_116
000045A2  6E18      5923          bgt.s     vsprintf_119
000045A4  0C80 0000 5924          cmp.l     #99,D0
000045A8  0063      
000045AA  6702      5925          beq.s     vsprintf_116
000045AC  600E      5926          bra.s     vsprintf_119
                    5927   vsprintf_116:
000045AE  2005      5928          move.l    D5,D0
000045B0  5385      5929          subq.l    #1,D5
000045B2  0C80 0000 5930          cmp.l     #0,D0
000045B6  0000      
000045B8  6E02      5931          bgt.s     vsprintf_119
000045BA  6016      5932          bra.s     vsprintf_115
                    5933   vsprintf_119:
000045BC  2043      5934          move.l    D3,A0
000045BE  5283      5935          addq.l    #1,D3
000045C0  1210      5936          move.b    (A0),D1
000045C2  4881      5937          ext.w     D1
000045C4  48C1      5938          ext.l     D1
000045C6  2F01      5939          move.l    D1,-(A7)
000045C8  2F0A      5940          move.l    A2,-(A7)
000045CA  4E93      5941          jsr       (A3)
000045CC  504F      5942          addq.w    #8,A7
000045CE  5286      5943          addq.l    #1,D6
000045D0  6002      5944          bra.s     vsprintf_112
                    5945   vsprintf_115:
000045D2  6002      5946          bra.s     vsprintf_113
                    5947   vsprintf_112:
000045D4  60B2      5948          bra       vsprintf_110
                    5949   vsprintf_113:
000045D6  4A2E FFCD 5950          tst.b     -51(A6)
000045DA  6700 0030 5951          beq       vsprintf_125
000045DE  4884      5952          ext.w     D4
000045E0  48C4      5953          ext.l     D4
000045E2  2004      5954          move.l    D4,D0
000045E4  D0AE FFFC 5955          add.l     -4(A6),D0
000045E8  D087      5956          add.l     D7,D0
000045EA  1D40 FFD1 5957          move.b    D0,-47(A6)
                    5958   vsprintf_123:
000045EE  102E FFD1 5959          move.b    -47(A6),D0
000045F2  4880      5960          ext.w     D0
000045F4  48C0      5961          ext.l     D0
000045F6  220D      5962          move.l    A5,D1
000045F8  534D      5963          subq.w    #1,A5
000045FA  B081      5964          cmp.l     D1,D0
000045FC  6C0E      5965          bge.s     vsprintf_125
000045FE  4878 0020 5966          pea       32
00004602  2F0A      5967          move.l    A2,-(A7)
00004604  4E93      5968          jsr       (A3)
00004606  504F      5969          addq.w    #8,A7
00004608  5386      5970          subq.l    #1,D6
0000460A  60E2      5971          bra       vsprintf_123
                    5972   vsprintf_125:
0000460C  6014      5973          bra.s     vsprintf_81
                    5974   vsprintf_80:
0000460E  206E 000C 5975          move.l    12(A6),A0
00004612  1210      5976          move.b    (A0),D1
00004614  4881      5977          ext.w     D1
00004616  48C1      5978          ext.l     D1
00004618  2F01      5979          move.l    D1,-(A7)
0000461A  2F0A      5980          move.l    A2,-(A7)
0000461C  4E93      5981          jsr       (A3)
0000461E  504F      5982          addq.w    #8,A7
00004620  5286      5983          addq.l    #1,D6
                    5984   vsprintf_81:
00004622  52AE 000C 5985          addq.l    #1,12(A6)
                    5986   vsprintf_2:
00004626  6000 F9D6 5987          bra       vsprintf_1
                    5988   vsprintf_3:
0000462A  4A92      5989          tst.l     (A2)
0000462C  6710      5990          beq.s     vsprintf_126
0000462E  4201      5991          clr.b     D1
00004630  C2BC 0000 5992          and.l     #255,D1
00004634  00FF      
00004636  2F01      5993          move.l    D1,-(A7)
00004638  2F0A      5994          move.l    A2,-(A7)
0000463A  4E93      5995          jsr       (A3)
0000463C  504F      5996          addq.w    #8,A7
                    5997   vsprintf_126:
0000463E  2006      5998          move.l    D6,D0
00004640  4CDF 3CFC 5999          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004644  4E5E      6000          unlk      A6
00004646  4E75      6001          rts
                    6002   @itoa_convert:
00004648  4E56 0000 6003          link      A6,#0
0000464C  48E7 3C00 6004          movem.l   D2/D3/D4/D5,-(A7)
00004650  242E 0008 6005          move.l    8(A6),D2
00004654  262E 0010 6006          move.l    16(A6),D3
00004658  2A2E 000C 6007          move.l    12(A6),D5
0000465C  2F05      6008          move.l    D5,-(A7)
0000465E  2F03      6009          move.l    D3,-(A7)
00004660  6100 0190 6010          bsr       ULDIV
00004664  202F 0004 6011          move.l    4(A7),D0
00004668  504F      6012          addq.w    #8,A7
0000466A  2800      6013          move.l    D0,D4
0000466C  BA83      6014          cmp.l     D3,D5
0000466E  651A      6015          blo.s     @itoa_convert_1
00004670  2F03      6016          move.l    D3,-(A7)
00004672  2F05      6017          move.l    D5,-(A7)
00004674  2F03      6018          move.l    D3,-(A7)
00004676  6100 017A 6019          bsr       ULDIV
0000467A  2217      6020          move.l    (A7),D1
0000467C  504F      6021          addq.w    #8,A7
0000467E  2F01      6022          move.l    D1,-(A7)
00004680  2F02      6023          move.l    D2,-(A7)
00004682  61C4      6024          bsr       @itoa_convert
00004684  DEFC 000C 6025          add.w     #12,A7
00004688  2400      6026          move.l    D0,D2
                    6027   @itoa_convert_1:
0000468A  0C84 0000 6028          cmp.l     #9,D4
0000468E  0009      
00004690  6E0A      6029          bgt.s     @itoa_convert_3
00004692  2004      6030          move.l    D4,D0
00004694  0680 0000 6031          add.l     #48,D0
00004698  0030      
0000469A  600E      6032          bra.s     @itoa_convert_4
                    6033   @itoa_convert_3:
0000469C  2004      6034          move.l    D4,D0
0000469E  0680 0000 6035          add.l     #97,D0
000046A2  0061      
000046A4  0480 0000 6036          sub.l     #10,D0
000046A8  000A      
                    6037   @itoa_convert_4:
000046AA  2042      6038          move.l    D2,A0
000046AC  1080      6039          move.b    D0,(A0)
000046AE  2002      6040          move.l    D2,D0
000046B0  5280      6041          addq.l    #1,D0
000046B2  4CDF 003C 6042          movem.l   (A7)+,D2/D3/D4/D5
000046B6  4E5E      6043          unlk      A6
000046B8  4E75      6044          rts
                    6045   _ltoa:
000046BA  4E56 0000 6046          link      A6,#0
000046BE  48E7 3C00 6047          movem.l   D2/D3/D4/D5,-(A7)
000046C2  242E 0008 6048          move.l    8(A6),D2
000046C6  262E 000C 6049          move.l    12(A6),D3
000046CA  2A2E 0010 6050          move.l    16(A6),D5
000046CE  2803      6051          move.l    D3,D4
000046D0  0C85 0000 6052          cmp.l     #2,D5
000046D4  0002      
000046D6  6D08      6053          blt.s     ltoa_3
000046D8  0C85 0000 6054          cmp.l     #36,D5
000046DC  0024      
000046DE  6F06      6055          ble.s     ltoa_1
                    6056   ltoa_3:
000046E0  2003      6057          move.l    D3,D0
000046E2  6000 0052 6058          bra       ltoa_4
                    6059   ltoa_1:
000046E6  0C85 0000 6060          cmp.l     #10,D5
000046EA  000A      
000046EC  6600 0032 6061          bne       ltoa_5
000046F0  0C82 0000 6062          cmp.l     #0,D2
000046F4  0000      
000046F6  6C28      6063          bge.s     ltoa_5
000046F8  2002      6064          move.l    D2,D0
000046FA  4480      6065          neg.l     D0
000046FC  2400      6066          move.l    D0,D2
000046FE  0C82 0000 6067          cmp.l     #0,D2
00004702  0000      
00004704  6C12      6068          bge.s     ltoa_7
00004706  4879 0000 6069          pea       @itoa_1
0000470A  4BEA      
0000470C  2F03      6070          move.l    D3,-(A7)
0000470E  6100 00D2 6071          bsr       _strcpy
00004712  504F      6072          addq.w    #8,A7
00004714  2003      6073          move.l    D3,D0
00004716  601E      6074          bra.s     ltoa_4
                    6075   ltoa_7:
00004718  2044      6076          move.l    D4,A0
0000471A  5284      6077          addq.l    #1,D4
0000471C  10BC 002D 6078          move.b    #45,(A0)
                    6079   ltoa_5:
00004720  2F05      6080          move.l    D5,-(A7)
00004722  2F02      6081          move.l    D2,-(A7)
00004724  2F04      6082          move.l    D4,-(A7)
00004726  6100 FF20 6083          bsr       @itoa_convert
0000472A  DEFC 000C 6084          add.w     #12,A7
0000472E  2800      6085          move.l    D0,D4
00004730  2044      6086          move.l    D4,A0
00004732  4210      6087          clr.b     (A0)
00004734  2003      6088          move.l    D3,D0
                    6089   ltoa_4:
00004736  4CDF 003C 6090          movem.l   (A7)+,D2/D3/D4/D5
0000473A  4E5E      6091          unlk      A6
0000473C  4E75      6092          rts
                    6093   _ultoa:
0000473E  4E56 0000 6094          link      A6,#0
00004742  48E7 3800 6095          movem.l   D2/D3/D4,-(A7)
00004746  262E 0010 6096          move.l    16(A6),D3
0000474A  282E 000C 6097          move.l    12(A6),D4
0000474E  2404      6098          move.l    D4,D2
00004750  0C83 0000 6099          cmp.l     #2,D3
00004754  0002      
00004756  6D08      6100          blt.s     ultoa_3
00004758  0C83 0000 6101          cmp.l     #36,D3
0000475C  0024      
0000475E  6F04      6102          ble.s     ultoa_1
                    6103   ultoa_3:
00004760  2004      6104          move.l    D4,D0
00004762  6018      6105          bra.s     ultoa_4
                    6106   ultoa_1:
00004764  2F03      6107          move.l    D3,-(A7)
00004766  2F2E 0008 6108          move.l    8(A6),-(A7)
0000476A  2F02      6109          move.l    D2,-(A7)
0000476C  6100 FEDA 6110          bsr       @itoa_convert
00004770  DEFC 000C 6111          add.w     #12,A7
00004774  2400      6112          move.l    D0,D2
00004776  2042      6113          move.l    D2,A0
00004778  4210      6114          clr.b     (A0)
0000477A  2004      6115          move.l    D4,D0
                    6116   ultoa_4:
0000477C  4CDF 001C 6117          movem.l   (A7)+,D2/D3/D4
00004780  4E5E      6118          unlk      A6
00004782  4E75      6119          rts
                    6120   _itoa:
00004784  4E56 0000 6121          link      A6,#0
00004788  2F2E 0010 6122          move.l    16(A6),-(A7)
0000478C  2F2E 000C 6123          move.l    12(A6),-(A7)
00004790  2F2E 0008 6124          move.l    8(A6),-(A7)
00004794  6100 FF24 6125          bsr       _ltoa
00004798  DEFC 000C 6126          add.w     #12,A7
0000479C  4E5E      6127          unlk      A6
0000479E  4E75      6128          rts
                    6129   _strlen:
000047A0  206F 0004 6130          move.l    (4,A7),A0
000047A4  2248      6131          move.l    A0,A1
                    6132   strlen_1:
000047A6  4A19      6133          tst.b     (A1)+
000047A8  66FC      6134          bne       strlen_1
000047AA  2009      6135          move.l    A1,D0
000047AC  9088      6136          sub.l     A0,D0
000047AE  5380      6137          subq.l    #1,D0
000047B0  4E75      6138          rts
                    6139   _putch:
000047B2  4E56 0000 6140          link      A6,#0
000047B6  48E7 2000 6141          movem.l   D2,-(A7)
000047BA  242E 0008 6142          move.l    8(A6),D2
000047BE  0C82 0000 6143          cmp.l     #10,D2
000047C2  000A      
000047C4  660A      6144          bne.s     putch_1
000047C6  4878 000D 6145          pea       13
000047CA  6100 C144 6146          bsr       __putch
000047CE  584F      6147          addq.w    #4,A7
                    6148   putch_1:
000047D0  2F02      6149          move.l    D2,-(A7)
000047D2  6100 C13C 6150          bsr       __putch
000047D6  584F      6151          addq.w    #4,A7
000047D8  2002      6152          move.l    D2,D0
000047DA  4CDF 0004 6153          movem.l   (A7)+,D2
000047DE  4E5E      6154          unlk      A6
000047E0  4E75      6155          rts
                    6156   _strcpy:
000047E2  206F 0004 6157          move.l    (4,A7),A0
000047E6  226F 0008 6158          move.l    (8,A7),A1
000047EA  2008      6159          move.l    A0,D0
                    6160   strcpy_1:
000047EC  10D9      6161          move.b    (A1)+,(A0)+
000047EE  66FC      6162          bne       strcpy_1
000047F0  4E75      6163          rts
                    6164   ULDIV:
000047F2  4E56 0000 6165          link    A6,#0
000047F6  48E7 C000 6166          movem.l D0/D1,-(A7)
000047FA  222E 0008 6167          move.l  8(A6),D1
000047FE  202E 000C 6168          move.l  12(A6),D0
00004802  6036      6169          bra.s   ldiv_3
                    6170   LDIV:
00004804  4E56 0000 6171          link    A6,#0
00004808  48E7 C000 6172          movem.l D0/D1,-(A7)
0000480C  222E 0008 6173          move.l  8(A6),D1
00004810  202E 000C 6174          move.l  12(A6),D0
00004814  4A80      6175          tst.l   D0
00004816  6A0E      6176          bpl.s   ldiv_1
00004818  4480      6177          neg.l   D0
0000481A  4A81      6178          tst.l   D1
0000481C  6A14      6179          bpl.s   ldiv_2
0000481E  4481      6180          neg.l   D1
00004820  612A      6181          bsr.s   dodiv
00004822  4481      6182          neg.l   D1
00004824  6016      6183          bra.s   ldiv_4
                    6184   ldiv_1:
00004826  4A81      6185          tst.l   D1
00004828  6A10      6186          bpl.s   ldiv_3
0000482A  4481      6187          neg.l   D1
0000482C  611E      6188          bsr.s   dodiv
0000482E  4480      6189          neg.l   D0
00004830  600A      6190          bra.s   ldiv_4
                    6191   ldiv_2:
00004832  6118      6192          bsr.s   dodiv
00004834  4480      6193          neg.l   D0
00004836  4481      6194          neg.l   D1
00004838  6002      6195          bra.s   ldiv_4
                    6196   ldiv_3:
0000483A  6110      6197          bsr.s   dodiv
                    6198   ldiv_4:
0000483C  2D40 0008 6199          move.l  D0,8(A6)
00004840  2D41 000C 6200          move.l  D1,12(A6)
00004844  4CDF 0003 6201          movem.l (A7)+,D0/D1
00004848  4E5E      6202          unlk    A6
0000484A  4E75      6203          rts
                    6204   dodiv:
0000484C  0C81 0000 6205          cmpi.l  #$FFFF,D1
00004850  FFFF      
00004852  6236      6206          bhi.s   dodiv_2
00004854  0C80 0000 6207          cmpi.l  #$FFFF,D0
00004858  FFFF      
0000485A  6210      6208          bhi.s   dodiv_1
0000485C  80C1      6209          divu    D1,D0
0000485E  2200      6210          move.l  D0,D1
00004860  4241      6211          clr.w   D1
00004862  4841      6212          swap    D1
00004864  0280 0000 6213          andi.l  #$FFFF,D0
00004868  FFFF      
0000486A  4E75      6214          rts
                    6215   dodiv_1:
0000486C  48A7 A000 6216          movem.w D0/D2,-(A7)
00004870  4240      6217          clr.w   D0
00004872  4840      6218          swap    D0
00004874  80C1      6219          divu    D1,D0
00004876  3400      6220          move.w  D0,D2
00004878  301F      6221          move.w  (A7)+,D0
0000487A  80C1      6222          divu    D1,D0
0000487C  4840      6223          swap    D0
0000487E  4281      6224          clr.l   D1
00004880  3200      6225          move.w  D0,D1
00004882  3002      6226          move.w  D2,D0
00004884  4840      6227          swap    D0
00004886  341F      6228          move.w  (A7)+,D2
00004888  4E75      6229          rts
                    6230   dodiv_2:
0000488A  48E7 3800 6231          movem.l D2/D3/D4,-(A7)
0000488E  2401      6232          move.l  D1,D2
00004890  4242      6233          clr.w   D2
00004892  4842      6234          swap    D2
00004894  5282      6235          addq.l  #1,D2
00004896  2600      6236          move.l  D0,D3
00004898  2801      6237          move.l  D1,D4
0000489A  2202      6238          move.l  D2,D1
0000489C  61CE      6239          bsr.s   dodiv_1
0000489E  2204      6240          move.l  D4,D1
000048A0  82C2      6241          divu    D2,D1
000048A2  80C1      6242          divu    D1,D0
000048A4  0280 0000 6243          andi.l  #$FFFF,D0
000048A8  FFFF      
                    6244   dodiv_3:
000048AA  2204      6245          move.l  D4,D1
000048AC  2404      6246          move.l  D4,D2
000048AE  4842      6247          swap    D2
000048B0  C2C0      6248          mulu    D0,D1
000048B2  C4C0      6249          mulu    D0,D2
000048B4  4842      6250          swap    D2
000048B6  D282      6251          add.l   D2,D1
000048B8  9283      6252          sub.l   D3,D1
000048BA  620A      6253          bhi.s   dodiv_4
000048BC  4481      6254          neg.l   D1
000048BE  B881      6255          cmp.l   D1,D4
000048C0  6208      6256          bhi.s   dodiv_5
000048C2  5280      6257          addq.l  #1,D0
000048C4  60E4      6258          bra.s   dodiv_3
                    6259   dodiv_4:
000048C6  5380      6260          subq.l  #1,D0
000048C8  60E0      6261          bra.s   dodiv_3
                    6262   dodiv_5:
000048CA  4CDF 001C 6263          movem.l (A7)+,D2/D3/D4
000048CE  4E75      6264          rts
                    6265          section   const
                    6266   
                    6267   @m68kde~1_1:
000048D0  0D0A 556E 6268          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
000048D4  6B6E 6F77 
000048D8  6E20 436F 
000048DC  6D        
000048DD  6D61 6E64 6269          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
000048E1  2E2E 2E2E 
000048E5  2E0D 0A00 
                    6270   @m68kde~1_2:
000048EA  0D0A 5072 6271          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
000048EE  6F67 7261 
000048F2  6D20 456E 
000048F6  64        
000048F7  6564 2028 6272          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
000048FB  5452 4150 
000048FF  2023 3135 
00004903  292E      
00004905  2E2E 2E00 6273          dc.b      46,46,46,0
                    6274   @m68kde~1_3:
0000490A  0D0A 2D2D 6275          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
0000490E  2D2D 2D2D 
00004912  2D2D 2D2D 
00004916  2D2D 2D   
00004919  2D2D 2D2D 6276          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000491D  2D2D 2D2D 
00004921  2D2D 2D2D 
00004925  2D2D 2D   
00004928  2D2D 2D2D 6277          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000492C  2D2D 2D2D 
00004930  2D2D 2D2D 
00004934  2D2D 2D   
00004937  2D2D 2D2D 6278          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000493B  2D2D 2D2D 
0000493F  2D2D 2D2D 
00004943  2D2D 2D   
00004946  2D2D 2D2D 6279          dc.b      45,45,45,45,45,45,0
0000494A  2D2D 00   
                    6280   @m68kde~1_4:
0000494E  0D0A 2020 6281          dc.b      13,10,32,32,70,105,110,97,108,32,80,114,111
00004952  4669 6E61 
00004956  6C20 5072 
0000495A  6F        
0000495B  6A65 6374 6282          dc.b      106,101,99,116,0
0000495F  00        
                    6283   @m68kde~1_5:
00004960  0D0A 2020 6284          dc.b      13,10,32,32,84,32,32,32,32,45,32,82,117,110
00004964  5420 2020 
00004968  202D 2052 
0000496C  756E      
0000496E  2043 6F73 6285          dc.b      32,67,111,115,109,105,99,32,73,109,112,97,108
00004972  6D69 6320 
00004976  496D 7061 
0000497A  6C        
0000497B  6120 4761 6286          dc.b      97,32,71,97,109,101,0
0000497F  6D65 00   
                    6287   @m68kde~1_6:
00004982  0D0A 2020 6288          dc.b      13,10,32,32,71,32,32,32,32,45,32,82,117,110
00004986  4720 2020 
0000498A  202D 2052 
0000498E  756E      
00004990  2047 7261 6289          dc.b      32,71,114,97,112,104,105,99,115,32,84,101,115
00004994  7068 6963 
00004998  7320 5465 
0000499C  73        
0000499D  7400      6290          dc.b      116,0
                    6291   @m68kde~1_7:
000049A0  0D0A 2300 6292          dc.b      13,10,35,0
                    6293   @m68kde~1_8:
000049A4  0A52 756E 6294          dc.b      10,82,117,110,110,105,110,103,32,67,111,115
000049A8  6E69 6E67 
000049AC  2043 6F73 
000049B0  6D69 6320 6295          dc.b      109,105,99,32,73,109,112,97,108,97,115,32,71
000049B4  496D 7061 
000049B8  6C61 7320 
000049BC  47        
000049BD  616D 650A 6296          dc.b      97,109,101,10,0
000049C1  00        
                    6297   @m68kde~1_9:
000049C2  0A52 756E 6298          dc.b      10,82,117,110,110,105,110,103,32,71,114,97,112
000049C6  6E69 6E67 
000049CA  2047 7261 
000049CE  70        
000049CF  6869 6373 6299          dc.b      104,105,99,115,32,84,101,115,116,10,0
000049D3  2054 6573 
000049D7  740A 00   
                    6300   @m68kde~1_10:
000049DA  0D0A 0D0A 6301          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000049DE  5072 6F67 
000049E2  7261 6D20 
000049E6  41        
000049E7  424F 5254 6302          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
000049EB  2021 2121 
000049EF  2121 210D 
000049F3  0A00      
                    6303   @m68kde~1_11:
000049F6  2573 0D0A 6304          dc.b      37,115,13,10,0
000049FA  00        
                    6305   @m68kde~1_12:
000049FC  0D0A 0D0A 6306          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004A00  5072 6F67 
00004A04  7261 6D20 
00004A08  41        
00004A09  424F 5254 6307          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004A0D  2021 2121 
00004A11  2121 00   
                    6308   @m68kde~1_13:
00004A14  0D0A 556E 6309          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004A18  6861 6E64 
00004A1C  6C65 6420 
00004A20  49        
00004A21  6E74 6572 6310          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004A25  7275 7074 
00004A29  3A20 4952 
00004A2D  5125 6420 6311          dc.b      81,37,100,32,33,33,33,33,33,0
00004A31  2121 2121 
00004A35  2100      
                    6312   @m68kde~1_14:
00004A38  4144 4452 6313          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004A3C  4553 5320 
00004A40  4552 524F 
00004A44  523A 20   
00004A47  3136 206F 6314          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004A4B  7220 3332 
00004A4F  2042 6974 
00004A53  2054      
00004A55  7261 6E73 6315          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004A59  6665 7220 
00004A5D  746F 2F66 
00004A61  726F 6D20 6316          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004A65  616E 204F 
00004A69  4444 2041 
00004A6D  64        
00004A6E  6472 6573 6317          dc.b      100,114,101,115,115,46,46,46,46,0
00004A72  732E 2E2E 
00004A76  2E00      
                    6318   @m68kde~1_15:
00004A78  556E 6861 6319          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004A7C  6E64 6C65 
00004A80  6420 5472 
00004A84  6170 2021 6320          dc.b      97,112,32,33,33,33,33,33,0
00004A88  2121 2121 
00004A8C  00        
                    6321   @m68kde~1_16:
00004A8E  4255 5320 6322          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004A92  4572 726F 
00004A96  7221 00   
                    6323   @m68kde~1_17:
00004A9A  4144 4452 6324          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004A9E  4553 5320 
00004AA2  4572 726F 
00004AA6  7221      
00004AA8  00        6325          dc.b      0
                    6326   @m68kde~1_18:
00004AAA  494C 4C45 6327          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004AAE  4741 4C20 
00004AB2  494E 5354 
00004AB6  5255 43   
00004AB9  5449 4F4E 6328          dc.b      84,73,79,78,0
00004ABD  00        
                    6329   @m68kde~1_19:
00004ABE  4449 5649 6330          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004AC2  4445 2042 
00004AC6  5920 5A45 
00004ACA  524F 00   
                    6331   @m68kde~1_20:
00004ACE  2743 484B 6332          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004AD2  2720 494E 
00004AD6  5354 5255 
00004ADA  4354 49   
00004ADD  4F4E 00   6333          dc.b      79,78,0
                    6334   @m68kde~1_21:
00004AE0  5452 4150 6335          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004AE4  5620 494E 
00004AE8  5354 5255 
00004AEC  4354 49   
00004AEF  4F4E 00   6336          dc.b      79,78,0
                    6337   @m68kde~1_22:
00004AF2  5052 4956 6338          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004AF6  494C 4547 
00004AFA  4520 5649 
00004AFE  4F4C 41   
00004B01  5449 4F4E 6339          dc.b      84,73,79,78,0
00004B05  00        
                    6340   @m68kde~1_23:
00004B06  554E 494E 6341          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004B0A  4954 4941 
00004B0E  4C49 5345 
00004B12  4420 49   
00004B15  5251 00   6342          dc.b      82,81,0
                    6343   @m68kde~1_24:
00004B18  5350 5552 6344          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004B1C  494F 5553 
00004B20  2049 5251 
00004B24  00        
                    6345   @m68kde~1_25:
00004B26  4445 312D 6346          dc.b      68,69,49,45,54,56,107,32,49,53,47,49,49,47,50
00004B2A  3638 6B20 
00004B2E  3135 2F31 
00004B32  312F 32   
00004B35  3032 3420 6347          dc.b      48,50,52,32,49,52,58,52,52,0
00004B39  3134 3A34 
00004B3D  3400      
                    6348   @m68kde~1_26:
00004B40  436F 7079 6349          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00004B44  7269 6768 
00004B48  7420 2843 
00004B4C  2920 504A 6350          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00004B50  2044 6176 
00004B54  6965 7320 
00004B58  3230      
00004B5A  3136 00   6351          dc.b      49,54,0
                    6352   @m68kde~1_27:
00004B5E  5961 6972 6353          dc.b      89,97,105,114,32,76,105,110,110,0
00004B62  204C 696E 
00004B66  6E00      
                    6354   @m68kde~1_28:
00004B68  0D0A 2573 6355          dc.b      13,10,37,115,0
00004B6C  00        
                    6356   @m68kde~1_29:
00004B6E  0D0A 2573 6357          dc.b      13,10,37,115,0
00004B72  00        
                    6358   @m68kde~1_30:
00004B74  0D0A 2573 6359          dc.b      13,10,37,115,0
00004B78  00        
                    6360   @graphi~1_1:
00004B7A  4845 4C4C 6361          dc.b      72,69,76,76,79,32,87,79,82,76,68,0
00004B7E  4F20 574F 
00004B82  524C 4400 
                    6362   @cosmic~1_1:
00004B86  504C 4159 6363          dc.b      80,76,65,89,69,82,32,49,0
00004B8A  4552 2031 
00004B8E  00        
                    6364   @cosmic~1_2:
00004B90  202A 2A2A 6365          dc.b      32,42,42,42,42,42,42,42,42,42,42,42,42,42,42
00004B94  2A2A 2A2A 
00004B98  2A2A 2A2A 
00004B9C  2A2A 2A   
00004B9F  2A20 00   6366          dc.b      42,32,0
                    6367   @cosmic~1_3:
00004BA2  2A2A 2A20 6368          dc.b      42,42,42,32,32,32,32,32,32,32,32,32,32,32,42
00004BA6  2020 2020 
00004BAA  2020 2020 
00004BAE  2020 2A   
00004BB1  2A2A 00   6369          dc.b      42,42,0
                    6370   @cosmic~1_4:
00004BB4  2A2A 2020 6371          dc.b      42,42,32,32,71,65,77,69,32,79,86,69,82,32,32
00004BB8  4741 4D45 
00004BBC  204F 5645 
00004BC0  5220 20   
00004BC3  2A2A 00   6372          dc.b      42,42,0
                    6373   @cosmic~1_5:
00004BC6  2A2A 2A20 6374          dc.b      42,42,42,32,32,32,32,32,32,32,32,32,32,32,42
00004BCA  2020 2020 
00004BCE  2020 2020 
00004BD2  2020 2A   
00004BD5  2A2A 00   6375          dc.b      42,42,0
                    6376   @cosmic~1_6:
00004BD8  202A 2A2A 6377          dc.b      32,42,42,42,42,42,42,42,42,42,42,42,42,42,42
00004BDC  2A2A 2A2A 
00004BE0  2A2A 2A2A 
00004BE4  2A2A 2A   
00004BE7  2A20 00   6378          dc.b      42,32,0
                    6379          section   data
00004BEA            6380                   align
          0000 4BEA 6381   DataStart       equ       *
                    6382   
                    6383   *********************************************************************************************************
                    6384   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    6385   * to ram as part of the CStart routine in this file
                    6386   *********************************************************************************************************
                    6387   
                    6388   @itoa_1:
00004BEA  2D32 3134 6389          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00004BEE  3734 3833 
00004BF2  3634 3800 
                    6390          section   bss
00004BF6            6391                   align
          0000 4BF6 6392   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    6393   
                    6394   *********************************************************************************************************
                    6395   * Section for Uninitialised Data held in ROM as constants
                    6396   *********************************************************************************************************
                    6397   
08030000            6398                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 6399   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    6400   
                    6401   
08030000            6402   bss             org       bss
                    6403   
                    6404   *********************************************************************************************************
                    6405   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    6406   * install the exception handler using the C function InstallExceptionHandler()
                    6407   *********************************************************************************************************
                    6408   
                    6409   
                    6410   
08030000            6411   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            6412   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            6413   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            6414   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            6415   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            6416   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            6417   VCheck           ds.l    1      ditto
0803001C            6418   VTrapV           ds.l    1      ditto
08030020            6419   VPrivilege       ds.l    1      ditto
08030024            6420   VTrace           ds.l    1
08030028            6421   VLine1010emul    ds.l    1
0803002C            6422   VLine1111emul    ds.l    1
08030030            6423   VUnassigned1     ds.l    1
08030034            6424   VUnassigned2     ds.l    1
08030038            6425   VUnassigned3     ds.l    1
0803003C            6426   VUninit_IRQ      ds.l    1
08030040            6427   VUnassigned4     ds.l    1
08030044            6428   VUnassigned5     ds.l    1
08030048            6429   VUnassigned6     ds.l    1
0803004C            6430   VUnassigned7     ds.l    1
08030050            6431   VUnassigned8     ds.l    1
08030054            6432   VUnassigned9     ds.l    1
08030058            6433   VUnassigned10    ds.l    1
0803005C            6434   VUnassigned11    ds.l    1
08030060            6435   VSpuriousIRQ     ds.l    1
                    6436   
                    6437   * Interrupt handlers Vector 25-31
08030064            6438   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            6439   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            6440   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            6441   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            6442   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            6443   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            6444   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6445   
                    6446   * Trap Handler vectors 32-47
08030080            6447   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            6448   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            6449   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            6450   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            6451   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            6452   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            6453   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            6454   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            6455   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            6456   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            6457   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            6458   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            6459   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            6460   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            6461   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            6462   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6463   
                    6464   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    6465   
                    6466   ***********************************************************************************************************
                    6467   * Other Variables
                    6468   ***********************************************************************************************************
                    6469   *__DebugA5       ds.l    1
                    6470   *__UserA5        ds.l    1
                    6471   
                    6472   ***********************************************************************************************************
080300C0            6473   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            6474   __allocp:       ds.l    0       ; start of allocation units
080300C4            6475   __heap:         ds.l    0       ; pointers for malloc functions
                    6476   
                    6477   *__himem:       ds.l    himem            ; highest memory location + 1
                    6478   *__stklen:      ds.l    stklen           ; default stack size
                    6479   
                    6480   *********************************************************************************************************
                    6481   * Section for Heap
                    6482   *********************************************************************************************************
                    6483   
                    6484   _i:
080300C4            6485          ds.b      4
                    6486   _x:
080300C8            6487          ds.b      4
                    6488   _y:
080300CC            6489          ds.b      4
                    6490   _z:
080300D0            6491          ds.b      4
                    6492   _PortA_Count:
080300D4            6493          ds.b      4
                    6494   _Trace:
080300D8            6495          ds.b      4
                    6496   _GoFlag:
080300DC            6497          ds.b      4
                    6498   _Echo:
080300E0            6499          ds.b      4
                    6500   _d0:
080300E4            6501          ds.b      4
                    6502   _d1:
080300E8            6503          ds.b      4
                    6504   _d2:
080300EC            6505          ds.b      4
                    6506   _d3:
080300F0            6507          ds.b      4
                    6508   _d4:
080300F4            6509          ds.b      4
                    6510   _d5:
080300F8            6511          ds.b      4
                    6512   _d6:
080300FC            6513          ds.b      4
                    6514   _d7:
08030100            6515          ds.b      4
                    6516   _a0:
08030104            6517          ds.b      4
                    6518   _a1:
08030108            6519          ds.b      4
                    6520   _a2:
0803010C            6521          ds.b      4
                    6522   _a3:
08030110            6523          ds.b      4
                    6524   _a4:
08030114            6525          ds.b      4
                    6526   _a5:
08030118            6527          ds.b      4
                    6528   _a6:
0803011C            6529          ds.b      4
                    6530   _PC:
08030120            6531          ds.b      4
                    6532   _SSP:
08030124            6533          ds.b      4
                    6534   _USP:
08030128            6535          ds.b      4
                    6536   _SR:
0803012C            6537          ds.b      2
                    6538   _BreakPointAddress:
0803012E            6539          ds.b      32
                    6540   _BreakPointInstruction:
0803014E            6541          ds.b      16
                    6542   _BreakPointSetOrCleared:
0803015E            6543          ds.b      32
                    6544   _InstructionSize:
0803017E            6545          ds.b      4
                    6546   _WatchPointAddress:
08030182            6547          ds.b      32
                    6548   _WatchPointSetOrCleared:
080301A2            6549          ds.b      32
                    6550   _clock_count_ms:
080301C2            6551          ds.b      4
                    6552   _TempString:
080301C6            6553          ds.b      100
                    6554   _graphics_font8x8:
0803022A            6555          ds.b      504
                    6556   _FIRE1:
08030422            6557          ds.b      4
                    6558   _LEFT1:
08030426            6559          ds.b      4
                    6560   _RIGHT1:
0803042A            6561          ds.b      4
                    6562   _this_mode:
0803042E            6563          ds.b      2
                    6564   _next_mode:
08030430            6565          ds.b      2
                    6566   _enemy_index:
08030432            6567          ds.b      1
                    6568   _num_enemies:
08030434            6569          ds.b      1
                    6570   _player_x:
08030436            6571          ds.b      1
                    6572   _bullet_x:
08030438            6573          ds.b      1
                    6574   _bullet_y:
0803043A            6575          ds.b      1
                    6576   _bomb_x:
0803043C            6577          ds.b      1
                    6578   _bomb_y:
0803043E            6579          ds.b      1
                    6580   _attract:
08030440            6581          ds.b      1
                    6582   _credits:
08030442            6583          ds.b      1
                    6584   _curplayer:
08030444            6585          ds.b      1
                    6586   _score:
08030446            6587          ds.b      2
                    6588   _lives:
08030448            6589          ds.b      1
                    6590   _enemies:
0803044A            6591          ds.b      84
                    6592   _font8x8:
0803049E            6593          ds.b      504
                    6594   _player_bitmap:
08030696            6595          ds.b      56
                    6596   _bomb_bitmap:
080306CE            6597          ds.b      7
                    6598   _bullet_bitmap:
080306D6            6599          ds.b      4
                    6600   _enemy1_bitmap:
080306DA            6601          ds.b      34
                    6602   _enemy2_bitmap:
080306FC            6603          ds.b      34
                    6604   _enemy3_bitmap:
0803071E            6605          ds.b      34
                    6606   _enemy4_bitmap:
08030740            6607          ds.b      34
                    6608   _enemy_bitmaps:
08030762            6609          ds.b      16
                    6610   _seed:
08030772            6611          ds.b      4
                    6612   _frame:
08030776            6613          ds.b      1
                    6614          section   heap
08030778            6615                   align
          0803 0778 6616   bssEnd          equ *                   end of storage space for unitialised variables
                    6617   *                                       we have to copy all initialised variable from rom to here at startup
          0803 0778 6618   heap   equ       *
08030778            6619                    align
          0000 0000


SYMBOL TABLE

Symbol        Value        Symbol        Value        Symbol        Value
----------------------     ----------------------     ----------------------
@cosmic~1_1   00004B86     @cosmic~1_2   00004B90     @cosmic~1_3   00004BA2     
@cosmic~1_4   00004BB4     @cosmic~1_5   00004BC6     @cosmic~1_6   00004BD8     
@graphi~1_1   00004B7A     @itoa_1       00004BEA     @itoa_convert 00004648     
@itoa_..ert_1 0000468A     @itoa_..ert_3 0000469C     @itoa_..ert_4 000046AA     
@m68kde~1_1   000048D0     @m68kde~1_10  000049DA     @m68kde~1_11  000049F6     
@m68kde~1_12  000049FC     @m68kde~1_13  00004A14     @m68kde~1_14  00004A38     
@m68kde~1_15  00004A78     @m68kde~1_16  00004A8E     @m68kde~1_17  00004A9A     
@m68kde~1_18  00004AAA     @m68kde~1_19  00004ABE     @m68kde~1_2   000048EA     
@m68kde~1_20  00004ACE     @m68kde~1_21  00004AE0     @m68kde~1_22  00004AF2     
@m68kde~1_23  00004B06     @m68kde~1_24  00004B18     @m68kde~1_25  00004B26     
@m68kde~1_26  00004B40     @m68kde~1_27  00004B5E     @m68kde~1_28  00004B68     
@m68kde~1_29  00004B6E     @m68kde~1_3   0000490A     @m68kde~1_30  00004B74     
@m68kde~1_4   0000494E     @m68kde~1_5   00004960     @m68kde~1_6   00004982     
@m68kde~1_7   000049A0     @m68kde~1_8   000049A4     @m68kde~1_9   000049C2     
@vspri.._copy 00003F34     @vspri..opy_1 00003F50     @vspri..opy_2 00003F5A     
@vspri..etval 00003F5E     @vspri..val_1 00003F90     @vspri..val_5 00003FDC     
AddressError  0000000C     BusError      00000008     Check         00000018     
DataEnd       00004BF6     DataLength    0000000C     DataStart     00004BEA     
DividebyZero  00000014     E_1010        00000826     E_1111        00000838     
E_AErro       000007A8     E_BErro       00000796     E_Check       000007DE     
E_DZero       000007CC     E_IInst       000007BA     E_Priv        00000802     
E_Spuri       0000084A     E_Trace       00000814     E_Trapv       000007F0     
E_UnitI       0000084A     E_Unnas1      0000084A     E_Unnas10     0000084A     
E_Unnas11     0000084A     E_Unnas2      0000084A     E_Unnas3      0000084A     
E_Unnas4      0000084A     E_Unnas5      0000084A     E_Unnas6      0000084A     
E_Unnas7      0000084A     E_Unnas8      0000084A     E_Unnas9      0000084A     
FlushK..ard_1 000009BE     FlushK..ard_4 000009DE     FlushK..ard_5 000009E0     
FlushK..ard_6 000009E2     Get2He..its_1 00000A64     IllegalInstr  00000010     
InitialPC     00000004     InitialSP     00000000     LDIV          00004804     
LMUL          00003E80     Level1IRQ     00000064     Level1RamISR  0000042E     
Level2IRQ     00000068     Level2RamISR  00000440     Level3IRQ     0000006C     
Level3RamISR  00000452     Level4IRQ     00000070     Level4RamISR  00000464     
Level5IRQ     00000074     Level5RamISR  00000476     Level6IRQ     00000078     
Level6RamISR  00000580     Level7IRQ     0000007C     Level7RamISR  00000592     
Line1010emul  00000028     Line1111emul  0000002C     Privilege     00000020     
RamVec..Table 08030000     SpuriousIRQ   00000060     StackP..erVal 08040000     
Timer_ISR_1   00000D2E     Trace         00000024     Trap0         00000080     
Trap0RamISR   000005A4     Trap1         00000084     Trap10        000000A8     
Trap10RamISR  00000658     Trap11        000000AC     Trap11RamISR  0000066A     
Trap12        000000B0     Trap12RamISR  0000067C     Trap13        000000B4     
Trap13RamISR  0000068E     Trap14        000000B8     Trap14RamISR  000006A0     
Trap15        000000BC     Trap15RamISR  00000790     Trap1RamISR   000005B6     
Trap2         00000088     Trap2RamISR   000005C8     Trap3         0000008C     
Trap3RamISR   000005DA     Trap4         00000090     Trap4RamISR   000005EC     
Trap5         00000094     Trap5RamISR   000005FE     Trap6         00000098     
Trap6RamISR   00000610     Trap7         0000009C     Trap7RamISR   00000622     
Trap8         000000A0     Trap8RamISR   00000634     Trap9         000000A4     
Trap9RamISR   00000646     TrapV         0000001C     ULDIV         000047F2     
ULMUL         00003E6E     Unassigned1   00000030     Unassigned10  00000058     
Unassigned11  0000005C     Unassigned2   00000034     Unassigned3   00000038     
Unassigned4   00000040     Unassigned5   00000044     Unassigned6   00000048     
Unassigned7   0000004C     Unassigned8   00000050     Unassigned9   00000054     
Uninit_IRQ    0000003C     VAddressError 0803000C     VBusError     08030008     
VCheck        08030018     VDividebyZero 08030014     VIllegalInstr 08030010     
VInitialPC    08030004     VInitialSP    08030000     VL1IRQ        08030064     
VL2IRQ        08030068     VL3IRQ        0803006C     VL4IRQ        08030070     
VL5IRQ        08030074     VL6IRQ        08030078     VL7IRQ        0803007C     
VLine1010emul 08030028     VLine1111emul 0803002C     VPrivilege    08030020     
VSpuriousIRQ  08030060     VTrace        08030024     VTrap0        08030080     
VTrap1        08030084     VTrap10       080300A8     VTrap11       080300AC     
VTrap12       080300B0     VTrap13       080300B4     VTrap14       080300B8     
VTrap15       080300BC     VTrap2        08030088     VTrap3        0803008C     
VTrap4        08030090     VTrap5        08030094     VTrap6        08030098     
VTrap7        0803009C     VTrap8        080300A0     VTrap9        080300A4     
VTrapV        0803001C     VUnassigned1  08030030     VUnassigned10 08030058     
VUnassigned11 0803005C     VUnassigned2  08030034     VUnassigned3  08030038     
VUnassigned4  08030040     VUnassigned5  08030044     VUnassigned6  08030048     
VUnassigned7  0803004C     VUnassigned8  08030050     VUnassigned9  08030054     
VUninit_IRQ   0803003C     _AddressError 00000CA0     _Break..dress 0803012E     
_Break..ction 0803014E     _Break..eared 0803015E     _BusError     00000C92     
_CallD..nitor 00000AF6     _Check        00000CCA     _Dividebyzero 00000CBC     
_Echo         080300E0     _FIRE1        08030422     _Flush..board 000009BA     
_Get2H..igits 00000A18     _Get4H..igits 00000A6C     _Get6H..igits 00000A92     
_Get8H..igits 00000AB8     _GoFlag       080300DC     _Help         00000B0C     
_IRQMessage   00000BFE     _Illeg..ction 00000CAE     _Init_RS232   000008E6     
_Insta..ndler 000008C6     _Instr..nSize 0803017E     _LEFT1        08030426     
_PC           08030120     _PortA_Count  080300D4     _Print..Abort 00000BD2     
_PrivError    00000CE6     _RIGHT1       0803042A     _SR           0803012C     
_SSP          08030124     _Spurious     00000D02     _TempString   080301C6     
_Timer1_Init  00000D30     _Timer_ISR    00000D10     _Trace        080300D8     
_Trapv        00000CD8     _USP          08030128     _Unhan..dIRQ1 00000C2A     
_Unhan..dIRQ2 00000C36     _Unhan..dIRQ3 00000C42     _Unhan..dIRQ4 00000C4E     
_Unhan..dIRQ5 00000C5A     _Unhan..dIRQ6 00000C66     _Unhan..dIRQ7 00000C78     
_Unhan..dTrap 00000C84     _UnitIRQ      00000CF4     _Unkno..mmand 00000AE0     
_Watch..dress 08030182     _Watch..eared 080301A2     __allocp      080300C4     
__getch       0000093C     __heap        080300C4     __putch       00000910     
__ungetbuf    080300C0     __waitch      0000097A     _a0           08030104     
_a1           08030108     _a2           0803010C     _a3           08030110     
_a4           08030114     _a5           08030118     _a6           0803011C     
_add_score    00002316     _attract      08030440     _attract_mode 00002DD6     
_bcd_add      000021DC     _bomb_bitmap  080306CE     _bomb_x       0803043C     
_bomb_y       0803043E     _bulle..itmap 080306D6     _bullet_x     08030438     
_bullet_y     0803043A     _check..t_hit 00002A0C     _check..press 00001E7C     
_clear_sprite 00001D54     _clock        00001F02     _clock..nt_ms 080301C2     
_clrscr       00001F42     _cosmi.._main 00003DE4     _credits      08030442     
_curplayer    08030444     _d0           080300E4     _d1           080300E8     
_d2           080300EC     _d3           080300F0     _d4           080300F4     
_d5           080300F8     _d6           080300FC     _d7           08030100     
_delay_ms     00001F0A     _delete_enemy 000024DE     _destr..layer 0000240C     
_draw_.._word 00002170     _draw_bunker  0000276E     _draw_char    000020B6     
_draw_font    000010A6     _draw_lives   0000225A     _draw_..field 0000288C     
_draw_score   000022CA     _draw_sprite  00001BF6     _draw_string  00002126     
_draw_vline   00001FCC     _drop_bomb    00002B66     _enemies      0803044A     
_enemy..itmap 080306DA     _enemy..itmap 080306FC     _enemy..itmap 0803071E     
_enemy..itmap 08030740     _enemy..tmaps 08030762     _enemy_index  08030432     
_erase_sprite 00001CE0     _find_..my_at 000029A4     _fire_bullet  00002A4E     
_font8x8      0803049E     _frame        08030776     _game_..r_msg 00002D28     
_get_c.._rand 00002362     _getch_1      0000093E     _getch_3      00000950     
_getch_4      00000974     _go           0000084C     _graph.._char 00000FEC     
_graph..tring 0000105C     _graph..vline 00000F02     _graph..nt8x8 0803022A     
_graph..lrscr 00000E78     _graph.._main 00001BD6     _graph..pixel 00000EBE     
_i            080300C4     _in_rect      00002916     _init_enemies 00002444     
_init_game    00002D12     _initi..tmaps 00002DE8     _initi.._font 00001134     
_itoa         00004784     _kbhit        000008F8     _lives        08030448     
_long_rand    00001EDC     _ltoa         000046BA     _main         00000D42     
_memmove      00003F0E     _menu         00000B5A     _move_bomb    00002BCA     
_move_bullet  00002A92     _move_player  00001DC4     _next_mode    08030430     
_num_enemies  08030434     _play_game    00002DA8     _play_round   00002C8C     
_playe..itmap 08030696     _player_x     08030436     _printf       00003E3C     
_putch        000047B2     _putch_1      00000914     _putch_3      00000926     
_score        08030446     _seed         08030772     _srand        00001ECC     
_stop         0000084A     _strcpy       000047E2     _strlen       000047A0     
_this_mode    0803042E     _toupper      00003E10     _ultoa        0000473E     
_updat..enemy 00002568     _vsprintf     00003FE6     _waitch_1     00000990     
_waitch_3     000009B6     _waitch_4     000009B4     _x            080300C8     
_xor_pixel    00001F88     _xor_p..derez 0000237C     _xor_sprite   00001C66     
_xtod         000009E6     _y            080300CC     _z            080300D0     
add_score_1   00002324     add_score_3   0000235E     attrac..ode_1 00002DDE     
bcd_add_1     000021FE     bcd_add_3     00002250     bcd_add_4     00002212     
bcd_add_5     00002240     bcd_add_6     00002242     bss           08030000     
bssEnd        08030778     check_..hit_1 00002A48     check_..ess_1 00001EA6     
check_..ess_3 00001EB8     check_..ess_5 00001EC8     clear_..ite_1 00001D76     
clear_..ite_3 00001DBC     clear_..ite_4 00001D80     clear_..ite_6 00001DB8     
clrscr_1      00001F48     clrscr_3      00001F82     clrscr_4      00001F54     
clrscr_6      00001F7E     delay_ms_1    00001F18     delay_ms_3    00001F30     
dodiv         0000484C     dodiv_1       0000486C     dodiv_2       0000488A     
dodiv_3       000048AA     dodiv_4       000048C6     dodiv_5       000048CA     
domul         00003EBA     domul_1       00003ECE     domul_2       00003ED8     
domul_3       00003EDA     domul_4       00003EEE     draw_b..ord_1 00002186     
draw_b..ord_3 000021D4     draw_bunker_1 000027A4     draw_bunker_3 0000283A     
draw_bunker_4 0000283C     draw_bunker_6 00002884     draw_char_1   0000210A     
draw_char_3   0000211E     draw_font_1   000010AA     draw_lives_1  00002272     
draw_lives_2  00002274     draw_lives_3  00002280     draw_lives_5  000022C4     
draw_lives_6  000022AE     draw_lives_7  000022B0     draw_p..eld_1 000028B8     
draw_p..eld_3 000028DA     draw_score_1  000022D8     draw_score_2  000022DA     
draw_sprite_1 00001C14     draw_sprite_3 00001C5E     draw_sprite_4 00001C1E     
draw_sprite_6 00001C5A     draw_string_1 0000212C     draw_string_2 0000216A     
draw_string_3 0000213C     draw_vline_1  00002090     draw_vline_2  000020AE     
draw_vline_3  0000205C     draw_vline_5  00002076     erase_..ite_1 00001CFE     
erase_..ite_3 00001D4C     erase_..ite_4 00001D08     erase_..ite_6 00001D48     
find_e.._at_1 000029AE     find_e.._at_3 00002A02     find_e.._at_4 000029FE     
find_e.._at_6 00002A04     game_o..msg_1 00002D32     game_o..msg_3 00002DA2     
graphi..har_1 00001040     graphi..har_3 00001054     graphi..ing_1 00001062     
graphi..ing_2 000010A0     graphi..ing_3 00001072     graphi..ine_1 00000FC6     
graphi..ine_2 00000FE4     graphi..ine_3 00000F92     graphi..ine_5 00000FAC     
graphi..scr_1 00000E7E     graphi..scr_3 00000EB8     graphi..scr_4 00000E8A     
graphi..scr_6 00000EB4     heap          08030778     in_rect_1     0000299C     
in_rect_2     0000299E     init_e..ies_1 00002456     init_e..ies_3 000024AE     
init_e..ies_4 000024AA     kbhit_1       0000090C     kbhit_3       0000090E     
ldiv_1        00004826     ldiv_2        00004832     ldiv_3        0000483A     
ldiv_4        0000483C     lmul_1        00003E9E     lmul_2        00003EA4     
lmul_3        00003EAC     lmul_4        00003EAE     ltoa_1        000046E6     
ltoa_3        000046E0     ltoa_4        00004736     ltoa_5        00004720     
ltoa_7        00004718     mainloop      00000426     memmove_0     00003F20     
memmove_1     00003F28     memmove_2     00003F2C     menu_1        00000B68     
menu_2        00000BD0     menu_4        00000BB4     menu_6        00000BCC     
move_bomb_1   00002C16     move_bomb_3   00002C5A     move_bomb_4   00002C86     
move_bomb_5   00002C52     move_bullet_1 00002B34     move_bullet_2 00002B60     
move_bullet_3 00002AE2     move_player_1 00001DD0     move_p..er_10 00001E36     
move_p..er_12 00001E5A     move_player_3 00001E7A     move_player_4 00001E18     
move_player_6 00001E10     move_player_8 00001E3E     play_game_1   00002DB6     
play_game_3   00002DD0     play_game_4   00002DCE     play_round_1  00002CAA     
play_round_3  00002D10     play_round_4  00002CE6     play_round_8  00002D04     
play_round_9  00002D08     putch_1       000047D0     start         00000400     
strcpy_1      000047EC     strlen_1      000047A6     toupper_1     00003E32     
ultoa_1       00004764     ultoa_3       00004760     ultoa_4       0000477C     
update..emy_1 0000259A     update..my_11 000026F4     update..emy_3 00002674     
update..emy_5 0000266A     update..emy_7 000026BA     update..emy_9 000026B8     
vsprintf_1    00003FFE     vsprintf_102  00004526     vsprintf_104  00004544     
vsprintf_105  0000454A     vsprintf_107  00004566     vsprintf_108  0000456E     
vsprintf_11   00004096     vsprintf_110  00004588     vsprintf_112  000045D4     
vsprintf_113  000045D6     vsprintf_115  000045D2     vsprintf_116  000045AE     
vsprintf_119  000045BC     vsprintf_12   000040A2     vsprintf_123  000045EE     
vsprintf_125  0000460C     vsprintf_126  0000463E     vsprintf_13   000040AE     
vsprintf_14   000040BA     vsprintf_15   0000408C     vsprintf_16   000040E6     
vsprintf_18   0000411C     vsprintf_2    00004626     vsprintf_20   00004138     
vsprintf_22   000042D0     vsprintf_23   000042DE     vsprintf_24   000041AA     
vsprintf_26   000041E6     vsprintf_27   0000421E     vsprintf_28   00004256     
vsprintf_3    0000462A     vsprintf_30   0000428E     vsprintf_31   000042B2     
vsprintf_33   00004182     vsprintf_34   00004176     vsprintf_35   0000419C     
vsprintf_36   000041CA     vsprintf_37   000041E2     vsprintf_38   00004204     
vsprintf_39   0000421A     vsprintf_4    00004036     vsprintf_40   0000423C     
vsprintf_41   00004252     vsprintf_42   00004274     vsprintf_43   0000428A     
vsprintf_44   000042AA     vsprintf_45   000042AC     vsprintf_46   000042CE     
vsprintf_48   00004312     vsprintf_50   0000430E     vsprintf_51   00004310     
vsprintf_54   0000432C     vsprintf_56   0000434A     vsprintf_59   00004378     
vsprintf_6    00004060     vsprintf_60   000043BC     vsprintf_62   00004390     
vsprintf_63   000043AE     vsprintf_64   000043B6     vsprintf_65   000043EC     
vsprintf_67   000043E2     vsprintf_68   000043EA     vsprintf_7    000040C8     
vsprintf_73   00004420     vsprintf_76   00004414     vsprintf_77   00004458     
vsprintf_79   0000444E     vsprintf_8    000040CA     vsprintf_80   0000460E     
vsprintf_81   00004622     vsprintf_82   000044E4     vsprintf_9    000040C6     
vsprintf_93   000044B4     vsprintf_94   0000449A     vsprintf_95   000044D8     
vsprintf_96   000044FE     vsprintf_98   0000450E     xor_pl..rez_1 000023A2     
xor_pl..rez_3 00002404     xor_pl..rez_4 000023AC     xor_pl..rez_6 00002400     
xor_sprite_1  00001C86     xor_sprite_3  00001CD6     xor_sprite_4  00001C90     
xor_sprite_6  00001CD2     xtod_1        000009FE     xtod_3        00000A12     
xtod_4        00000A0C     

Assembly errors: 0
