680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 09 Apr 2025      Time: 02:47:54          Source: C:\COSMICIMPALASM68K\OUTPUT\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0796   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 07A8   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 07BA   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 07CC   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 07DE   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 07F0   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 0802   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0814   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0826   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 0838   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 084A   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 084A   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 084A   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 084A   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 084A   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 084A   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 084A   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 084A   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 084A   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 084A   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 084A   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 084A   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 084A   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 042E   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 0440   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 0452   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 0464   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 0476   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 0580   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 0592   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 05A4   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 05B6   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 05C8   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 05DA   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 05EC   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 05FE   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 0610   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 0622   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 0634   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 0646   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 0658   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 066A   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 067C   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 068E   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 06A0   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 0790   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             ;set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; some important initialisation do not modify
00000404  23FC FFFF   89                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000408  FFFF 0803 
0000040C  00C0      
0000040E  23FC 0000   90                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000412  0000 0803 
00000416  00C4      
00000418  23FC 0803   91                   move.l    #heap,__heap    ; pointer to free memory
0000041C  0778 0803 
00000420  00C4      
00000422  46FC 2000   92                   move.w    #$2000,SR       ; enable interrupts
                      93   
00000426  4EB9 0000   94   mainloop        jsr       _main
0000042A  0D32      
0000042C  60F8        95                   bra       mainloop
                      96   
                      97   *********************************************************************************************************
                      98   * Code to call Ram Based Interrupt handler and other exeception handler code
                      99   *********************************************************************************************************
0000042E  48E7 FFFE  100   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000432  2079 0803  101                   move.l    VL1IRQ,a0               get ram based address into a0
00000436  0064      
00000438  4E90       102                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000043A  4CDF 7FFF  103                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000043E  4E73       104                   rte
00000440  48E7 FFFE  105   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000444  2079 0803  106                   move.l    VL2IRQ,a0               get ram based address into a0
00000448  0068      
0000044A  4E90       107                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000044C  4CDF 7FFF  108                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000450  4E73       109                   rte
00000452  48E7 FFFE  110   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000456  2079 0803  111                   move.l    VL3IRQ,a0               get ram based address into a0
0000045A  006C      
0000045C  4E90       112                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000045E  4CDF 7FFF  113                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000462  4E73       114                   rte
00000464  48E7 FFFE  115   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000468  2079 0803  116                   move.l    VL4IRQ,a0               get ram based address into a0
0000046C  0070      
0000046E  4E90       117                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
00000470  4CDF 7FFF  118                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000474  4E73       119                   rte
                     120   
                     121   * Trace trap Handler
                     122   
                     123   Level5RamISR
                     124   *
                     125   **         Copy 68000 registers from debug monitor Variables,
                     126   *
                     127   *
00000476  23FC 0000  128                   move.l    #1,_Trace              switch on Trace Mode
0000047A  0001 0803 
0000047E  00D8      
00000480  13FC 0000  129                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
00000484  0040 000A 
00000488  33DF 0803  130                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
0000048C  012C      
0000048E  23DF 0803  131                   move.l    (sp)+,_PC              get at the users program counter and copy
00000492  0120      
                     132   *
00000494  23CF 0803  133                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000498  0124      
0000049A  23C0 0803  134                   move.l    d0,_d0
0000049E  00E4      
000004A0  23C1 0803  135                   move.l    d1,_d1
000004A4  00E8      
000004A6  23C2 0803  136                   move.l    d2,_d2
000004AA  00EC      
000004AC  23C3 0803  137                   move.l    d3,_d3
000004B0  00F0      
000004B2  23C4 0803  138                   move.l    d4,_d4
000004B6  00F4      
000004B8  23C5 0803  139                   move.l    d5,_d5
000004BC  00F8      
000004BE  23C6 0803  140                   move.l    d6,_d6
000004C2  00FC      
000004C4  23C7 0803  141                   move.l    d7,_d7
000004C8  0100      
                     142   *
000004CA  23C8 0803  143                   move.l    a0,_a0
000004CE  0104      
000004D0  23C9 0803  144                   move.l    a1,_a1
000004D4  0108      
000004D6  23CA 0803  145                   move.l    a2,_a2
000004DA  010C      
000004DC  23CB 0803  146                   move.l    a3,_a3
000004E0  0110      
000004E2  23CC 0803  147                   move.l    a4,_a4
000004E6  0114      
000004E8  23CD 0803  148                   move.l    a5,_a5
000004EC  0118      
000004EE  23CE 0803  149                   move.l    a6,_a6
000004F2  011C      
000004F4  4E68       150                   move.l    usp,a0
000004F6  23C8 0803  151                   move.l    a0,_USP
000004FA  0128      
                     152   *
000004FC  2079 0803  153                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
00000500  0074      
00000502  4E90       154                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     155   
                     156   ** After trace, reload 68000 registers with new values before continuing
                     157   
00000504  2039 0803  158                   move.l   _d0,d0
00000508  00E4      
0000050A  2239 0803  159                   move.l   _d1,d1
0000050E  00E8      
00000510  2439 0803  160                   move.l   _d2,d2
00000514  00EC      
00000516  2639 0803  161                   move.l   _d3,d3
0000051A  00F0      
0000051C  2839 0803  162                   move.l   _d4,d4
00000520  00F4      
00000522  2A39 0803  163                   move.l   _d5,d5
00000526  00F8      
00000528  2C39 0803  164                   move.l   _d6,d6
0000052C  00FC      
0000052E  2E39 0803  165                   move.l   _d7,d7
00000532  0100      
                     166   
00000534  2079 0803  167                   move.l   _USP,a0
00000538  0128      
0000053A  4E60       168                   move.l   a0,USP                     load user stack pointer
0000053C  2079 0803  169                   move.l   _a0,a0
00000540  0104      
00000542  2279 0803  170                   move.l   _a1,a1
00000546  0108      
00000548  2479 0803  171                   move.l   _a2,a2
0000054C  010C      
0000054E  2679 0803  172                   move.l   _a3,a3
00000552  0110      
00000554  2879 0803  173                   move.l   _a4,a4
00000558  0114      
0000055A  2A79 0803  174                   move.l   _a5,a5
0000055E  0118      
00000560  2C79 0803  175                   move.l   _a6,a6
00000564  011C      
                     176   
00000566  2E79 0803  177                   move.l   _SSP,sp
0000056A  0124      
0000056C  2F39 0803  178                   move.l   _PC,-(sp)
00000570  0120      
00000572  3F39 0803  179                   move.w   _SR,-(sp)
00000576  012C      
00000578  11F8 0074  180                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
0000057C  0000      
0000057E  4E73       181                   rte
                     182   
                     183   * address trap handler
                     184   
00000580  48E7 FFFE  185   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000584  2079 0803  186                   move.l    VL6IRQ,a0               get ram based address into a0
00000588  0078      
0000058A  4E90       187                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000058C  4CDF 7FFF  188                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000590  4E73       189                   rte
                     190   
00000592  48E7 FFFE  191   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000596  2079 0803  192                   move.l    VL7IRQ,a0               get ram based address into a0
0000059A  007C      
0000059C  4E90       193                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000059E  4CDF 7FFF  194                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005A2  4E73       195                   rte
                     196   
                     197   
                     198   ********************************************************************************************************
                     199   * Ram based Trap handler and other exeception handler code
                     200   *********************************************************************************************************
                     201   
000005A4  48E7 FFFE  202   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005A8  2079 0803  203                   move.l    VTrap0,a0                get ram based address into a0
000005AC  0080      
000005AE  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005B0  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005B4  4E73       206                   rte
                     207   
000005B6  48E7 FFFE  208   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005BA  2079 0803  209                   move.l    VTrap1,a0                get ram based address into a0
000005BE  0084      
000005C0  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005C2  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005C6  4E73       212                   rte
                     213   
000005C8  48E7 FFFE  214   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005CC  2079 0803  215                   move.l    VTrap2,a0                get ram based address into a0
000005D0  0088      
000005D2  4E90       216                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005D4  4CDF 7FFF  217                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005D8  4E73       218                   rte
                     219   
000005DA  48E7 FFFE  220   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005DE  2079 0803  221                   move.l    VTrap3,a0                get ram based address into a0
000005E2  008C      
000005E4  4E90       222                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005E6  4CDF 7FFF  223                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005EA  4E73       224                   rte
                     225   
000005EC  48E7 FFFE  226   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  227                   move.l    VTrap4,a0                get ram based address into a0
000005F4  0090      
000005F6  4E90       228                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005F8  4CDF 7FFF  229                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       230                   rte
                     231   
000005FE  48E7 FFFE  232   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  233                   move.l    VTrap5,a0                get ram based address into a0
00000606  0094      
00000608  4E90       234                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000060A  4CDF 7FFF  235                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       236                   rte
                     237   
00000610  48E7 FFFE  238   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  239                   move.l    VTrap6,a0                get ram based address into a0
00000618  0098      
0000061A  4E90       240                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  241                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       242                   rte
                     243   
00000622  48E7 FFFE  244   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  245                   move.l    VTrap7,a0                get ram based address into a0
0000062A  009C      
0000062C  4E90       246                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  247                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       248                   rte
                     249   
00000634  48E7 FFFE  250   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  251                   move.l    VTrap8,a0                get ram based address into a0
0000063C  00A0      
0000063E  4E90       252                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  253                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       254                   rte
                     255   
00000646  48E7 FFFE  256   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  257                   move.l    VTrap9,a0                get ram based address into a0
0000064E  00A4      
00000650  4E90       258                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  259                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       260                   rte
                     261   
00000658  48E7 FFFE  262   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  263                   move.l    VTrap10,a0                get ram based address into a0
00000660  00A8      
00000662  4E90       264                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  265                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       266                   rte
                     267   
0000066A  48E7 FFFE  268   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  269                   move.l    VTrap11,a0                get ram based address into a0
00000672  00AC      
00000674  4E90       270                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  271                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       272                   rte
                     273   
0000067C  48E7 FFFE  274   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  275                   move.l    VTrap12,a0                get ram based address into a0
00000684  00B0      
00000686  4E90       276                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  277                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       278                   rte
                     279   
0000068E  48E7 FFFE  280   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  281                   move.l    VTrap13,a0                get ram based address into a0
00000696  00B4      
00000698  4E90       282                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  283                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       284                   rte
                     285   
                     286   Trap14RamISR    ;Break Point Handler
                     287   *
                     288   **         Copy 68000 registers from debug monitor Variables
                     289   *
000006A0  23FC 0000  290                   move.l    #1,_Trace      switch on Trace Mode
000006A4  0001 0803 
000006A8  00D8      
000006AA  33DF 0803  291                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
000006AE  012C      
000006B0  23DF 0803  292                   move.l    (sp)+,_PC      get at the users program counter and copy
000006B4  0120      
                     293   *
000006B6  23C0 0803  294                   move.l    d0,_d0
000006BA  00E4      
000006BC  23C1 0803  295                   move.l    d1,_d1
000006C0  00E8      
000006C2  23C2 0803  296                   move.l    d2,_d2
000006C6  00EC      
000006C8  23C3 0803  297                   move.l    d3,_d3
000006CC  00F0      
000006CE  23C4 0803  298                   move.l    d4,_d4
000006D2  00F4      
000006D4  23C5 0803  299                   move.l    d5,_d5
000006D8  00F8      
000006DA  23C6 0803  300                   move.l    d6,_d6
000006DE  00FC      
000006E0  23C7 0803  301                   move.l    d7,_d7
000006E4  0100      
                     302   *
000006E6  23C8 0803  303                   move.l    a0,_a0
000006EA  0104      
000006EC  23C9 0803  304                   move.l    a1,_a1
000006F0  0108      
000006F2  23CA 0803  305                   move.l    a2,_a2
000006F6  010C      
000006F8  23CB 0803  306                   move.l    a3,_a3
000006FC  0110      
000006FE  23CC 0803  307                   move.l    a4,_a4
00000702  0114      
00000704  23CD 0803  308                   move.l    a5,_a5
00000708  0118      
0000070A  23CE 0803  309                   move.l    a6,_a6
0000070E  011C      
00000710  4E68       310                   move.l    USP,a0
00000712  23C8 0803  311                   move.l    a0,_USP
00000716  0128      
                     312   *
00000718  2079 0803  313                   move.l    VTrap14,a0             get ram based address into a0
0000071C  00B8      
0000071E  4E90       314                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     315   
                     316   ** After breakpoint reload 68000 registers with new values before continuing
                     317   
                     318   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
00000720  2039 0803  319                   move.l   _d0,d0
00000724  00E4      
00000726  2239 0803  320                   move.l   _d1,d1
0000072A  00E8      
0000072C  2439 0803  321                   move.l   _d2,d2
00000730  00EC      
00000732  2639 0803  322                   move.l   _d3,d3
00000736  00F0      
00000738  2839 0803  323                   move.l   _d4,d4
0000073C  00F4      
0000073E  2A39 0803  324                   move.l   _d5,d5
00000742  00F8      
00000744  2C39 0803  325                   move.l   _d6,d6
00000748  00FC      
0000074A  2E39 0803  326                   move.l   _d7,d7
0000074E  0100      
                     327   
00000750  2079 0803  328                   move.l   _USP,a0
00000754  0128      
00000756  4E60       329                   move.l   a0,USP        load user stack pointer A7
00000758  2079 0803  330                   move.l   _a0,a0
0000075C  0104      
0000075E  2279 0803  331                   move.l   _a1,a1
00000762  0108      
00000764  2479 0803  332                   move.l   _a2,a2
00000768  010C      
0000076A  2679 0803  333                   move.l   _a3,a3
0000076E  0110      
00000770  2879 0803  334                   move.l   _a4,a4
00000774  0114      
00000776  2A79 0803  335                   move.l   _a5,a5
0000077A  0118      
0000077C  2C79 0803  336                   move.l   _a6,a6
00000780  011C      
                     337   
00000782  2F39 0803  338                   move.l   _PC,-(sp)
00000786  0120      
00000788  3F39 0803  339                   move.w   _SR,-(sp)
0000078C  012C      
0000078E  4E73       340                   rte
                     341   
00000790  4EF9 0000  342   Trap15RamISR    jmp     _CallDebugMonitor
00000794  0AF6      
                     343   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     344   *                move.l    VTrap15,a0                get ram based address into a0
                     345   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     346   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     347   *                rte
                     348   
                     349   *********************************************************************************************************
                     350   *Default exception handler for everything without a specific handler
                     351   *********************************************************************************************************
                     352   
                     353   *
                     354   **              Jump here for each unhandled exception
                     355   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     356   *
                     357   
00000796  48E7 FFFE  358   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000079A  2079 0803  359                   move.l    VBusError,a0            get ram based address into a0
0000079E  0008      
000007A0  4E90       360                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007A2  4CDF 7FFF  361                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007A6  4E73       362                   rte
000007A8  48E7 FFFE  363   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007AC  2079 0803  364                   move.l    VAddressError,a0        get ram based address into a0
000007B0  000C      
000007B2  4E90       365                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007B4  4CDF 7FFF  366                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007B8  4E73       367                   rte
000007BA  48E7 FFFE  368   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007BE  2079 0803  369                   move.l    VIllegalInstr,a0        get ram based address into a0
000007C2  0010      
000007C4  4E90       370                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007C6  4CDF 7FFF  371                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007CA  4E73       372                   rte
000007CC  48E7 FFFE  373   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007D0  2079 0803  374                   move.l    VDividebyZero,a0        get ram based address into a0
000007D4  0014      
000007D6  4E90       375                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007D8  4CDF 7FFF  376                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007DC  4E73       377                   rte
000007DE  48E7 FFFE  378   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007E2  2079 0803  379                   move.l    VCheck,a0               get ram based address into a0
000007E6  0018      
000007E8  4E90       380                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007EA  4CDF 7FFF  381                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007EE  4E73       382                   rte
000007F0  48E7 FFFE  383   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007F4  2079 0803  384                   move.l    VTrapV,a0               get ram based address into a0
000007F8  001C      
000007FA  4E90       385                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007FC  4CDF 7FFF  386                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000800  4E73       387                   rte
00000802  48E7 FFFE  388   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  389                   move.l    VPrivilege,a0           get ram based address into a0
0000080A  0020      
0000080C  4E90       390                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  391                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       392                   rte
00000814  48E7 FFFE  393   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  394                   move.l    VTrace,a0               get ram based address into a0
0000081C  0024      
0000081E  4E90       395                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  396                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       397                   rte
00000826  48E7 FFFE  398   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  399                   move.l    VLine1010emul,a0        get ram based address into a0
0000082E  0028      
00000830  4E90       400                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  401                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       402                   rte
00000838  48E7 FFFE  403   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  404                   move.l    VLine1111emul,a0        get ram based address into a0
00000840  002C      
00000842  4E90       405                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  406                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       407                   rte
                     408   E_Unnas1
                     409   E_Unnas2
                     410   E_Unnas3
                     411   E_UnitI
                     412   E_Unnas4
                     413   E_Unnas5
                     414   E_Unnas6
                     415   E_Unnas7
                     416   E_Unnas8
                     417   E_Unnas9
                     418   E_Unnas10
                     419   E_Unnas11
                     420   E_Spuri
0000084A  60FE       421   _stop            bra _stop                         stop
                     422   ***************************************************************************************************
                     423   * Go() function in debug monitor
                     424   ***************************************************************************************************
                     425   _go
0000084C  2E79 0803  426                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
00000850  0124      
00000852  2F39 0803  427                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
00000856  0120      
00000858  3F39 0803  428                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
0000085C  012C      
                     429   
0000085E  1038 0078  430                   move.b   $00000078,d0  remove any spurious address exception arising after power on
00000862  2039 0803  431                   move.l   _d0,d0
00000866  00E4      
00000868  2239 0803  432                   move.l   _d1,d1
0000086C  00E8      
0000086E  2439 0803  433                   move.l   _d2,d2
00000872  00EC      
00000874  2639 0803  434                   move.l   _d3,d3
00000878  00F0      
0000087A  2839 0803  435                   move.l   _d4,d4
0000087E  00F4      
00000880  2A39 0803  436                   move.l   _d5,d5
00000884  00F8      
00000886  2C39 0803  437                   move.l   _d6,d6
0000088A  00FC      
0000088C  2E39 0803  438                   move.l   _d7,d7
00000890  0100      
                     439   
00000892  2079 0803  440                   move.l   _USP,a0
00000896  0128      
00000898  4E60       441                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
0000089A  2079 0803  442                   move.l   _a0,a0
0000089E  0104      
000008A0  2279 0803  443                   move.l   _a1,a1
000008A4  0108      
000008A6  2479 0803  444                   move.l   _a2,a2
000008AA  010C      
000008AC  2679 0803  445                   move.l   _a3,a3
000008B0  0110      
000008B2  2879 0803  446                   move.l   _a4,a4
000008B6  0114      
000008B8  2A79 0803  447                   move.l   _a5,a5
000008BC  0118      
000008BE  2C79 0803  448                   move.l   _a6,a6
000008C2  011C      
000008C4  4E73       449                   rte                    load the status reg and PC from the stack and commence running
                     450                                          *used to be rte but this didn't load the status byte
                     451   
                     452   ; C:\COSMICIMPALASM68K\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     453   ; #include "DebugMonitor.h"
                     454   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     455   ; #define StartOfExceptionVectorTable 0x08030000
                     456   ; //#define StartOfExceptionVectorTable 0x0B000000
                     457   ; // use 0C000000 for dram or hex 08040000 for sram
                     458   ; #define TopOfStack 0x08040000
                     459   ; //#define TopOfStack 0x0C000000
                     460   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     461   ; unsigned int i, x, y, z, PortA_Count;
                     462   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     463   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     464   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     465   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     466   ; unsigned int PC, SSP, USP ;
                     467   ; unsigned short int SR;
                     468   ; // Breakpoint variables
                     469   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     470   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     471   ; unsigned int BreakPointSetOrCleared[8] ;
                     472   ; unsigned int InstructionSize ;
                     473   ; // watchpoint variables
                     474   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     475   ; unsigned int WatchPointSetOrCleared[8] ;
                     476   ; int clock_count_ms;
                     477   ; char    TempString[100] ;
                     478   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     479   ; {
                     480   _InstallExceptionHandler:
000008C6  4E56 FFFC  481          link      A6,#-4
                     482   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
000008CA  2D7C 0803  483          move.l    #134414336,-4(A6)
000008CE  0000 FFFC 
                     484   ; RamVectorAddress[level] = (long int *)(function_ptr);
000008D2  206E FFFC  485          move.l    -4(A6),A0
000008D6  202E 000C  486          move.l    12(A6),D0
000008DA  E588       487          lsl.l     #2,D0
000008DC  21AE 0008  488          move.l    8(A6),0(A0,D0.L)
000008E0  0800      
000008E2  4E5E       489          unlk      A6
000008E4  4E75       490          rts
                     491   ; }
                     492   ; /*********************************************************************************************
                     493   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     494   ; *********************************************************************************************/
                     495   ; void Init_RS232(void)
                     496   ; {
                     497   _Init_RS232:
                     498   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
000008E6  13FC 0015  499          move.b    #21,4194368
000008EA  0040 0040 
                     500   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
000008EE  13FC 0001  501          move.b    #1,4194372
000008F2  0040 0044 
000008F6  4E75       502          rts
                     503   ; }
                     504   ; int kbhit(void)
                     505   ; {
                     506   _kbhit:
                     507   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
000008F8  1039 0040  508          move.b    4194368,D0
000008FC  0040      
000008FE  C03C 0001  509          and.b     #1,D0
00000902  0C00 0001  510          cmp.b     #1,D0
00000906  6604       511          bne.s     kbhit_1
                     512   ; return 1 ;
00000908  7001       513          moveq     #1,D0
0000090A  6002       514          bra.s     kbhit_3
                     515   kbhit_1:
                     516   ; else
                     517   ; return 0 ;
0000090C  4280       518          clr.l     D0
                     519   kbhit_3:
0000090E  4E75       520          rts
                     521   ; }
                     522   ; /*********************************************************************************************************
                     523   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     524   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     525   ; **  to allow the board to communicate with HyperTerminal Program
                     526   ; **
                     527   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     528   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     529   ; **  call _putch() also
                     530   ; *********************************************************************************************************/
                     531   ; int _putch( int c)
                     532   ; {
                     533   __putch:
00000910  4E56 0000  534          link      A6,#0
                     535   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     536   _putch_1:
00000914  1039 0040  537          move.b    4194368,D0
00000918  0040      
0000091A  C03C 0002  538          and.b     #2,D0
0000091E  0C00 0002  539          cmp.b     #2,D0
00000922  6702       540          beq.s     _putch_3
00000924  60EE       541          bra       _putch_1
                     542   _putch_3:
                     543   ; ;
                     544   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000926  202E 0008  545          move.l    8(A6),D0
0000092A  C03C 007F  546          and.b     #127,D0
0000092E  13C0 0040  547          move.b    D0,4194370
00000932  0042      
                     548   ; return c ;                                              // putchar() expects the character to be returned
00000934  202E 0008  549          move.l    8(A6),D0
00000938  4E5E       550          unlk      A6
0000093A  4E75       551          rts
                     552   ; }
                     553   ; /*********************************************************************************************************
                     554   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     555   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     556   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     557   ; **
                     558   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     559   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     560   ; **  call _getch() also
                     561   ; *********************************************************************************************************/
                     562   ; int _getch( void )
                     563   ; {
                     564   __getch:
0000093C  2F02       565          move.l    D2,-(A7)
                     566   ; int c ;
                     567   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     568   _getch_1:
0000093E  1039 0040  569          move.b    4194368,D0
00000942  0040      
00000944  C03C 0001  570          and.b     #1,D0
00000948  0C00 0001  571          cmp.b     #1,D0
0000094C  6702       572          beq.s     _getch_3
0000094E  60EE       573          bra       _getch_1
                     574   _getch_3:
                     575   ; ;
                     576   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000950  1039 0040  577          move.b    4194370,D0
00000954  0042      
00000956  C0BC 0000  578          and.l     #255,D0
0000095A  00FF      
0000095C  C0BC 0000  579          and.l     #127,D0
00000960  007F      
00000962  2400       580          move.l    D0,D2
                     581   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     582   ; if(Echo)
00000964  4AB9 0803  583          tst.l     _Echo.L
00000968  00E0      
0000096A  6708       584          beq.s     _getch_4
                     585   ; _putch(c);
0000096C  2F02       586          move.l    D2,-(A7)
0000096E  4EB8 0910  587          jsr       __putch
00000972  584F       588          addq.w    #4,A7
                     589   _getch_4:
                     590   ; return c ;
00000974  2002       591          move.l    D2,D0
00000976  241F       592          move.l    (A7)+,D2
00000978  4E75       593          rts
                     594   ; }
                     595   ; int _waitch( void )
                     596   ; {
                     597   __waitch:
0000097A  2F02       598          move.l    D2,-(A7)
                     599   ; int c ;
                     600   ; if (((char)(RS232_Status) & (char)(0x01)) != (char)(0x01)) {
0000097C  1039 0040  601          move.b    4194368,D0
00000980  0040      
00000982  C03C 0001  602          and.b     #1,D0
00000986  0C00 0001  603          cmp.b     #1,D0
0000098A  6704       604          beq.s     _waitch_1
                     605   ; return 1;
0000098C  7001       606          moveq     #1,D0
0000098E  6026       607          bra.s     _waitch_3
                     608   _waitch_1:
                     609   ; }
                     610   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000990  1039 0040  611          move.b    4194370,D0
00000994  0042      
00000996  C0BC 0000  612          and.l     #255,D0
0000099A  00FF      
0000099C  C0BC 0000  613          and.l     #127,D0
000009A0  007F      
000009A2  2400       614          move.l    D0,D2
                     615   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     616   ; if(Echo)
000009A4  4AB9 0803  617          tst.l     _Echo.L
000009A8  00E0      
000009AA  6708       618          beq.s     _waitch_4
                     619   ; _putch(c);
000009AC  2F02       620          move.l    D2,-(A7)
000009AE  4EB8 0910  621          jsr       __putch
000009B2  584F       622          addq.w    #4,A7
                     623   _waitch_4:
                     624   ; return c ;
000009B4  2002       625          move.l    D2,D0
                     626   _waitch_3:
000009B6  241F       627          move.l    (A7)+,D2
000009B8  4E75       628          rts
                     629   ; }
                     630   ; // flush the input stream for any unread characters
                     631   ; void FlushKeyboard(void)
                     632   ; {
                     633   _FlushKeyboard:
000009BA  4E56 FFFC  634          link      A6,#-4
                     635   ; char c ;
                     636   ; while(1)    {
                     637   FlushKeyboard_1:
                     638   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
000009BE  1039 0040  639          move.b    4194368,D0
000009C2  0040      
000009C4  C03C 0001  640          and.b     #1,D0
000009C8  0C00 0001  641          cmp.b     #1,D0
000009CC  6610       642          bne.s     FlushKeyboard_4
                     643   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
000009CE  1039 0040  644          move.b    4194370,D0
000009D2  0042      
000009D4  C03C 007F  645          and.b     #127,D0
000009D8  1D40 FFFF  646          move.b    D0,-1(A6)
000009DC  6002       647          bra.s     FlushKeyboard_5
                     648   FlushKeyboard_4:
                     649   ; else
                     650   ; return ;
000009DE  6002       651          bra.s     FlushKeyboard_6
                     652   FlushKeyboard_5:
000009E0  60DC       653          bra       FlushKeyboard_1
                     654   FlushKeyboard_6:
000009E2  4E5E       655          unlk      A6
000009E4  4E75       656          rts
                     657   ; }
                     658   ; }
                     659   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     660   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     661   ; char xtod(int c)
                     662   ; {
                     663   _xtod:
000009E6  4E56 0000  664          link      A6,#0
000009EA  2F02       665          move.l    D2,-(A7)
000009EC  242E 0008  666          move.l    8(A6),D2
                     667   ; if ((char)(c) <= (char)('9'))
000009F0  0C02 0039  668          cmp.b     #57,D2
000009F4  6E08       669          bgt.s     xtod_1
                     670   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
000009F6  1002       671          move.b    D2,D0
000009F8  0400 0030  672          sub.b     #48,D0
000009FC  6014       673          bra.s     xtod_3
                     674   xtod_1:
                     675   ; else if((char)(c) > (char)('F'))    // assume lower case
000009FE  0C02 0046  676          cmp.b     #70,D2
00000A02  6F08       677          ble.s     xtod_4
                     678   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000A04  1002       679          move.b    D2,D0
00000A06  0400 0057  680          sub.b     #87,D0
00000A0A  6006       681          bra.s     xtod_3
                     682   xtod_4:
                     683   ; else
                     684   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000A0C  1002       685          move.b    D2,D0
00000A0E  0400 0037  686          sub.b     #55,D0
                     687   xtod_3:
00000A12  241F       688          move.l    (A7)+,D2
00000A14  4E5E       689          unlk      A6
00000A16  4E75       690          rts
                     691   ; }
                     692   ; int Get2HexDigits(char *CheckSumPtr)
                     693   ; {
                     694   _Get2HexDigits:
00000A18  4E56 0000  695          link      A6,#0
00000A1C  2F02       696          move.l    D2,-(A7)
                     697   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000A1E  2F00       698          move.l    D0,-(A7)
00000A20  4EB8 093C  699          jsr       __getch
00000A24  2200       700          move.l    D0,D1
00000A26  201F       701          move.l    (A7)+,D0
00000A28  2F01       702          move.l    D1,-(A7)
00000A2A  4EB8 09E6  703          jsr       _xtod
00000A2E  584F       704          addq.w    #4,A7
00000A30  C0BC 0000  705          and.l     #255,D0
00000A34  00FF      
00000A36  E980       706          asl.l     #4,D0
00000A38  2F00       707          move.l    D0,-(A7)
00000A3A  2F01       708          move.l    D1,-(A7)
00000A3C  4EB8 093C  709          jsr       __getch
00000A40  221F       710          move.l    (A7)+,D1
00000A42  2F00       711          move.l    D0,-(A7)
00000A44  4EB8 09E6  712          jsr       _xtod
00000A48  584F       713          addq.w    #4,A7
00000A4A  2200       714          move.l    D0,D1
00000A4C  201F       715          move.l    (A7)+,D0
00000A4E  C2BC 0000  716          and.l     #255,D1
00000A52  00FF      
00000A54  8081       717          or.l      D1,D0
00000A56  2400       718          move.l    D0,D2
                     719   ; if(CheckSumPtr)
00000A58  4AAE 0008  720          tst.l     8(A6)
00000A5C  6706       721          beq.s     Get2HexDigits_1
                     722   ; *CheckSumPtr += i ;
00000A5E  206E 0008  723          move.l    8(A6),A0
00000A62  D510       724          add.b     D2,(A0)
                     725   Get2HexDigits_1:
                     726   ; return i ;
00000A64  2002       727          move.l    D2,D0
00000A66  241F       728          move.l    (A7)+,D2
00000A68  4E5E       729          unlk      A6
00000A6A  4E75       730          rts
                     731   ; }
                     732   ; int Get4HexDigits(char *CheckSumPtr)
                     733   ; {
                     734   _Get4HexDigits:
00000A6C  4E56 0000  735          link      A6,#0
                     736   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000A70  2F2E 0008  737          move.l    8(A6),-(A7)
00000A74  4EB8 0A18  738          jsr       _Get2HexDigits
00000A78  584F       739          addq.w    #4,A7
00000A7A  E180       740          asl.l     #8,D0
00000A7C  2F00       741          move.l    D0,-(A7)
00000A7E  2F2E 0008  742          move.l    8(A6),-(A7)
00000A82  4EB8 0A18  743          jsr       _Get2HexDigits
00000A86  584F       744          addq.w    #4,A7
00000A88  2200       745          move.l    D0,D1
00000A8A  201F       746          move.l    (A7)+,D0
00000A8C  8081       747          or.l      D1,D0
00000A8E  4E5E       748          unlk      A6
00000A90  4E75       749          rts
                     750   ; }
                     751   ; int Get6HexDigits(char *CheckSumPtr)
                     752   ; {
                     753   _Get6HexDigits:
00000A92  4E56 0000  754          link      A6,#0
                     755   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000A96  2F2E 0008  756          move.l    8(A6),-(A7)
00000A9A  4EB8 0A6C  757          jsr       _Get4HexDigits
00000A9E  584F       758          addq.w    #4,A7
00000AA0  E180       759          asl.l     #8,D0
00000AA2  2F00       760          move.l    D0,-(A7)
00000AA4  2F2E 0008  761          move.l    8(A6),-(A7)
00000AA8  4EB8 0A18  762          jsr       _Get2HexDigits
00000AAC  584F       763          addq.w    #4,A7
00000AAE  2200       764          move.l    D0,D1
00000AB0  201F       765          move.l    (A7)+,D0
00000AB2  8081       766          or.l      D1,D0
00000AB4  4E5E       767          unlk      A6
00000AB6  4E75       768          rts
                     769   ; }
                     770   ; int Get8HexDigits(char *CheckSumPtr)
                     771   ; {
                     772   _Get8HexDigits:
00000AB8  4E56 0000  773          link      A6,#0
                     774   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000ABC  2F2E 0008  775          move.l    8(A6),-(A7)
00000AC0  4EB8 0A6C  776          jsr       _Get4HexDigits
00000AC4  584F       777          addq.w    #4,A7
00000AC6  E180       778          asl.l     #8,D0
00000AC8  E180       779          asl.l     #8,D0
00000ACA  2F00       780          move.l    D0,-(A7)
00000ACC  2F2E 0008  781          move.l    8(A6),-(A7)
00000AD0  4EB8 0A6C  782          jsr       _Get4HexDigits
00000AD4  584F       783          addq.w    #4,A7
00000AD6  2200       784          move.l    D0,D1
00000AD8  201F       785          move.l    (A7)+,D0
00000ADA  8081       786          or.l      D1,D0
00000ADC  4E5E       787          unlk      A6
00000ADE  4E75       788          rts
                     789   ; }
                     790   ; void UnknownCommand()
                     791   ; {
                     792   _UnknownCommand:
                     793   ; printf("\r\nUnknown Command.....\r\n") ;
00000AE0  4879 0000  794          pea       @m68kde~1_1.L
00000AE4  48C0      
00000AE6  4EB9 0000  795          jsr       _printf
00000AEA  3E2C      
00000AEC  584F       796          addq.w    #4,A7
                     797   ; Help() ;
00000AEE  4EB9 0000  798          jsr       _Help
00000AF2  0B0C      
00000AF4  4E75       799          rts
                     800   ; }
                     801   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                     802   ; void CallDebugMonitor(void)
                     803   ; {
                     804   _CallDebugMonitor:
                     805   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00000AF6  4879 0000  806          pea       @m68kde~1_2.L
00000AFA  48DA      
00000AFC  4EB9 0000  807          jsr       _printf
00000B00  3E2C      
00000B02  584F       808          addq.w    #4,A7
                     809   ; menu();
00000B04  4EB9 0000  810          jsr       _menu
00000B08  0B5A      
00000B0A  4E75       811          rts
                     812   ; }
                     813   ; void Help(void)
                     814   ; {
                     815   _Help:
00000B0C  48E7 2020  816          movem.l   D2/A2,-(A7)
00000B10  45F9 0000  817          lea       _printf.L,A2
00000B14  3E2C      
                     818   ; char *banner = "\r\n----------------------------------------------------------------" ;
00000B16  41F9 0000  819          lea       @m68kde~1_3.L,A0
00000B1A  48FA      
00000B1C  2408       820          move.l    A0,D2
                     821   ; printf(banner) ;
00000B1E  2F02       822          move.l    D2,-(A7)
00000B20  4E92       823          jsr       (A2)
00000B22  584F       824          addq.w    #4,A7
                     825   ; printf("\r\n  Final Project") ;
00000B24  4879 0000  826          pea       @m68kde~1_4.L
00000B28  493E      
00000B2A  4E92       827          jsr       (A2)
00000B2C  584F       828          addq.w    #4,A7
                     829   ; printf(banner) ;
00000B2E  2F02       830          move.l    D2,-(A7)
00000B30  4E92       831          jsr       (A2)
00000B32  584F       832          addq.w    #4,A7
                     833   ; printf("\r\n  T    - Run Cosmic Impala Game") ;
00000B34  4879 0000  834          pea       @m68kde~1_5.L
00000B38  4950      
00000B3A  4E92       835          jsr       (A2)
00000B3C  584F       836          addq.w    #4,A7
                     837   ; printf(banner) ;
00000B3E  2F02       838          move.l    D2,-(A7)
00000B40  4E92       839          jsr       (A2)
00000B42  584F       840          addq.w    #4,A7
                     841   ; printf("\r\n  G    - Run Graphics Test") ;
00000B44  4879 0000  842          pea       @m68kde~1_6.L
00000B48  4972      
00000B4A  4E92       843          jsr       (A2)
00000B4C  584F       844          addq.w    #4,A7
                     845   ; printf(banner) ;
00000B4E  2F02       846          move.l    D2,-(A7)
00000B50  4E92       847          jsr       (A2)
00000B52  584F       848          addq.w    #4,A7
00000B54  4CDF 0404  849          movem.l   (A7)+,D2/A2
00000B58  4E75       850          rts
                     851   ; }
                     852   ; void menu(void)
                     853   ; {
                     854   _menu:
00000B5A  4E56 FFFC  855          link      A6,#-4
00000B5E  48E7 2020  856          movem.l   D2/A2,-(A7)
00000B62  45F9 0000  857          lea       _printf.L,A2
00000B66  3E2C      
                     858   ; char c;
                     859   ; int c1 ;
                     860   ; while(1)    {
                     861   menu_1:
                     862   ; FlushKeyboard() ;               // dump unread characters from keyboard
00000B68  4EB8 09BA  863          jsr       _FlushKeyboard
                     864   ; printf("\r\n#") ;
00000B6C  4879 0000  865          pea       @m68kde~1_7.L
00000B70  4990      
00000B72  4E92       866          jsr       (A2)
00000B74  584F       867          addq.w    #4,A7
                     868   ; c = toupper(_getch());
00000B76  2F00       869          move.l    D0,-(A7)
00000B78  4EB8 093C  870          jsr       __getch
00000B7C  2200       871          move.l    D0,D1
00000B7E  201F       872          move.l    (A7)+,D0
00000B80  2F01       873          move.l    D1,-(A7)
00000B82  4EB9 0000  874          jsr       _toupper
00000B86  3E00      
00000B88  584F       875          addq.w    #4,A7
00000B8A  1400       876          move.b    D0,D2
                     877   ; if ( c == (char)('T'))  {
00000B8C  0C02 0054  878          cmp.b     #84,D2
00000B90  6612       879          bne.s     menu_4
                     880   ; printf("\nRunning Cosmic Impalas Game\n");
00000B92  4879 0000  881          pea       @m68kde~1_8.L
00000B96  4994      
00000B98  4E92       882          jsr       (A2)
00000B9A  584F       883          addq.w    #4,A7
                     884   ; cosmic_impalas_main();
00000B9C  4EB9 0000  885          jsr       _cosmic_impalas_main
00000BA0  3DD4      
                     886   ; continue;
00000BA2  601C       887          bra.s     menu_2
                     888   menu_4:
                     889   ; } 
                     890   ; if ( c == (char)('G'))  {
00000BA4  0C02 0047  891          cmp.b     #71,D2
00000BA8  6612       892          bne.s     menu_6
                     893   ; printf("\nRunning Graphics Test\n");
00000BAA  4879 0000  894          pea       @m68kde~1_9.L
00000BAE  49B2      
00000BB0  4E92       895          jsr       (A2)
00000BB2  584F       896          addq.w    #4,A7
                     897   ; graphics_test_main();
00000BB4  4EB9 0000  898          jsr       _graphics_test_main
00000BB8  1BC6      
                     899   ; continue;
00000BBA  6004       900          bra.s     menu_2
                     901   menu_6:
                     902   ; } 
                     903   ; UnknownCommand() ;
00000BBC  4EB8 0AE0  904          jsr       _UnknownCommand
                     905   menu_2:
00000BC0  60A6       906          bra       menu_1
                     907   ; }
                     908   ; }
                     909   ; void PrintErrorMessageandAbort(char *string) {
                     910   _PrintErrorMessageandAbort:
00000BC2  4E56 0000  911          link      A6,#0
                     912   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00000BC6  4879 0000  913          pea       @m68kde~1_10.L
00000BCA  49CA      
00000BCC  4EB9 0000  914          jsr       _printf
00000BD0  3E2C      
00000BD2  584F       915          addq.w    #4,A7
                     916   ; printf("%s\r\n", string) ;
00000BD4  2F2E 0008  917          move.l    8(A6),-(A7)
00000BD8  4879 0000  918          pea       @m68kde~1_11.L
00000BDC  49E6      
00000BDE  4EB9 0000  919          jsr       _printf
00000BE2  3E2C      
00000BE4  504F       920          addq.w    #8,A7
                     921   ; menu() ;
00000BE6  4EB8 0B5A  922          jsr       _menu
00000BEA  4E5E       923          unlk      A6
00000BEC  4E75       924          rts
                     925   ; }
                     926   ; void IRQMessage(int level) {
                     927   _IRQMessage:
00000BEE  4E56 0000  928          link      A6,#0
                     929   ; printf("\r\n\r\nProgram ABORT !!!!!");
00000BF2  4879 0000  930          pea       @m68kde~1_12.L
00000BF6  49EC      
00000BF8  4EB9 0000  931          jsr       _printf
00000BFC  3E2C      
00000BFE  584F       932          addq.w    #4,A7
                     933   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00000C00  2F2E 0008  934          move.l    8(A6),-(A7)
00000C04  4879 0000  935          pea       @m68kde~1_13.L
00000C08  4A04      
00000C0A  4EB9 0000  936          jsr       _printf
00000C0E  3E2C      
00000C10  504F       937          addq.w    #8,A7
                     938   ; menu() ;
00000C12  4EB8 0B5A  939          jsr       _menu
00000C16  4E5E       940          unlk      A6
00000C18  4E75       941          rts
                     942   ; }
                     943   ; void UnhandledIRQ1(void) {
                     944   _UnhandledIRQ1:
                     945   ; IRQMessage(1);
00000C1A  4878 0001  946          pea       1
00000C1E  4EB8 0BEE  947          jsr       _IRQMessage
00000C22  584F       948          addq.w    #4,A7
00000C24  4E75       949          rts
                     950   ; }
                     951   ; void UnhandledIRQ2(void) {
                     952   _UnhandledIRQ2:
                     953   ; IRQMessage(2);
00000C26  4878 0002  954          pea       2
00000C2A  4EB8 0BEE  955          jsr       _IRQMessage
00000C2E  584F       956          addq.w    #4,A7
00000C30  4E75       957          rts
                     958   ; }
                     959   ; void UnhandledIRQ3(void){
                     960   _UnhandledIRQ3:
                     961   ; IRQMessage(3);
00000C32  4878 0003  962          pea       3
00000C36  4EB8 0BEE  963          jsr       _IRQMessage
00000C3A  584F       964          addq.w    #4,A7
00000C3C  4E75       965          rts
                     966   ; }
                     967   ; void UnhandledIRQ4(void) {
                     968   _UnhandledIRQ4:
                     969   ; IRQMessage(4);
00000C3E  4878 0004  970          pea       4
00000C42  4EB8 0BEE  971          jsr       _IRQMessage
00000C46  584F       972          addq.w    #4,A7
00000C48  4E75       973          rts
                     974   ; }
                     975   ; void UnhandledIRQ5(void) {
                     976   _UnhandledIRQ5:
                     977   ; IRQMessage(5);
00000C4A  4878 0005  978          pea       5
00000C4E  4EB8 0BEE  979          jsr       _IRQMessage
00000C52  584F       980          addq.w    #4,A7
00000C54  4E75       981          rts
                     982   ; }
                     983   ; void UnhandledIRQ6(void) {
                     984   _UnhandledIRQ6:
                     985   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00000C56  4879 0000  986          pea       @m68kde~1_14.L
00000C5A  4A28      
00000C5C  4EB8 0BC2  987          jsr       _PrintErrorMessageandAbort
00000C60  584F       988          addq.w    #4,A7
                     989   ; menu() ;
00000C62  4EB8 0B5A  990          jsr       _menu
00000C66  4E75       991          rts
                     992   ; }
                     993   ; void UnhandledIRQ7(void) {
                     994   _UnhandledIRQ7:
                     995   ; IRQMessage(7);
00000C68  4878 0007  996          pea       7
00000C6C  4EB8 0BEE  997          jsr       _IRQMessage
00000C70  584F       998          addq.w    #4,A7
00000C72  4E75       999          rts
                    1000   ; }
                    1001   ; void UnhandledTrap(void) {
                    1002   _UnhandledTrap:
                    1003   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00000C74  4879 0000 1004          pea       @m68kde~1_15.L
00000C78  4A68      
00000C7A  4EB8 0BC2 1005          jsr       _PrintErrorMessageandAbort
00000C7E  584F      1006          addq.w    #4,A7
00000C80  4E75      1007          rts
                    1008   ; }
                    1009   ; void BusError() {
                    1010   _BusError:
                    1011   ; PrintErrorMessageandAbort("BUS Error!") ;
00000C82  4879 0000 1012          pea       @m68kde~1_16.L
00000C86  4A7E      
00000C88  4EB8 0BC2 1013          jsr       _PrintErrorMessageandAbort
00000C8C  584F      1014          addq.w    #4,A7
00000C8E  4E75      1015          rts
                    1016   ; }
                    1017   ; void AddressError() {
                    1018   _AddressError:
                    1019   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00000C90  4879 0000 1020          pea       @m68kde~1_17.L
00000C94  4A8A      
00000C96  4EB8 0BC2 1021          jsr       _PrintErrorMessageandAbort
00000C9A  584F      1022          addq.w    #4,A7
00000C9C  4E75      1023          rts
                    1024   ; }
                    1025   ; void IllegalInstruction() {
                    1026   _IllegalInstruction:
                    1027   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00000C9E  4879 0000 1028          pea       @m68kde~1_18.L
00000CA2  4A9A      
00000CA4  4EB8 0BC2 1029          jsr       _PrintErrorMessageandAbort
00000CA8  584F      1030          addq.w    #4,A7
00000CAA  4E75      1031          rts
                    1032   ; }
                    1033   ; void Dividebyzero() {
                    1034   _Dividebyzero:
                    1035   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00000CAC  4879 0000 1036          pea       @m68kde~1_19.L
00000CB0  4AAE      
00000CB2  4EB8 0BC2 1037          jsr       _PrintErrorMessageandAbort
00000CB6  584F      1038          addq.w    #4,A7
00000CB8  4E75      1039          rts
                    1040   ; }
                    1041   ; void Check() {
                    1042   _Check:
                    1043   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00000CBA  4879 0000 1044          pea       @m68kde~1_20.L
00000CBE  4ABE      
00000CC0  4EB8 0BC2 1045          jsr       _PrintErrorMessageandAbort
00000CC4  584F      1046          addq.w    #4,A7
00000CC6  4E75      1047          rts
                    1048   ; }
                    1049   ; void Trapv() {
                    1050   _Trapv:
                    1051   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00000CC8  4879 0000 1052          pea       @m68kde~1_21.L
00000CCC  4AD0      
00000CCE  4EB8 0BC2 1053          jsr       _PrintErrorMessageandAbort
00000CD2  584F      1054          addq.w    #4,A7
00000CD4  4E75      1055          rts
                    1056   ; }
                    1057   ; void PrivError() {
                    1058   _PrivError:
                    1059   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00000CD6  4879 0000 1060          pea       @m68kde~1_22.L
00000CDA  4AE2      
00000CDC  4EB8 0BC2 1061          jsr       _PrintErrorMessageandAbort
00000CE0  584F      1062          addq.w    #4,A7
00000CE2  4E75      1063          rts
                    1064   ; }
                    1065   ; void UnitIRQ() {
                    1066   _UnitIRQ:
                    1067   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00000CE4  4879 0000 1068          pea       @m68kde~1_23.L
00000CE8  4AF6      
00000CEA  4EB8 0BC2 1069          jsr       _PrintErrorMessageandAbort
00000CEE  584F      1070          addq.w    #4,A7
00000CF0  4E75      1071          rts
                    1072   ; }
                    1073   ; void Spurious() {
                    1074   _Spurious:
                    1075   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00000CF2  4879 0000 1076          pea       @m68kde~1_24.L
00000CF6  4B08      
00000CF8  4EB8 0BC2 1077          jsr       _PrintErrorMessageandAbort
00000CFC  584F      1078          addq.w    #4,A7
00000CFE  4E75      1079          rts
                    1080   ; }
                    1081   ; /*********************************************************************************
                    1082   ; ** Timer ISR
                    1083   ; **********************************************************************************/
                    1084   ; void Timer_ISR(void)
                    1085   ; {
                    1086   _Timer_ISR:
                    1087   ; if(Timer1Status == 1) {       // Did Timer 1 produce the Interrupt?f
00000D00  1039 0040 1088          move.b    4194354,D0
00000D04  0032      
00000D06  0C00 0001 1089          cmp.b     #1,D0
00000D0A  6612      1090          bne.s     Timer_ISR_1
                    1091   ; clock_count_ms = clock_count_ms + 10; //100 HZ clock = 10ms per clock tick
00000D0C  06B9 0000 1092          add.l     #10,_clock_count_ms.L
00000D10  000A 0803 
00000D14  01C2      
                    1093   ; //printf("in timer isr, clock_count_ms = %d\n",clock_count_ms);
                    1094   ; Timer1Control = 3;      	// if so clear interrupt and restart timer
00000D16  13FC 0003 1095          move.b    #3,4194354
00000D1A  0040 0032 
                    1096   Timer_ISR_1:
00000D1E  4E75      1097          rts
                    1098   ; }
                    1099   ; }
                    1100   ; /**********************************************************************************
                    1101   ; ** Timer Initialisation Routine
                    1102   ; **********************************************************************************/
                    1103   ; void Timer1_Init(void)
                    1104   ; {
                    1105   _Timer1_Init:
                    1106   ; Timer1Data = 0x03;		// program 100 hz time delay into timer 1.
00000D20  13FC 0003 1107          move.b    #3,4194352
00000D24  0040 0030 
                    1108   ; /*
                    1109   ; ** timer driven off 25Mhz clock so program value so that it counts down in 0.01 secs
                    1110   ; ** the example 0x03 above is loaded into top 8 bits of a 24 bit timer so reads as
                    1111   ; ** 0x03FFFF a value of 0x03 would be 262,143/25,000,000, so is close to 1/100th sec
                    1112   ; **
                    1113   ; **
                    1114   ; ** Now write binary 00000011 to timer control register:
                    1115   ; **	Bit0 = 1 (enable interrupt from that timer)
                    1116   ; **	Bit 1 = 1 enable counting
                    1117   ; */
                    1118   ; Timer1Control = 3;
00000D28  13FC 0003 1119          move.b    #3,4194354
00000D2C  0040 0032 
00000D30  4E75      1120          rts
                    1121   ; }
                    1122   ; void main(void)
                    1123   ; {
                    1124   _main:
00000D32  4E56 FFF4 1125          link      A6,#-12
00000D36  48E7 0038 1126          movem.l   A2/A3/A4,-(A7)
00000D3A  45F8 08C6 1127          lea       _InstallExceptionHandler.L,A2
00000D3E  47F8 0D00 1128          lea       _Timer_ISR.L,A3
00000D42  49F9 0000 1129          lea       _printf.L,A4
00000D46  3E2C      
                    1130   ; char *BugMessage = "DE1-68k 15/11/2024 14:44";
00000D48  41F9 0000 1131          lea       @m68kde~1_25.L,A0
00000D4C  4B16      
00000D4E  2D48 FFF4 1132          move.l    A0,-12(A6)
                    1133   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00000D52  41F9 0000 1134          lea       @m68kde~1_26.L,A0
00000D56  4B30      
00000D58  2D48 FFF8 1135          move.l    A0,-8(A6)
                    1136   ; char *nameAndStudentNumber = "Zachariah Joseph: 45500055";
00000D5C  41F9 0000 1137          lea       @m68kde~1_27.L,A0
00000D60  4B4E      
00000D62  2D48 FFFC 1138          move.l    A0,-4(A6)
                    1139   ; clock_count_ms = 0;
00000D66  42B9 0803 1140          clr.l     _clock_count_ms.L
00000D6A  01C2      
                    1141   ; Init_RS232() ;     // initialise the RS232 port
00000D6C  4EB8 08E6 1142          jsr       _Init_RS232
                    1143   ; InstallExceptionHandler(Timer_ISR, 25) ;		      // install handler for interrupts
00000D70  4878 0019 1144          pea       25
00000D74  2F0B      1145          move.l    A3,-(A7)
00000D76  4E92      1146          jsr       (A2)
00000D78  504F      1147          addq.w    #8,A7
                    1148   ; InstallExceptionHandler(Timer_ISR, 26) ;		      // install handler for interrupts
00000D7A  4878 001A 1149          pea       26
00000D7E  2F0B      1150          move.l    A3,-(A7)
00000D80  4E92      1151          jsr       (A2)
00000D82  504F      1152          addq.w    #8,A7
                    1153   ; InstallExceptionHandler(Timer_ISR, 27) ;		      // install handler for interrupts
00000D84  4878 001B 1154          pea       27
00000D88  2F0B      1155          move.l    A3,-(A7)
00000D8A  4E92      1156          jsr       (A2)
00000D8C  504F      1157          addq.w    #8,A7
                    1158   ; InstallExceptionHandler(Timer_ISR, 28) ;		      // install handler for interrupts
00000D8E  4878 001C 1159          pea       28
00000D92  2F0B      1160          move.l    A3,-(A7)
00000D94  4E92      1161          jsr       (A2)
00000D96  504F      1162          addq.w    #8,A7
                    1163   ; InstallExceptionHandler(Timer_ISR, 29) ;		      // install handler for interrupts
00000D98  4878 001D 1164          pea       29
00000D9C  2F0B      1165          move.l    A3,-(A7)
00000D9E  4E92      1166          jsr       (A2)
00000DA0  504F      1167          addq.w    #8,A7
                    1168   ; InstallExceptionHandler(Timer_ISR, 30) ;		      // install handler for interrupts
00000DA2  4878 001E 1169          pea       30
00000DA6  2F0B      1170          move.l    A3,-(A7)
00000DA8  4E92      1171          jsr       (A2)
00000DAA  504F      1172          addq.w    #8,A7
                    1173   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00000DAC  4878 001F 1174          pea       31
00000DB0  4878 0C68 1175          pea       _UnhandledIRQ7.L
00000DB4  4E92      1176          jsr       (A2)
00000DB6  504F      1177          addq.w    #8,A7
                    1178   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00000DB8  4878 0002 1179          pea       2
00000DBC  4878 0C82 1180          pea       _BusError.L
00000DC0  4E92      1181          jsr       (A2)
00000DC2  504F      1182          addq.w    #8,A7
                    1183   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00000DC4  4878 0003 1184          pea       3
00000DC8  4878 0C90 1185          pea       _AddressError.L
00000DCC  4E92      1186          jsr       (A2)
00000DCE  504F      1187          addq.w    #8,A7
                    1188   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00000DD0  4878 0004 1189          pea       4
00000DD4  4878 0C9E 1190          pea       _IllegalInstruction.L
00000DD8  4E92      1191          jsr       (A2)
00000DDA  504F      1192          addq.w    #8,A7
                    1193   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00000DDC  4878 0005 1194          pea       5
00000DE0  4878 0CAC 1195          pea       _Dividebyzero.L
00000DE4  4E92      1196          jsr       (A2)
00000DE6  504F      1197          addq.w    #8,A7
                    1198   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00000DE8  4878 0006 1199          pea       6
00000DEC  4878 0CBA 1200          pea       _Check.L
00000DF0  4E92      1201          jsr       (A2)
00000DF2  504F      1202          addq.w    #8,A7
                    1203   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00000DF4  4878 0007 1204          pea       7
00000DF8  4878 0CC8 1205          pea       _Trapv.L
00000DFC  4E92      1206          jsr       (A2)
00000DFE  504F      1207          addq.w    #8,A7
                    1208   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00000E00  4878 0008 1209          pea       8
00000E04  4878 0CD6 1210          pea       _PrivError.L
00000E08  4E92      1211          jsr       (A2)
00000E0A  504F      1212          addq.w    #8,A7
                    1213   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00000E0C  4878 000F 1214          pea       15
00000E10  4878 0CE4 1215          pea       _UnitIRQ.L
00000E14  4E92      1216          jsr       (A2)
00000E16  504F      1217          addq.w    #8,A7
                    1218   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00000E18  4878 0018 1219          pea       24
00000E1C  4878 0CBA 1220          pea       _Check.L
00000E20  4E92      1221          jsr       (A2)
00000E22  504F      1222          addq.w    #8,A7
                    1223   ; Timer1_Init();
00000E24  4EB8 0D20 1224          jsr       _Timer1_Init
                    1225   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00000E28  4EB8 09BA 1226          jsr       _FlushKeyboard
                    1227   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00000E2C  4239 0040 1228          clr.b     4194314
00000E30  000A      
                    1229   ; printf("\r\n%s", BugMessage) ;
00000E32  2F2E FFF4 1230          move.l    -12(A6),-(A7)
00000E36  4879 0000 1231          pea       @m68kde~1_28.L
00000E3A  4B6A      
00000E3C  4E94      1232          jsr       (A4)
00000E3E  504F      1233          addq.w    #8,A7
                    1234   ; printf("\r\n%s", CopyrightMessage) ;
00000E40  2F2E FFF8 1235          move.l    -8(A6),-(A7)
00000E44  4879 0000 1236          pea       @m68kde~1_29.L
00000E48  4B70      
00000E4A  4E94      1237          jsr       (A4)
00000E4C  504F      1238          addq.w    #8,A7
                    1239   ; printf("\r\n%s", nameAndStudentNumber);
00000E4E  2F2E FFFC 1240          move.l    -4(A6),-(A7)
00000E52  4879 0000 1241          pea       @m68kde~1_30.L
00000E56  4B76      
00000E58  4E94      1242          jsr       (A4)
00000E5A  504F      1243          addq.w    #8,A7
                    1244   ; menu();
00000E5C  4EB8 0B5A 1245          jsr       _menu
00000E60  4CDF 1C00 1246          movem.l   (A7)+,A2/A3/A4
00000E64  4E5E      1247          unlk      A6
00000E66  4E75      1248          rts
                    1249   ; }
                    1250   ; C:\COSMICIMPALASM68K\PROGRAMS\DEBUGMONITORCODE\GRAPHICS_TEST.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    1251   ; #include <string.h>
                    1252   ; #define PIXEL_BUFFER_VGA_BASEADDRESS   (0x01000000)
                    1253   ; #define VIDMEM_DIM1_W_BLANK_EDGES (256)
                    1254   ; #define VIDMEM_DIM1 (224)
                    1255   ; #define VIDMEM_DIM2 (32)
                    1256   ; #define VIDEOMEM_ADDR(x,y) ((volatile unsigned char *)(PIXEL_BUFFER_VGA_BASEADDRESS + ((y)*VIDMEM_DIM1_W_BLANK_EDGES)+(x)))
                    1257   ; #define VIDMEM(x,y) (*VIDEOMEM_ADDR(x,y))
                    1258   ; #define WRITE_VIDMEM(x,y,CH) ((*(volatile unsigned char *)(PIXEL_BUFFER_VGA_BASEADDRESS + ((y)*VIDMEM_DIM1_W_BLANK_EDGES)+(x))) = CH)
                    1259   ; #define LOCHAR 0x20
                    1260   ; #define HICHAR 0x5e
                    1261   ; char graphics_font8x8[HICHAR-LOCHAR+1][8];
                    1262   ; void graphics_test_main();
                    1263   ; /// GRAPHICS FUNCTIONS
                    1264   ; void graphics_test_clrscr() {
                    1265   _graphics_test_clrscr:
00000E68  48E7 3000 1266          movem.l   D2/D3,-(A7)
                    1267   ; int a;
                    1268   ; int b;
                    1269   ; for (a = 0; a < VIDMEM_DIM1; a++) {
00000E6C  4283      1270          clr.l     D3
                    1271   graphics_test_clrscr_1:
00000E6E  0C83 0000 1272          cmp.l     #224,D3
00000E72  00E0      
00000E74  6C00 0032 1273          bge       graphics_test_clrscr_3
                    1274   ; for (b = 0; b < VIDMEM_DIM2; b++) {
00000E78  4282      1275          clr.l     D2
                    1276   graphics_test_clrscr_4:
00000E7A  0C82 0000 1277          cmp.l     #32,D2
00000E7E  0020      
00000E80  6C22      1278          bge.s     graphics_test_clrscr_6
                    1279   ; WRITE_VIDMEM(a,b,0 /*0xff*/);	   
00000E82  203C 0100 1280          move.l    #16777216,D0
00000E86  0000      
00000E88  2F02      1281          move.l    D2,-(A7)
00000E8A  4878 0100 1282          pea       256
00000E8E  4EB9 0000 1283          jsr       LMUL
00000E92  3E70      
00000E94  2217      1284          move.l    (A7),D1
00000E96  504F      1285          addq.w    #8,A7
00000E98  D283      1286          add.l     D3,D1
00000E9A  D081      1287          add.l     D1,D0
00000E9C  2040      1288          move.l    D0,A0
00000E9E  4210      1289          clr.b     (A0)
00000EA0  5282      1290          addq.l    #1,D2
00000EA2  60D6      1291          bra       graphics_test_clrscr_4
                    1292   graphics_test_clrscr_6:
00000EA4  5283      1293          addq.l    #1,D3
00000EA6  60C6      1294          bra       graphics_test_clrscr_1
                    1295   graphics_test_clrscr_3:
00000EA8  4CDF 000C 1296          movem.l   (A7)+,D2/D3
00000EAC  4E75      1297          rts
                    1298   ; }
                    1299   ; }
                    1300   ; }
                    1301   ; void graphics_xor_pixel(unsigned char x, unsigned char y) {
                    1302   _graphics_xor_pixel:
00000EAE  4E56 FFFC 1303          link      A6,#-4
                    1304   ; unsigned char* dest;
                    1305   ; dest =  VIDEOMEM_ADDR(x,y>>3);
00000EB2  203C 0100 1306          move.l    #16777216,D0
00000EB6  0000      
00000EB8  122E 000F 1307          move.b    15(A6),D1
00000EBC  E609      1308          lsr.b     #3,D1
00000EBE  C27C 00FF 1309          and.w     #255,D1
00000EC2  E141      1310          asl.w     #8,D1
00000EC4  48C1      1311          ext.l     D1
00000EC6  2F00      1312          move.l    D0,-(A7)
00000EC8  102E 000B 1313          move.b    11(A6),D0
00000ECC  C0BC 0000 1314          and.l     #255,D0
00000ED0  00FF      
00000ED2  D280      1315          add.l     D0,D1
00000ED4  201F      1316          move.l    (A7)+,D0
00000ED6  D081      1317          add.l     D1,D0
00000ED8  2D40 FFFC 1318          move.l    D0,-4(A6)
                    1319   ; *dest = (*dest) ^ (0x1 << (y&7));
00000EDC  206E FFFC 1320          move.l    -4(A6),A0
00000EE0  7001      1321          moveq     #1,D0
00000EE2  122E 000F 1322          move.b    15(A6),D1
00000EE6  C23C 0007 1323          and.b     #7,D1
00000EEA  E328      1324          lsl.b     D1,D0
00000EEC  B110      1325          eor.b     D0,(A0)
00000EEE  4E5E      1326          unlk      A6
00000EF0  4E75      1327          rts
                    1328   ; }
                    1329   ; void graphics_draw_vline(unsigned char x, unsigned char y1, unsigned char y2) {
                    1330   _graphics_draw_vline:
00000EF2  4E56 FFFC 1331          link      A6,#-4
00000EF6  48E7 3E00 1332          movem.l   D2/D3/D4/D5/D6,-(A7)
00000EFA  1A2E 0013 1333          move.b    19(A6),D5
00000EFE  CABC 0000 1334          and.l     #255,D5
00000F02  00FF      
                    1335   ; unsigned char yb1;
                    1336   ; unsigned char yb2;
                    1337   ; unsigned char val;
                    1338   ; unsigned char* dest;
                    1339   ; int nchars;
                    1340   ; yb1 = y1>>3;
00000F04  102E 000F 1341          move.b    15(A6),D0
00000F08  E608      1342          lsr.b     #3,D0
00000F0A  1C00      1343          move.b    D0,D6
                    1344   ; yb2 = y2>>3;
00000F0C  1005      1345          move.b    D5,D0
00000F0E  E608      1346          lsr.b     #3,D0
00000F10  1D40 FFFF 1347          move.b    D0,-1(A6)
                    1348   ; nchars  = (((unsigned int) yb2) & 0xff) - (((unsigned int) yb1) & 0xff);
00000F14  102E FFFF 1349          move.b    -1(A6),D0
00000F18  C0BC 0000 1350          and.l     #255,D0
00000F1C  00FF      
00000F1E  C0BC 0000 1351          and.l     #255,D0
00000F22  00FF      
00000F24  1206      1352          move.b    D6,D1
00000F26  C2BC 0000 1353          and.l     #255,D1
00000F2A  00FF      
00000F2C  C2BC 0000 1354          and.l     #255,D1
00000F30  00FF      
00000F32  9081      1355          sub.l     D1,D0
00000F34  2800      1356          move.l    D0,D4
                    1357   ; dest = VIDEOMEM_ADDR(x,yb1);
00000F36  203C 0100 1358          move.l    #16777216,D0
00000F3A  0000      
00000F3C  1206      1359          move.b    D6,D1
00000F3E  C27C 00FF 1360          and.w     #255,D1
00000F42  E141      1361          asl.w     #8,D1
00000F44  48C1      1362          ext.l     D1
00000F46  2F00      1363          move.l    D0,-(A7)
00000F48  102E 000B 1364          move.b    11(A6),D0
00000F4C  C0BC 0000 1365          and.l     #255,D0
00000F50  00FF      
00000F52  D280      1366          add.l     D0,D1
00000F54  201F      1367          move.l    (A7)+,D0
00000F56  D081      1368          add.l     D1,D0
00000F58  2600      1369          move.l    D0,D3
                    1370   ; val = 0xff << (y1&7);
00000F5A  303C 00FF 1371          move.w    #255,D0
00000F5E  122E 000F 1372          move.b    15(A6),D1
00000F62  C23C 0007 1373          and.b     #7,D1
00000F66  C27C 00FF 1374          and.w     #255,D1
00000F6A  E360      1375          asl.w     D1,D0
00000F6C  1400      1376          move.b    D0,D2
                    1377   ; *dest ^= val;
00000F6E  2043      1378          move.l    D3,A0
00000F70  B510      1379          eor.b     D2,(A0)
                    1380   ; dest = dest+VIDMEM_DIM1_W_BLANK_EDGES;
00000F72  0683 0000 1381          add.l     #256,D3
00000F76  0100      
                    1382   ; if (nchars > 0) {
00000F78  0C84 0000 1383          cmp.l     #0,D4
00000F7C  0000      
00000F7E  6F00 0036 1384          ble       graphics_draw_vline_1
                    1385   ; while (--nchars > 0) {
                    1386   graphics_draw_vline_3:
00000F82  5384      1387          subq.l    #1,D4
00000F84  0C84 0000 1388          cmp.l     #0,D4
00000F88  0000      
00000F8A  6F10      1389          ble.s     graphics_draw_vline_5
                    1390   ; val =  0xff;
00000F8C  143C 00FF 1391          move.b    #255,D2
                    1392   ; *dest ^= val;
00000F90  2043      1393          move.l    D3,A0
00000F92  B510      1394          eor.b     D2,(A0)
                    1395   ; dest = dest+VIDMEM_DIM1_W_BLANK_EDGES;	  
00000F94  0683 0000 1396          add.l     #256,D3
00000F98  0100      
00000F9A  60E6      1397          bra       graphics_draw_vline_3
                    1398   graphics_draw_vline_5:
                    1399   ; }
                    1400   ; val = (0xff >> (~y2&7));
00000F9C  303C 00FF 1401          move.w    #255,D0
00000FA0  1205      1402          move.b    D5,D1
00000FA2  4601      1403          not.b     D1
00000FA4  C23C 0007 1404          and.b     #7,D1
00000FA8  C27C 00FF 1405          and.w     #255,D1
00000FAC  E260      1406          asr.w     D1,D0
00000FAE  1400      1407          move.b    D0,D2
                    1408   ; *dest ^= val;
00000FB0  2043      1409          move.l    D3,A0
00000FB2  B510      1410          eor.b     D2,(A0)
00000FB4  601E      1411          bra.s     graphics_draw_vline_2
                    1412   graphics_draw_vline_1:
                    1413   ; } else {
                    1414   ; dest = dest-VIDMEM_DIM1_W_BLANK_EDGES; 
00000FB6  0483 0000 1415          sub.l     #256,D3
00000FBA  0100      
                    1416   ; val = (0xff << ((y2+1)&7));
00000FBC  303C 00FF 1417          move.w    #255,D0
00000FC0  1205      1418          move.b    D5,D1
00000FC2  5201      1419          addq.b    #1,D1
00000FC4  C23C 0007 1420          and.b     #7,D1
00000FC8  C27C 00FF 1421          and.w     #255,D1
00000FCC  E360      1422          asl.w     D1,D0
00000FCE  1400      1423          move.b    D0,D2
                    1424   ; *dest ^= val;
00000FD0  2043      1425          move.l    D3,A0
00000FD2  B510      1426          eor.b     D2,(A0)
                    1427   graphics_draw_vline_2:
00000FD4  4CDF 007C 1428          movem.l   (A7)+,D2/D3/D4/D5/D6
00000FD8  4E5E      1429          unlk      A6
00000FDA  4E75      1430          rts
                    1431   ; }
                    1432   ; }
                    1433   ; void graphics_draw_char(unsigned char ch, unsigned char x, unsigned char y) {
                    1434   _graphics_draw_char:
00000FDC  4E56 0000 1435          link      A6,#0
00000FE0  48E7 3800 1436          movem.l   D2/D3/D4,-(A7)
                    1437   ; unsigned char i;
                    1438   ; unsigned char* src;
                    1439   ; unsigned char* dest;
                    1440   ; src  = &graphics_font8x8[(ch-LOCHAR)][0];
00000FE4  41F9 0803 1441          lea       _graphics_font8x8.L,A0
00000FE8  022A      
00000FEA  102E 000B 1442          move.b    11(A6),D0
00000FEE  C0BC 0000 1443          and.l     #255,D0
00000FF2  00FF      
00000FF4  0480 0000 1444          sub.l     #32,D0
00000FF8  0020      
00000FFA  E788      1445          lsl.l     #3,D0
00000FFC  D1C0      1446          add.l     D0,A0
00000FFE  2808      1447          move.l    A0,D4
                    1448   ; dest = VIDEOMEM_ADDR(x*8,y);
00001000  203C 0100 1449          move.l    #16777216,D0
00001004  0000      
00001006  122E 0013 1450          move.b    19(A6),D1
0000100A  C27C 00FF 1451          and.w     #255,D1
0000100E  E141      1452          asl.w     #8,D1
00001010  48C1      1453          ext.l     D1
00001012  2F00      1454          move.l    D0,-(A7)
00001014  102E 000F 1455          move.b    15(A6),D0
00001018  C07C 00FF 1456          and.w     #255,D0
0000101C  C0FC 0008 1457          mulu.w    #8,D0
00001020  C0BC 0000 1458          and.l     #255,D0
00001024  00FF      
00001026  D280      1459          add.l     D0,D1
00001028  201F      1460          move.l    (A7)+,D0
0000102A  D081      1461          add.l     D1,D0
0000102C  2600      1462          move.l    D0,D3
                    1463   ; for (i=0; i<8; i++) {
0000102E  4202      1464          clr.b     D2
                    1465   graphics_draw_char_1:
00001030  0C02 0008 1466          cmp.b     #8,D2
00001034  640E      1467          bhs.s     graphics_draw_char_3
                    1468   ; *dest = *src;
00001036  2044      1469          move.l    D4,A0
00001038  2243      1470          move.l    D3,A1
0000103A  1290      1471          move.b    (A0),(A1)
                    1472   ; dest += 1;//32;
0000103C  5283      1473          addq.l    #1,D3
                    1474   ; src += 1;
0000103E  5284      1475          addq.l    #1,D4
00001040  5202      1476          addq.b    #1,D2
00001042  60EC      1477          bra       graphics_draw_char_1
                    1478   graphics_draw_char_3:
00001044  4CDF 001C 1479          movem.l   (A7)+,D2/D3/D4
00001048  4E5E      1480          unlk      A6
0000104A  4E75      1481          rts
                    1482   ; }
                    1483   ; }
                    1484   ; void graphics_draw_string(const char* str, unsigned char x, unsigned char y) {
                    1485   _graphics_draw_string:
0000104C  4E56 0000 1486          link      A6,#0
00001050  2F02      1487          move.l    D2,-(A7)
                    1488   ; do {
                    1489   graphics_draw_string_1:
                    1490   ; unsigned char ch;
                    1491   ; ch = *str++;
00001052  206E 0008 1492          move.l    8(A6),A0
00001056  52AE 0008 1493          addq.l    #1,8(A6)
0000105A  1410      1494          move.b    (A0),D2
                    1495   ; if (!ch) break;
0000105C  4A02      1496          tst.b     D2
0000105E  6602      1497          bne.s     graphics_draw_string_3
00001060  602E      1498          bra.s     graphics_draw_string_2
                    1499   graphics_draw_string_3:
                    1500   ; graphics_draw_char(ch, x, y);
00001062  122E 0013 1501          move.b    19(A6),D1
00001066  C2BC 0000 1502          and.l     #255,D1
0000106A  00FF      
0000106C  2F01      1503          move.l    D1,-(A7)
0000106E  122E 000F 1504          move.b    15(A6),D1
00001072  C2BC 0000 1505          and.l     #255,D1
00001076  00FF      
00001078  2F01      1506          move.l    D1,-(A7)
0000107A  C4BC 0000 1507          and.l     #255,D2
0000107E  00FF      
00001080  2F02      1508          move.l    D2,-(A7)
00001082  4EB8 0FDC 1509          jsr       _graphics_draw_char
00001086  DEFC 000C 1510          add.w     #12,A7
                    1511   ; x++;
0000108A  522E 000F 1512          addq.b    #1,15(A6)
0000108E  60C2      1513          bra       graphics_draw_string_1
                    1514   graphics_draw_string_2:
00001090  241F      1515          move.l    (A7)+,D2
00001092  4E5E      1516          unlk      A6
00001094  4E75      1517          rts
                    1518   ; } while (1);
                    1519   ; }
                    1520   ; void draw_font() {
                    1521   _draw_font:
00001096  2F02      1522          move.l    D2,-(A7)
                    1523   ; unsigned char i;
                    1524   ; i=LOCHAR;
00001098  7420      1525          moveq     #32,D2
                    1526   ; do {
                    1527   draw_font_1:
                    1528   ; graphics_draw_char(i, i&15, 31-(i>>4));
0000109A  721F      1529          moveq     #31,D1
0000109C  2F00      1530          move.l    D0,-(A7)
0000109E  1002      1531          move.b    D2,D0
000010A0  E808      1532          lsr.b     #4,D0
000010A2  9200      1533          sub.b     D0,D1
000010A4  201F      1534          move.l    (A7)+,D0
000010A6  C2BC 0000 1535          and.l     #255,D1
000010AA  00FF      
000010AC  2F01      1536          move.l    D1,-(A7)
000010AE  1202      1537          move.b    D2,D1
000010B0  C23C 000F 1538          and.b     #15,D1
000010B4  C2BC 0000 1539          and.l     #255,D1
000010B8  00FF      
000010BA  2F01      1540          move.l    D1,-(A7)
000010BC  C4BC 0000 1541          and.l     #255,D2
000010C0  00FF      
000010C2  2F02      1542          move.l    D2,-(A7)
000010C4  4EB8 0FDC 1543          jsr       _graphics_draw_char
000010C8  DEFC 000C 1544          add.w     #12,A7
                    1545   ; graphics_draw_vline(i, i, i*2);
000010CC  1202      1546          move.b    D2,D1
000010CE  C27C 00FF 1547          and.w     #255,D1
000010D2  C2FC 0002 1548          mulu.w    #2,D1
000010D6  C2BC 0000 1549          and.l     #255,D1
000010DA  00FF      
000010DC  2F01      1550          move.l    D1,-(A7)
000010DE  C4BC 0000 1551          and.l     #255,D2
000010E2  00FF      
000010E4  2F02      1552          move.l    D2,-(A7)
000010E6  C4BC 0000 1553          and.l     #255,D2
000010EA  00FF      
000010EC  2F02      1554          move.l    D2,-(A7)
000010EE  4EB8 0EF2 1555          jsr       _graphics_draw_vline
000010F2  DEFC 000C 1556          add.w     #12,A7
                    1557   ; graphics_xor_pixel(i*15, i);
000010F6  C4BC 0000 1558          and.l     #255,D2
000010FA  00FF      
000010FC  2F02      1559          move.l    D2,-(A7)
000010FE  1202      1560          move.b    D2,D1
00001100  C27C 00FF 1561          and.w     #255,D1
00001104  C2FC 000F 1562          mulu.w    #15,D1
00001108  C2BC 0000 1563          and.l     #255,D1
0000110C  00FF      
0000110E  2F01      1564          move.l    D1,-(A7)
00001110  4EB8 0EAE 1565          jsr       _graphics_xor_pixel
00001114  504F      1566          addq.w    #8,A7
00001116  5202      1567          addq.b    #1,D2
00001118  0C02 005E 1568          cmp.b     #94,D2
0000111C  6600 FF7C 1569          bne       draw_font_1
00001120  241F      1570          move.l    (A7)+,D2
00001122  4E75      1571          rts
                    1572   ; } while (++i != HICHAR);
                    1573   ; }
                    1574   ; void initialize_font() {
                    1575   _initialize_font:
00001124  2F0A      1576          move.l    A2,-(A7)
00001126  45F9 0803 1577          lea       _graphics_font8x8.L,A2
0000112A  022A      
                    1578   ; graphics_font8x8[0 ][0]=0x00;graphics_font8x8[0 ][1]=0x00;graphics_font8x8[0 ][2]=0x00;graphics_font8x8[0 ][3]=0x00;graphics_font8x8[0 ][4]=0x00;graphics_font8x8[0 ][5]=0x00;graphics_font8x8[0 ][6]=0x00;graphics_font8x8[0 ][7]=0x00;
0000112C  4212      1579          clr.b     (A2)
0000112E  422A 0001 1580          clr.b     1(A2)
00001132  422A 0002 1581          clr.b     2(A2)
00001136  422A 0003 1582          clr.b     3(A2)
0000113A  422A 0004 1583          clr.b     4(A2)
0000113E  422A 0005 1584          clr.b     5(A2)
00001142  422A 0006 1585          clr.b     6(A2)
00001146  422A 0007 1586          clr.b     7(A2)
                    1587   ; graphics_font8x8[1 ][0]=0x00;graphics_font8x8[1 ][1]=0x00;graphics_font8x8[1 ][2]=0x00;graphics_font8x8[1 ][3]=0x79;graphics_font8x8[1 ][4]=0x79;graphics_font8x8[1 ][5]=0x00;graphics_font8x8[1 ][6]=0x00;graphics_font8x8[1 ][7]=0x00;
0000114A  422A 0008 1588          clr.b     8(A2)
0000114E  422A 0009 1589          clr.b     8+1(A2)
00001152  422A 000A 1590          clr.b     8+2(A2)
00001156  157C 0079 1591          move.b    #121,8+3(A2)
0000115A  000B      
0000115C  157C 0079 1592          move.b    #121,8+4(A2)
00001160  000C      
00001162  422A 000D 1593          clr.b     8+5(A2)
00001166  422A 000E 1594          clr.b     8+6(A2)
0000116A  422A 000F 1595          clr.b     8+7(A2)
                    1596   ; graphics_font8x8[2 ][0]=0x00;graphics_font8x8[2 ][1]=0x70;graphics_font8x8[2 ][2]=0x70;graphics_font8x8[2 ][3]=0x00;graphics_font8x8[2 ][4]=0x00;graphics_font8x8[2 ][5]=0x70;graphics_font8x8[2 ][6]=0x70;graphics_font8x8[2 ][7]=0x00; 
0000116E  422A 0010 1597          clr.b     16(A2)
00001172  157C 0070 1598          move.b    #112,16+1(A2)
00001176  0011      
00001178  157C 0070 1599          move.b    #112,16+2(A2)
0000117C  0012      
0000117E  422A 0013 1600          clr.b     16+3(A2)
00001182  422A 0014 1601          clr.b     16+4(A2)
00001186  157C 0070 1602          move.b    #112,16+5(A2)
0000118A  0015      
0000118C  157C 0070 1603          move.b    #112,16+6(A2)
00001190  0016      
00001192  422A 0017 1604          clr.b     16+7(A2)
                    1605   ; graphics_font8x8[3 ][0]=0x14;graphics_font8x8[3 ][1]=0x7f;graphics_font8x8[3 ][2]=0x7f;graphics_font8x8[3 ][3]=0x14;graphics_font8x8[3 ][4]=0x14;graphics_font8x8[3 ][5]=0x7f;graphics_font8x8[3 ][6]=0x7f;graphics_font8x8[3 ][7]=0x14; 
00001196  157C 0014 1606          move.b    #20,24(A2)
0000119A  0018      
0000119C  157C 007F 1607          move.b    #127,24+1(A2)
000011A0  0019      
000011A2  157C 007F 1608          move.b    #127,24+2(A2)
000011A6  001A      
000011A8  157C 0014 1609          move.b    #20,24+3(A2)
000011AC  001B      
000011AE  157C 0014 1610          move.b    #20,24+4(A2)
000011B2  001C      
000011B4  157C 007F 1611          move.b    #127,24+5(A2)
000011B8  001D      
000011BA  157C 007F 1612          move.b    #127,24+6(A2)
000011BE  001E      
000011C0  157C 0014 1613          move.b    #20,24+7(A2)
000011C4  001F      
                    1614   ; graphics_font8x8[4 ][0]=0x00;graphics_font8x8[4 ][1]=0x12;graphics_font8x8[4 ][2]=0x3a;graphics_font8x8[4 ][3]=0x6b;graphics_font8x8[4 ][4]=0x6b;graphics_font8x8[4 ][5]=0x2e;graphics_font8x8[4 ][6]=0x24;graphics_font8x8[4 ][7]=0x00;
000011C6  422A 0020 1615          clr.b     32(A2)
000011CA  157C 0012 1616          move.b    #18,32+1(A2)
000011CE  0021      
000011D0  157C 003A 1617          move.b    #58,32+2(A2)
000011D4  0022      
000011D6  157C 006B 1618          move.b    #107,32+3(A2)
000011DA  0023      
000011DC  157C 006B 1619          move.b    #107,32+4(A2)
000011E0  0024      
000011E2  157C 002E 1620          move.b    #46,32+5(A2)
000011E6  0025      
000011E8  157C 0024 1621          move.b    #36,32+6(A2)
000011EC  0026      
000011EE  422A 0027 1622          clr.b     32+7(A2)
                    1623   ; graphics_font8x8[5 ][0]=0x00;graphics_font8x8[5 ][1]=0x63;graphics_font8x8[5 ][2]=0x66;graphics_font8x8[5 ][3]=0x0c;graphics_font8x8[5 ][4]=0x18;graphics_font8x8[5 ][5]=0x33;graphics_font8x8[5 ][6]=0x63;graphics_font8x8[5 ][7]=0x00; 
000011F2  422A 0028 1624          clr.b     40(A2)
000011F6  157C 0063 1625          move.b    #99,40+1(A2)
000011FA  0029      
000011FC  157C 0066 1626          move.b    #102,40+2(A2)
00001200  002A      
00001202  157C 000C 1627          move.b    #12,40+3(A2)
00001206  002B      
00001208  157C 0018 1628          move.b    #24,40+4(A2)
0000120C  002C      
0000120E  157C 0033 1629          move.b    #51,40+5(A2)
00001212  002D      
00001214  157C 0063 1630          move.b    #99,40+6(A2)
00001218  002E      
0000121A  422A 002F 1631          clr.b     40+7(A2)
                    1632   ; graphics_font8x8[6 ][0]=0x00;graphics_font8x8[6 ][1]=0x26;graphics_font8x8[6 ][2]=0x7f;graphics_font8x8[6 ][3]=0x59;graphics_font8x8[6 ][4]=0x59;graphics_font8x8[6 ][5]=0x77;graphics_font8x8[6 ][6]=0x27;graphics_font8x8[6 ][7]=0x05; 
0000121E  422A 0030 1633          clr.b     48(A2)
00001222  157C 0026 1634          move.b    #38,48+1(A2)
00001226  0031      
00001228  157C 007F 1635          move.b    #127,48+2(A2)
0000122C  0032      
0000122E  157C 0059 1636          move.b    #89,48+3(A2)
00001232  0033      
00001234  157C 0059 1637          move.b    #89,48+4(A2)
00001238  0034      
0000123A  157C 0077 1638          move.b    #119,48+5(A2)
0000123E  0035      
00001240  157C 0027 1639          move.b    #39,48+6(A2)
00001244  0036      
00001246  157C 0005 1640          move.b    #5,48+7(A2)
0000124A  0037      
                    1641   ; graphics_font8x8[7 ][0]=0x00;graphics_font8x8[7 ][1]=0x00;graphics_font8x8[7 ][2]=0x00;graphics_font8x8[7 ][3]=0x10;graphics_font8x8[7 ][4]=0x30;graphics_font8x8[7 ][5]=0x60;graphics_font8x8[7 ][6]=0x40;graphics_font8x8[7 ][7]=0x00; 
0000124C  422A 0038 1642          clr.b     56(A2)
00001250  422A 0039 1643          clr.b     56+1(A2)
00001254  422A 003A 1644          clr.b     56+2(A2)
00001258  157C 0010 1645          move.b    #16,56+3(A2)
0000125C  003B      
0000125E  157C 0030 1646          move.b    #48,56+4(A2)
00001262  003C      
00001264  157C 0060 1647          move.b    #96,56+5(A2)
00001268  003D      
0000126A  157C 0040 1648          move.b    #64,56+6(A2)
0000126E  003E      
00001270  422A 003F 1649          clr.b     56+7(A2)
                    1650   ; graphics_font8x8[8 ][0]=0x00;graphics_font8x8[8 ][1]=0x00;graphics_font8x8[8 ][2]=0x1c;graphics_font8x8[8 ][3]=0x3e;graphics_font8x8[8 ][4]=0x63;graphics_font8x8[8 ][5]=0x41;graphics_font8x8[8 ][6]=0x00;graphics_font8x8[8 ][7]=0x00; 
00001274  422A 0040 1651          clr.b     64(A2)
00001278  422A 0041 1652          clr.b     64+1(A2)
0000127C  157C 001C 1653          move.b    #28,64+2(A2)
00001280  0042      
00001282  157C 003E 1654          move.b    #62,64+3(A2)
00001286  0043      
00001288  157C 0063 1655          move.b    #99,64+4(A2)
0000128C  0044      
0000128E  157C 0041 1656          move.b    #65,64+5(A2)
00001292  0045      
00001294  422A 0046 1657          clr.b     64+6(A2)
00001298  422A 0047 1658          clr.b     64+7(A2)
                    1659   ; graphics_font8x8[9 ][0]=0x00;graphics_font8x8[9 ][1]=0x00;graphics_font8x8[9 ][2]=0x41;graphics_font8x8[9 ][3]=0x63;graphics_font8x8[9 ][4]=0x3e;graphics_font8x8[9 ][5]=0x1c;graphics_font8x8[9 ][6]=0x00;graphics_font8x8[9 ][7]=0x00; 
0000129C  422A 0048 1660          clr.b     72(A2)
000012A0  422A 0049 1661          clr.b     72+1(A2)
000012A4  157C 0041 1662          move.b    #65,72+2(A2)
000012A8  004A      
000012AA  157C 0063 1663          move.b    #99,72+3(A2)
000012AE  004B      
000012B0  157C 003E 1664          move.b    #62,72+4(A2)
000012B4  004C      
000012B6  157C 001C 1665          move.b    #28,72+5(A2)
000012BA  004D      
000012BC  422A 004E 1666          clr.b     72+6(A2)
000012C0  422A 004F 1667          clr.b     72+7(A2)
                    1668   ; graphics_font8x8[10][0]=0x08;graphics_font8x8[10][1]=0x2a;graphics_font8x8[10][2]=0x3e;graphics_font8x8[10][3]=0x1c;graphics_font8x8[10][4]=0x1c;graphics_font8x8[10][5]=0x3e;graphics_font8x8[10][6]=0x2a;graphics_font8x8[10][7]=0x08; 
000012C4  157C 0008 1669          move.b    #8,80(A2)
000012C8  0050      
000012CA  157C 002A 1670          move.b    #42,80+1(A2)
000012CE  0051      
000012D0  157C 003E 1671          move.b    #62,80+2(A2)
000012D4  0052      
000012D6  157C 001C 1672          move.b    #28,80+3(A2)
000012DA  0053      
000012DC  157C 001C 1673          move.b    #28,80+4(A2)
000012E0  0054      
000012E2  157C 003E 1674          move.b    #62,80+5(A2)
000012E6  0055      
000012E8  157C 002A 1675          move.b    #42,80+6(A2)
000012EC  0056      
000012EE  157C 0008 1676          move.b    #8,80+7(A2)
000012F2  0057      
                    1677   ; graphics_font8x8[11][0]=0x00;graphics_font8x8[11][1]=0x08;graphics_font8x8[11][2]=0x08;graphics_font8x8[11][3]=0x3e;graphics_font8x8[11][4]=0x3e;graphics_font8x8[11][5]=0x08;graphics_font8x8[11][6]=0x08;graphics_font8x8[11][7]=0x00; 
000012F4  422A 0058 1678          clr.b     88(A2)
000012F8  157C 0008 1679          move.b    #8,88+1(A2)
000012FC  0059      
000012FE  157C 0008 1680          move.b    #8,88+2(A2)
00001302  005A      
00001304  157C 003E 1681          move.b    #62,88+3(A2)
00001308  005B      
0000130A  157C 003E 1682          move.b    #62,88+4(A2)
0000130E  005C      
00001310  157C 0008 1683          move.b    #8,88+5(A2)
00001314  005D      
00001316  157C 0008 1684          move.b    #8,88+6(A2)
0000131A  005E      
0000131C  422A 005F 1685          clr.b     88+7(A2)
                    1686   ; graphics_font8x8[12][0]=0x00;graphics_font8x8[12][1]=0x00;graphics_font8x8[12][2]=0x00;graphics_font8x8[12][3]=0x03;graphics_font8x8[12][4]=0x03;graphics_font8x8[12][5]=0x00;graphics_font8x8[12][6]=0x00;graphics_font8x8[12][7]=0x00; 
00001320  422A 0060 1687          clr.b     96(A2)
00001324  422A 0061 1688          clr.b     96+1(A2)
00001328  422A 0062 1689          clr.b     96+2(A2)
0000132C  157C 0003 1690          move.b    #3,96+3(A2)
00001330  0063      
00001332  157C 0003 1691          move.b    #3,96+4(A2)
00001336  0064      
00001338  422A 0065 1692          clr.b     96+5(A2)
0000133C  422A 0066 1693          clr.b     96+6(A2)
00001340  422A 0067 1694          clr.b     96+7(A2)
                    1695   ; graphics_font8x8[13][0]=0x00;graphics_font8x8[13][1]=0x08;graphics_font8x8[13][2]=0x08;graphics_font8x8[13][3]=0x08;graphics_font8x8[13][4]=0x08;graphics_font8x8[13][5]=0x08;graphics_font8x8[13][6]=0x08;graphics_font8x8[13][7]=0x00; 
00001344  422A 0068 1696          clr.b     104(A2)
00001348  157C 0008 1697          move.b    #8,104+1(A2)
0000134C  0069      
0000134E  157C 0008 1698          move.b    #8,104+2(A2)
00001352  006A      
00001354  157C 0008 1699          move.b    #8,104+3(A2)
00001358  006B      
0000135A  157C 0008 1700          move.b    #8,104+4(A2)
0000135E  006C      
00001360  157C 0008 1701          move.b    #8,104+5(A2)
00001364  006D      
00001366  157C 0008 1702          move.b    #8,104+6(A2)
0000136A  006E      
0000136C  422A 006F 1703          clr.b     104+7(A2)
                    1704   ; graphics_font8x8[14][0]=0x00;graphics_font8x8[14][1]=0x00;graphics_font8x8[14][2]=0x00;graphics_font8x8[14][3]=0x03;graphics_font8x8[14][4]=0x03;graphics_font8x8[14][5]=0x00;graphics_font8x8[14][6]=0x00;graphics_font8x8[14][7]=0x00; 
00001370  422A 0070 1705          clr.b     112(A2)
00001374  422A 0071 1706          clr.b     112+1(A2)
00001378  422A 0072 1707          clr.b     112+2(A2)
0000137C  157C 0003 1708          move.b    #3,112+3(A2)
00001380  0073      
00001382  157C 0003 1709          move.b    #3,112+4(A2)
00001386  0074      
00001388  422A 0075 1710          clr.b     112+5(A2)
0000138C  422A 0076 1711          clr.b     112+6(A2)
00001390  422A 0077 1712          clr.b     112+7(A2)
                    1713   ; graphics_font8x8[15][0]=0x00;graphics_font8x8[15][1]=0x01;graphics_font8x8[15][2]=0x03;graphics_font8x8[15][3]=0x06;graphics_font8x8[15][4]=0x0c;graphics_font8x8[15][5]=0x18;graphics_font8x8[15][6]=0x30;graphics_font8x8[15][7]=0x20; 
00001394  422A 0078 1714          clr.b     120(A2)
00001398  157C 0001 1715          move.b    #1,120+1(A2)
0000139C  0079      
0000139E  157C 0003 1716          move.b    #3,120+2(A2)
000013A2  007A      
000013A4  157C 0006 1717          move.b    #6,120+3(A2)
000013A8  007B      
000013AA  157C 000C 1718          move.b    #12,120+4(A2)
000013AE  007C      
000013B0  157C 0018 1719          move.b    #24,120+5(A2)
000013B4  007D      
000013B6  157C 0030 1720          move.b    #48,120+6(A2)
000013BA  007E      
000013BC  157C 0020 1721          move.b    #32,120+7(A2)
000013C0  007F      
                    1722   ; graphics_font8x8[16][0]=0x00;graphics_font8x8[16][1]=0x3e;graphics_font8x8[16][2]=0x7f;graphics_font8x8[16][3]=0x49;graphics_font8x8[16][4]=0x51;graphics_font8x8[16][5]=0x7f;graphics_font8x8[16][6]=0x3e;graphics_font8x8[16][7]=0x00; 
000013C2  422A 0080 1723          clr.b     128(A2)
000013C6  157C 003E 1724          move.b    #62,128+1(A2)
000013CA  0081      
000013CC  157C 007F 1725          move.b    #127,128+2(A2)
000013D0  0082      
000013D2  157C 0049 1726          move.b    #73,128+3(A2)
000013D6  0083      
000013D8  157C 0051 1727          move.b    #81,128+4(A2)
000013DC  0084      
000013DE  157C 007F 1728          move.b    #127,128+5(A2)
000013E2  0085      
000013E4  157C 003E 1729          move.b    #62,128+6(A2)
000013E8  0086      
000013EA  422A 0087 1730          clr.b     128+7(A2)
                    1731   ; graphics_font8x8[17][0]=0x00;graphics_font8x8[17][1]=0x01;graphics_font8x8[17][2]=0x11;graphics_font8x8[17][3]=0x7f;graphics_font8x8[17][4]=0x7f;graphics_font8x8[17][5]=0x01;graphics_font8x8[17][6]=0x01;graphics_font8x8[17][7]=0x00; 
000013EE  422A 0088 1732          clr.b     136(A2)
000013F2  157C 0001 1733          move.b    #1,136+1(A2)
000013F6  0089      
000013F8  157C 0011 1734          move.b    #17,136+2(A2)
000013FC  008A      
000013FE  157C 007F 1735          move.b    #127,136+3(A2)
00001402  008B      
00001404  157C 007F 1736          move.b    #127,136+4(A2)
00001408  008C      
0000140A  157C 0001 1737          move.b    #1,136+5(A2)
0000140E  008D      
00001410  157C 0001 1738          move.b    #1,136+6(A2)
00001414  008E      
00001416  422A 008F 1739          clr.b     136+7(A2)
                    1740   ; graphics_font8x8[18][0]=0x00;graphics_font8x8[18][1]=0x23;graphics_font8x8[18][2]=0x67;graphics_font8x8[18][3]=0x45;graphics_font8x8[18][4]=0x49;graphics_font8x8[18][5]=0x79;graphics_font8x8[18][6]=0x31;graphics_font8x8[18][7]=0x00; 
0000141A  422A 0090 1741          clr.b     144(A2)
0000141E  157C 0023 1742          move.b    #35,144+1(A2)
00001422  0091      
00001424  157C 0067 1743          move.b    #103,144+2(A2)
00001428  0092      
0000142A  157C 0045 1744          move.b    #69,144+3(A2)
0000142E  0093      
00001430  157C 0049 1745          move.b    #73,144+4(A2)
00001434  0094      
00001436  157C 0079 1746          move.b    #121,144+5(A2)
0000143A  0095      
0000143C  157C 0031 1747          move.b    #49,144+6(A2)
00001440  0096      
00001442  422A 0097 1748          clr.b     144+7(A2)
                    1749   ; graphics_font8x8[19][0]=0x00;graphics_font8x8[19][1]=0x22;graphics_font8x8[19][2]=0x63;graphics_font8x8[19][3]=0x49;graphics_font8x8[19][4]=0x49;graphics_font8x8[19][5]=0x7f;graphics_font8x8[19][6]=0x36;graphics_font8x8[19][7]=0x00; 
00001446  422A 0098 1750          clr.b     152(A2)
0000144A  157C 0022 1751          move.b    #34,152+1(A2)
0000144E  0099      
00001450  157C 0063 1752          move.b    #99,152+2(A2)
00001454  009A      
00001456  157C 0049 1753          move.b    #73,152+3(A2)
0000145A  009B      
0000145C  157C 0049 1754          move.b    #73,152+4(A2)
00001460  009C      
00001462  157C 007F 1755          move.b    #127,152+5(A2)
00001466  009D      
00001468  157C 0036 1756          move.b    #54,152+6(A2)
0000146C  009E      
0000146E  422A 009F 1757          clr.b     152+7(A2)
                    1758   ; graphics_font8x8[20][0]=0x00;graphics_font8x8[20][1]=0x0c;graphics_font8x8[20][2]=0x0c;graphics_font8x8[20][3]=0x14;graphics_font8x8[20][4]=0x34;graphics_font8x8[20][5]=0x7f;graphics_font8x8[20][6]=0x7f;graphics_font8x8[20][7]=0x04; 
00001472  422A 00A0 1759          clr.b     160(A2)
00001476  157C 000C 1760          move.b    #12,160+1(A2)
0000147A  00A1      
0000147C  157C 000C 1761          move.b    #12,160+2(A2)
00001480  00A2      
00001482  157C 0014 1762          move.b    #20,160+3(A2)
00001486  00A3      
00001488  157C 0034 1763          move.b    #52,160+4(A2)
0000148C  00A4      
0000148E  157C 007F 1764          move.b    #127,160+5(A2)
00001492  00A5      
00001494  157C 007F 1765          move.b    #127,160+6(A2)
00001498  00A6      
0000149A  157C 0004 1766          move.b    #4,160+7(A2)
0000149E  00A7      
                    1767   ; graphics_font8x8[21][0]=0x00;graphics_font8x8[21][1]=0x72;graphics_font8x8[21][2]=0x73;graphics_font8x8[21][3]=0x51;graphics_font8x8[21][4]=0x51;graphics_font8x8[21][5]=0x5f;graphics_font8x8[21][6]=0x4e;graphics_font8x8[21][7]=0x00; 
000014A0  422A 00A8 1768          clr.b     168(A2)
000014A4  157C 0072 1769          move.b    #114,168+1(A2)
000014A8  00A9      
000014AA  157C 0073 1770          move.b    #115,168+2(A2)
000014AE  00AA      
000014B0  157C 0051 1771          move.b    #81,168+3(A2)
000014B4  00AB      
000014B6  157C 0051 1772          move.b    #81,168+4(A2)
000014BA  00AC      
000014BC  157C 005F 1773          move.b    #95,168+5(A2)
000014C0  00AD      
000014C2  157C 004E 1774          move.b    #78,168+6(A2)
000014C6  00AE      
000014C8  422A 00AF 1775          clr.b     168+7(A2)
                    1776   ; graphics_font8x8[22][0]=0x00;graphics_font8x8[22][1]=0x3e;graphics_font8x8[22][2]=0x7f;graphics_font8x8[22][3]=0x49;graphics_font8x8[22][4]=0x49;graphics_font8x8[22][5]=0x6f;graphics_font8x8[22][6]=0x26;graphics_font8x8[22][7]=0x00; 
000014CC  422A 00B0 1777          clr.b     176(A2)
000014D0  157C 003E 1778          move.b    #62,176+1(A2)
000014D4  00B1      
000014D6  157C 007F 1779          move.b    #127,176+2(A2)
000014DA  00B2      
000014DC  157C 0049 1780          move.b    #73,176+3(A2)
000014E0  00B3      
000014E2  157C 0049 1781          move.b    #73,176+4(A2)
000014E6  00B4      
000014E8  157C 006F 1782          move.b    #111,176+5(A2)
000014EC  00B5      
000014EE  157C 0026 1783          move.b    #38,176+6(A2)
000014F2  00B6      
000014F4  422A 00B7 1784          clr.b     176+7(A2)
                    1785   ; graphics_font8x8[23][0]=0x00;graphics_font8x8[23][1]=0x60;graphics_font8x8[23][2]=0x60;graphics_font8x8[23][3]=0x4f;graphics_font8x8[23][4]=0x5f;graphics_font8x8[23][5]=0x70;graphics_font8x8[23][6]=0x60;graphics_font8x8[23][7]=0x00; 
000014F8  422A 00B8 1786          clr.b     184(A2)
000014FC  157C 0060 1787          move.b    #96,184+1(A2)
00001500  00B9      
00001502  157C 0060 1788          move.b    #96,184+2(A2)
00001506  00BA      
00001508  157C 004F 1789          move.b    #79,184+3(A2)
0000150C  00BB      
0000150E  157C 005F 1790          move.b    #95,184+4(A2)
00001512  00BC      
00001514  157C 0070 1791          move.b    #112,184+5(A2)
00001518  00BD      
0000151A  157C 0060 1792          move.b    #96,184+6(A2)
0000151E  00BE      
00001520  422A 00BF 1793          clr.b     184+7(A2)
                    1794   ; graphics_font8x8[24][0]=0x00;graphics_font8x8[24][1]=0x36;graphics_font8x8[24][2]=0x7f;graphics_font8x8[24][3]=0x49;graphics_font8x8[24][4]=0x49;graphics_font8x8[24][5]=0x7f;graphics_font8x8[24][6]=0x36;graphics_font8x8[24][7]=0x00; 
00001524  422A 00C0 1795          clr.b     192(A2)
00001528  157C 0036 1796          move.b    #54,192+1(A2)
0000152C  00C1      
0000152E  157C 007F 1797          move.b    #127,192+2(A2)
00001532  00C2      
00001534  157C 0049 1798          move.b    #73,192+3(A2)
00001538  00C3      
0000153A  157C 0049 1799          move.b    #73,192+4(A2)
0000153E  00C4      
00001540  157C 007F 1800          move.b    #127,192+5(A2)
00001544  00C5      
00001546  157C 0036 1801          move.b    #54,192+6(A2)
0000154A  00C6      
0000154C  422A 00C7 1802          clr.b     192+7(A2)
                    1803   ; graphics_font8x8[25][0]=0x00;graphics_font8x8[25][1]=0x32;graphics_font8x8[25][2]=0x7b;graphics_font8x8[25][3]=0x49;graphics_font8x8[25][4]=0x49;graphics_font8x8[25][5]=0x7f;graphics_font8x8[25][6]=0x3e;graphics_font8x8[25][7]=0x00; 
00001550  422A 00C8 1804          clr.b     200(A2)
00001554  157C 0032 1805          move.b    #50,200+1(A2)
00001558  00C9      
0000155A  157C 007B 1806          move.b    #123,200+2(A2)
0000155E  00CA      
00001560  157C 0049 1807          move.b    #73,200+3(A2)
00001564  00CB      
00001566  157C 0049 1808          move.b    #73,200+4(A2)
0000156A  00CC      
0000156C  157C 007F 1809          move.b    #127,200+5(A2)
00001570  00CD      
00001572  157C 003E 1810          move.b    #62,200+6(A2)
00001576  00CE      
00001578  422A 00CF 1811          clr.b     200+7(A2)
                    1812   ; graphics_font8x8[26][0]=0x00;graphics_font8x8[26][1]=0x00;graphics_font8x8[26][2]=0x00;graphics_font8x8[26][3]=0x12;graphics_font8x8[26][4]=0x12;graphics_font8x8[26][5]=0x00;graphics_font8x8[26][6]=0x00;graphics_font8x8[26][7]=0x00; 
0000157C  422A 00D0 1813          clr.b     208(A2)
00001580  422A 00D1 1814          clr.b     208+1(A2)
00001584  422A 00D2 1815          clr.b     208+2(A2)
00001588  157C 0012 1816          move.b    #18,208+3(A2)
0000158C  00D3      
0000158E  157C 0012 1817          move.b    #18,208+4(A2)
00001592  00D4      
00001594  422A 00D5 1818          clr.b     208+5(A2)
00001598  422A 00D6 1819          clr.b     208+6(A2)
0000159C  422A 00D7 1820          clr.b     208+7(A2)
                    1821   ; graphics_font8x8[27][0]=0x00;graphics_font8x8[27][1]=0x00;graphics_font8x8[27][2]=0x00;graphics_font8x8[27][3]=0x13;graphics_font8x8[27][4]=0x13;graphics_font8x8[27][5]=0x00;graphics_font8x8[27][6]=0x00;graphics_font8x8[27][7]=0x00; 
000015A0  422A 00D8 1822          clr.b     216(A2)
000015A4  422A 00D9 1823          clr.b     216+1(A2)
000015A8  422A 00DA 1824          clr.b     216+2(A2)
000015AC  157C 0013 1825          move.b    #19,216+3(A2)
000015B0  00DB      
000015B2  157C 0013 1826          move.b    #19,216+4(A2)
000015B6  00DC      
000015B8  422A 00DD 1827          clr.b     216+5(A2)
000015BC  422A 00DE 1828          clr.b     216+6(A2)
000015C0  422A 00DF 1829          clr.b     216+7(A2)
                    1830   ; graphics_font8x8[28][0]=0x00;graphics_font8x8[28][1]=0x08;graphics_font8x8[28][2]=0x1c;graphics_font8x8[28][3]=0x36;graphics_font8x8[28][4]=0x63;graphics_font8x8[28][5]=0x41;graphics_font8x8[28][6]=0x41;graphics_font8x8[28][7]=0x00; 
000015C4  422A 00E0 1831          clr.b     224(A2)
000015C8  157C 0008 1832          move.b    #8,224+1(A2)
000015CC  00E1      
000015CE  157C 001C 1833          move.b    #28,224+2(A2)
000015D2  00E2      
000015D4  157C 0036 1834          move.b    #54,224+3(A2)
000015D8  00E3      
000015DA  157C 0063 1835          move.b    #99,224+4(A2)
000015DE  00E4      
000015E0  157C 0041 1836          move.b    #65,224+5(A2)
000015E4  00E5      
000015E6  157C 0041 1837          move.b    #65,224+6(A2)
000015EA  00E6      
000015EC  422A 00E7 1838          clr.b     224+7(A2)
                    1839   ; graphics_font8x8[29][0]=0x00;graphics_font8x8[29][1]=0x14;graphics_font8x8[29][2]=0x14;graphics_font8x8[29][3]=0x14;graphics_font8x8[29][4]=0x14;graphics_font8x8[29][5]=0x14;graphics_font8x8[29][6]=0x14;graphics_font8x8[29][7]=0x00; 
000015F0  422A 00E8 1840          clr.b     232(A2)
000015F4  157C 0014 1841          move.b    #20,232+1(A2)
000015F8  00E9      
000015FA  157C 0014 1842          move.b    #20,232+2(A2)
000015FE  00EA      
00001600  157C 0014 1843          move.b    #20,232+3(A2)
00001604  00EB      
00001606  157C 0014 1844          move.b    #20,232+4(A2)
0000160A  00EC      
0000160C  157C 0014 1845          move.b    #20,232+5(A2)
00001610  00ED      
00001612  157C 0014 1846          move.b    #20,232+6(A2)
00001616  00EE      
00001618  422A 00EF 1847          clr.b     232+7(A2)
                    1848   ; graphics_font8x8[30][0]=0x00;graphics_font8x8[30][1]=0x41;graphics_font8x8[30][2]=0x41;graphics_font8x8[30][3]=0x63;graphics_font8x8[30][4]=0x36;graphics_font8x8[30][5]=0x1c;graphics_font8x8[30][6]=0x08;graphics_font8x8[30][7]=0x00; 
0000161C  422A 00F0 1849          clr.b     240(A2)
00001620  157C 0041 1850          move.b    #65,240+1(A2)
00001624  00F1      
00001626  157C 0041 1851          move.b    #65,240+2(A2)
0000162A  00F2      
0000162C  157C 0063 1852          move.b    #99,240+3(A2)
00001630  00F3      
00001632  157C 0036 1853          move.b    #54,240+4(A2)
00001636  00F4      
00001638  157C 001C 1854          move.b    #28,240+5(A2)
0000163C  00F5      
0000163E  157C 0008 1855          move.b    #8,240+6(A2)
00001642  00F6      
00001644  422A 00F7 1856          clr.b     240+7(A2)
                    1857   ; graphics_font8x8[31][0]=0x00;graphics_font8x8[31][1]=0x20;graphics_font8x8[31][2]=0x60;graphics_font8x8[31][3]=0x45;graphics_font8x8[31][4]=0x4d;graphics_font8x8[31][5]=0x78;graphics_font8x8[31][6]=0x30;graphics_font8x8[31][7]=0x00; 
00001648  422A 00F8 1858          clr.b     248(A2)
0000164C  157C 0020 1859          move.b    #32,248+1(A2)
00001650  00F9      
00001652  157C 0060 1860          move.b    #96,248+2(A2)
00001656  00FA      
00001658  157C 0045 1861          move.b    #69,248+3(A2)
0000165C  00FB      
0000165E  157C 004D 1862          move.b    #77,248+4(A2)
00001662  00FC      
00001664  157C 0078 1863          move.b    #120,248+5(A2)
00001668  00FD      
0000166A  157C 0030 1864          move.b    #48,248+6(A2)
0000166E  00FE      
00001670  422A 00FF 1865          clr.b     248+7(A2)
                    1866   ; graphics_font8x8[32][0]=0x00;graphics_font8x8[32][1]=0x3e;graphics_font8x8[32][2]=0x7f;graphics_font8x8[32][3]=0x41;graphics_font8x8[32][4]=0x59;graphics_font8x8[32][5]=0x79;graphics_font8x8[32][6]=0x3a;graphics_font8x8[32][7]=0x00; 
00001674  422A 0100 1867          clr.b     256(A2)
00001678  157C 003E 1868          move.b    #62,256+1(A2)
0000167C  0101      
0000167E  157C 007F 1869          move.b    #127,256+2(A2)
00001682  0102      
00001684  157C 0041 1870          move.b    #65,256+3(A2)
00001688  0103      
0000168A  157C 0059 1871          move.b    #89,256+4(A2)
0000168E  0104      
00001690  157C 0079 1872          move.b    #121,256+5(A2)
00001694  0105      
00001696  157C 003A 1873          move.b    #58,256+6(A2)
0000169A  0106      
0000169C  422A 0107 1874          clr.b     256+7(A2)
                    1875   ; graphics_font8x8[33][0]=0x00;graphics_font8x8[33][1]=0x1f;graphics_font8x8[33][2]=0x3f;graphics_font8x8[33][3]=0x68;graphics_font8x8[33][4]=0x68;graphics_font8x8[33][5]=0x3f;graphics_font8x8[33][6]=0x1f;graphics_font8x8[33][7]=0x00; 
000016A0  422A 0108 1876          clr.b     264(A2)
000016A4  157C 001F 1877          move.b    #31,264+1(A2)
000016A8  0109      
000016AA  157C 003F 1878          move.b    #63,264+2(A2)
000016AE  010A      
000016B0  157C 0068 1879          move.b    #104,264+3(A2)
000016B4  010B      
000016B6  157C 0068 1880          move.b    #104,264+4(A2)
000016BA  010C      
000016BC  157C 003F 1881          move.b    #63,264+5(A2)
000016C0  010D      
000016C2  157C 001F 1882          move.b    #31,264+6(A2)
000016C6  010E      
000016C8  422A 010F 1883          clr.b     264+7(A2)
                    1884   ; graphics_font8x8[34][0]=0x00;graphics_font8x8[34][1]=0x7f;graphics_font8x8[34][2]=0x7f;graphics_font8x8[34][3]=0x49;graphics_font8x8[34][4]=0x49;graphics_font8x8[34][5]=0x7f;graphics_font8x8[34][6]=0x36;graphics_font8x8[34][7]=0x00; 
000016CC  422A 0110 1885          clr.b     272(A2)
000016D0  157C 007F 1886          move.b    #127,272+1(A2)
000016D4  0111      
000016D6  157C 007F 1887          move.b    #127,272+2(A2)
000016DA  0112      
000016DC  157C 0049 1888          move.b    #73,272+3(A2)
000016E0  0113      
000016E2  157C 0049 1889          move.b    #73,272+4(A2)
000016E6  0114      
000016E8  157C 007F 1890          move.b    #127,272+5(A2)
000016EC  0115      
000016EE  157C 0036 1891          move.b    #54,272+6(A2)
000016F2  0116      
000016F4  422A 0117 1892          clr.b     272+7(A2)
                    1893   ; graphics_font8x8[35][0]=0x00;graphics_font8x8[35][1]=0x3e;graphics_font8x8[35][2]=0x7f;graphics_font8x8[35][3]=0x41;graphics_font8x8[35][4]=0x41;graphics_font8x8[35][5]=0x63;graphics_font8x8[35][6]=0x22;graphics_font8x8[35][7]=0x00; 
000016F8  422A 0118 1894          clr.b     280(A2)
000016FC  157C 003E 1895          move.b    #62,280+1(A2)
00001700  0119      
00001702  157C 007F 1896          move.b    #127,280+2(A2)
00001706  011A      
00001708  157C 0041 1897          move.b    #65,280+3(A2)
0000170C  011B      
0000170E  157C 0041 1898          move.b    #65,280+4(A2)
00001712  011C      
00001714  157C 0063 1899          move.b    #99,280+5(A2)
00001718  011D      
0000171A  157C 0022 1900          move.b    #34,280+6(A2)
0000171E  011E      
00001720  422A 011F 1901          clr.b     280+7(A2)
                    1902   ; graphics_font8x8[36][0]=0x00;graphics_font8x8[36][1]=0x7f;graphics_font8x8[36][2]=0x7f;graphics_font8x8[36][3]=0x41;graphics_font8x8[36][4]=0x63;graphics_font8x8[36][5]=0x3e;graphics_font8x8[36][6]=0x1c;graphics_font8x8[36][7]=0x00; 
00001724  422A 0120 1903          clr.b     288(A2)
00001728  157C 007F 1904          move.b    #127,288+1(A2)
0000172C  0121      
0000172E  157C 007F 1905          move.b    #127,288+2(A2)
00001732  0122      
00001734  157C 0041 1906          move.b    #65,288+3(A2)
00001738  0123      
0000173A  157C 0063 1907          move.b    #99,288+4(A2)
0000173E  0124      
00001740  157C 003E 1908          move.b    #62,288+5(A2)
00001744  0125      
00001746  157C 001C 1909          move.b    #28,288+6(A2)
0000174A  0126      
0000174C  422A 0127 1910          clr.b     288+7(A2)
                    1911   ; graphics_font8x8[37][0]=0x00;graphics_font8x8[37][1]=0x7f;graphics_font8x8[37][2]=0x7f;graphics_font8x8[37][3]=0x49;graphics_font8x8[37][4]=0x49;graphics_font8x8[37][5]=0x41;graphics_font8x8[37][6]=0x41;graphics_font8x8[37][7]=0x00; 
00001750  422A 0128 1912          clr.b     296(A2)
00001754  157C 007F 1913          move.b    #127,296+1(A2)
00001758  0129      
0000175A  157C 007F 1914          move.b    #127,296+2(A2)
0000175E  012A      
00001760  157C 0049 1915          move.b    #73,296+3(A2)
00001764  012B      
00001766  157C 0049 1916          move.b    #73,296+4(A2)
0000176A  012C      
0000176C  157C 0041 1917          move.b    #65,296+5(A2)
00001770  012D      
00001772  157C 0041 1918          move.b    #65,296+6(A2)
00001776  012E      
00001778  422A 012F 1919          clr.b     296+7(A2)
                    1920   ; graphics_font8x8[38][0]=0x00;graphics_font8x8[38][1]=0x7f;graphics_font8x8[38][2]=0x7f;graphics_font8x8[38][3]=0x48;graphics_font8x8[38][4]=0x48;graphics_font8x8[38][5]=0x40;graphics_font8x8[38][6]=0x40;graphics_font8x8[38][7]=0x00; 
0000177C  422A 0130 1921          clr.b     304(A2)
00001780  157C 007F 1922          move.b    #127,304+1(A2)
00001784  0131      
00001786  157C 007F 1923          move.b    #127,304+2(A2)
0000178A  0132      
0000178C  157C 0048 1924          move.b    #72,304+3(A2)
00001790  0133      
00001792  157C 0048 1925          move.b    #72,304+4(A2)
00001796  0134      
00001798  157C 0040 1926          move.b    #64,304+5(A2)
0000179C  0135      
0000179E  157C 0040 1927          move.b    #64,304+6(A2)
000017A2  0136      
000017A4  422A 0137 1928          clr.b     304+7(A2)
                    1929   ; graphics_font8x8[39][0]=0x00;graphics_font8x8[39][1]=0x3e;graphics_font8x8[39][2]=0x7f;graphics_font8x8[39][3]=0x41;graphics_font8x8[39][4]=0x49;graphics_font8x8[39][5]=0x6f;graphics_font8x8[39][6]=0x2e;graphics_font8x8[39][7]=0x00; 
000017A8  422A 0138 1930          clr.b     312(A2)
000017AC  157C 003E 1931          move.b    #62,312+1(A2)
000017B0  0139      
000017B2  157C 007F 1932          move.b    #127,312+2(A2)
000017B6  013A      
000017B8  157C 0041 1933          move.b    #65,312+3(A2)
000017BC  013B      
000017BE  157C 0049 1934          move.b    #73,312+4(A2)
000017C2  013C      
000017C4  157C 006F 1935          move.b    #111,312+5(A2)
000017C8  013D      
000017CA  157C 002E 1936          move.b    #46,312+6(A2)
000017CE  013E      
000017D0  422A 013F 1937          clr.b     312+7(A2)
                    1938   ; graphics_font8x8[40][0]=0x00;graphics_font8x8[40][1]=0x7f;graphics_font8x8[40][2]=0x7f;graphics_font8x8[40][3]=0x08;graphics_font8x8[40][4]=0x08;graphics_font8x8[40][5]=0x7f;graphics_font8x8[40][6]=0x7f;graphics_font8x8[40][7]=0x00; 
000017D4  422A 0140 1939          clr.b     320(A2)
000017D8  157C 007F 1940          move.b    #127,320+1(A2)
000017DC  0141      
000017DE  157C 007F 1941          move.b    #127,320+2(A2)
000017E2  0142      
000017E4  157C 0008 1942          move.b    #8,320+3(A2)
000017E8  0143      
000017EA  157C 0008 1943          move.b    #8,320+4(A2)
000017EE  0144      
000017F0  157C 007F 1944          move.b    #127,320+5(A2)
000017F4  0145      
000017F6  157C 007F 1945          move.b    #127,320+6(A2)
000017FA  0146      
000017FC  422A 0147 1946          clr.b     320+7(A2)
                    1947   ; graphics_font8x8[41][0]=0x00;graphics_font8x8[41][1]=0x00;graphics_font8x8[41][2]=0x41;graphics_font8x8[41][3]=0x7f;graphics_font8x8[41][4]=0x7f;graphics_font8x8[41][5]=0x41;graphics_font8x8[41][6]=0x00;graphics_font8x8[41][7]=0x00; 
00001800  422A 0148 1948          clr.b     328(A2)
00001804  422A 0149 1949          clr.b     328+1(A2)
00001808  157C 0041 1950          move.b    #65,328+2(A2)
0000180C  014A      
0000180E  157C 007F 1951          move.b    #127,328+3(A2)
00001812  014B      
00001814  157C 007F 1952          move.b    #127,328+4(A2)
00001818  014C      
0000181A  157C 0041 1953          move.b    #65,328+5(A2)
0000181E  014D      
00001820  422A 014E 1954          clr.b     328+6(A2)
00001824  422A 014F 1955          clr.b     328+7(A2)
                    1956   ; graphics_font8x8[42][0]=0x00;graphics_font8x8[42][1]=0x02;graphics_font8x8[42][2]=0x03;graphics_font8x8[42][3]=0x41;graphics_font8x8[42][4]=0x7f;graphics_font8x8[42][5]=0x7e;graphics_font8x8[42][6]=0x40;graphics_font8x8[42][7]=0x00; 
00001828  422A 0150 1957          clr.b     336(A2)
0000182C  157C 0002 1958          move.b    #2,336+1(A2)
00001830  0151      
00001832  157C 0003 1959          move.b    #3,336+2(A2)
00001836  0152      
00001838  157C 0041 1960          move.b    #65,336+3(A2)
0000183C  0153      
0000183E  157C 007F 1961          move.b    #127,336+4(A2)
00001842  0154      
00001844  157C 007E 1962          move.b    #126,336+5(A2)
00001848  0155      
0000184A  157C 0040 1963          move.b    #64,336+6(A2)
0000184E  0156      
00001850  422A 0157 1964          clr.b     336+7(A2)
                    1965   ; graphics_font8x8[43][0]=0x00;graphics_font8x8[43][1]=0x7f;graphics_font8x8[43][2]=0x7f;graphics_font8x8[43][3]=0x1c;graphics_font8x8[43][4]=0x36;graphics_font8x8[43][5]=0x63;graphics_font8x8[43][6]=0x41;graphics_font8x8[43][7]=0x00; 
00001854  422A 0158 1966          clr.b     344(A2)
00001858  157C 007F 1967          move.b    #127,344+1(A2)
0000185C  0159      
0000185E  157C 007F 1968          move.b    #127,344+2(A2)
00001862  015A      
00001864  157C 001C 1969          move.b    #28,344+3(A2)
00001868  015B      
0000186A  157C 0036 1970          move.b    #54,344+4(A2)
0000186E  015C      
00001870  157C 0063 1971          move.b    #99,344+5(A2)
00001874  015D      
00001876  157C 0041 1972          move.b    #65,344+6(A2)
0000187A  015E      
0000187C  422A 015F 1973          clr.b     344+7(A2)
                    1974   ; graphics_font8x8[44][0]=0x00;graphics_font8x8[44][1]=0x7f;graphics_font8x8[44][2]=0x7f;graphics_font8x8[44][3]=0x01;graphics_font8x8[44][4]=0x01;graphics_font8x8[44][5]=0x01;graphics_font8x8[44][6]=0x01;graphics_font8x8[44][7]=0x00; 
00001880  422A 0160 1975          clr.b     352(A2)
00001884  157C 007F 1976          move.b    #127,352+1(A2)
00001888  0161      
0000188A  157C 007F 1977          move.b    #127,352+2(A2)
0000188E  0162      
00001890  157C 0001 1978          move.b    #1,352+3(A2)
00001894  0163      
00001896  157C 0001 1979          move.b    #1,352+4(A2)
0000189A  0164      
0000189C  157C 0001 1980          move.b    #1,352+5(A2)
000018A0  0165      
000018A2  157C 0001 1981          move.b    #1,352+6(A2)
000018A6  0166      
000018A8  422A 0167 1982          clr.b     352+7(A2)
                    1983   ; graphics_font8x8[45][0]=0x00;graphics_font8x8[45][1]=0x7f;graphics_font8x8[45][2]=0x7f;graphics_font8x8[45][3]=0x30;graphics_font8x8[45][4]=0x18;graphics_font8x8[45][5]=0x30;graphics_font8x8[45][6]=0x7f;graphics_font8x8[45][7]=0x7f; 
000018AC  422A 0168 1984          clr.b     360(A2)
000018B0  157C 007F 1985          move.b    #127,360+1(A2)
000018B4  0169      
000018B6  157C 007F 1986          move.b    #127,360+2(A2)
000018BA  016A      
000018BC  157C 0030 1987          move.b    #48,360+3(A2)
000018C0  016B      
000018C2  157C 0018 1988          move.b    #24,360+4(A2)
000018C6  016C      
000018C8  157C 0030 1989          move.b    #48,360+5(A2)
000018CC  016D      
000018CE  157C 007F 1990          move.b    #127,360+6(A2)
000018D2  016E      
000018D4  157C 007F 1991          move.b    #127,360+7(A2)
000018D8  016F      
                    1992   ; graphics_font8x8[46][0]=0x00;graphics_font8x8[46][1]=0x7f;graphics_font8x8[46][2]=0x7f;graphics_font8x8[46][3]=0x38;graphics_font8x8[46][4]=0x1c;graphics_font8x8[46][5]=0x7f;graphics_font8x8[46][6]=0x7f;graphics_font8x8[46][7]=0x00; 
000018DA  422A 0170 1993          clr.b     368(A2)
000018DE  157C 007F 1994          move.b    #127,368+1(A2)
000018E2  0171      
000018E4  157C 007F 1995          move.b    #127,368+2(A2)
000018E8  0172      
000018EA  157C 0038 1996          move.b    #56,368+3(A2)
000018EE  0173      
000018F0  157C 001C 1997          move.b    #28,368+4(A2)
000018F4  0174      
000018F6  157C 007F 1998          move.b    #127,368+5(A2)
000018FA  0175      
000018FC  157C 007F 1999          move.b    #127,368+6(A2)
00001900  0176      
00001902  422A 0177 2000          clr.b     368+7(A2)
                    2001   ; graphics_font8x8[47][0]=0x00;graphics_font8x8[47][1]=0x3e;graphics_font8x8[47][2]=0x7f;graphics_font8x8[47][3]=0x41;graphics_font8x8[47][4]=0x41;graphics_font8x8[47][5]=0x7f;graphics_font8x8[47][6]=0x3e;graphics_font8x8[47][7]=0x00; 
00001906  422A 0178 2002          clr.b     376(A2)
0000190A  157C 003E 2003          move.b    #62,376+1(A2)
0000190E  0179      
00001910  157C 007F 2004          move.b    #127,376+2(A2)
00001914  017A      
00001916  157C 0041 2005          move.b    #65,376+3(A2)
0000191A  017B      
0000191C  157C 0041 2006          move.b    #65,376+4(A2)
00001920  017C      
00001922  157C 007F 2007          move.b    #127,376+5(A2)
00001926  017D      
00001928  157C 003E 2008          move.b    #62,376+6(A2)
0000192C  017E      
0000192E  422A 017F 2009          clr.b     376+7(A2)
                    2010   ; graphics_font8x8[48][0]=0x00;graphics_font8x8[48][1]=0x7f;graphics_font8x8[48][2]=0x7f;graphics_font8x8[48][3]=0x48;graphics_font8x8[48][4]=0x48;graphics_font8x8[48][5]=0x78;graphics_font8x8[48][6]=0x30;graphics_font8x8[48][7]=0x00; 
00001932  422A 0180 2011          clr.b     384(A2)
00001936  157C 007F 2012          move.b    #127,384+1(A2)
0000193A  0181      
0000193C  157C 007F 2013          move.b    #127,384+2(A2)
00001940  0182      
00001942  157C 0048 2014          move.b    #72,384+3(A2)
00001946  0183      
00001948  157C 0048 2015          move.b    #72,384+4(A2)
0000194C  0184      
0000194E  157C 0078 2016          move.b    #120,384+5(A2)
00001952  0185      
00001954  157C 0030 2017          move.b    #48,384+6(A2)
00001958  0186      
0000195A  422A 0187 2018          clr.b     384+7(A2)
                    2019   ; graphics_font8x8[49][0]=0x00;graphics_font8x8[49][1]=0x3c;graphics_font8x8[49][2]=0x7e;graphics_font8x8[49][3]=0x42;graphics_font8x8[49][4]=0x43;graphics_font8x8[49][5]=0x7f;graphics_font8x8[49][6]=0x3d;graphics_font8x8[49][7]=0x00; 
0000195E  422A 0188 2020          clr.b     392(A2)
00001962  157C 003C 2021          move.b    #60,392+1(A2)
00001966  0189      
00001968  157C 007E 2022          move.b    #126,392+2(A2)
0000196C  018A      
0000196E  157C 0042 2023          move.b    #66,392+3(A2)
00001972  018B      
00001974  157C 0043 2024          move.b    #67,392+4(A2)
00001978  018C      
0000197A  157C 007F 2025          move.b    #127,392+5(A2)
0000197E  018D      
00001980  157C 003D 2026          move.b    #61,392+6(A2)
00001984  018E      
00001986  422A 018F 2027          clr.b     392+7(A2)
                    2028   ; graphics_font8x8[50][0]=0x00;graphics_font8x8[50][1]=0x7f;graphics_font8x8[50][2]=0x7f;graphics_font8x8[50][3]=0x4c;graphics_font8x8[50][4]=0x4e;graphics_font8x8[50][5]=0x7b;graphics_font8x8[50][6]=0x31;graphics_font8x8[50][7]=0x00; 
0000198A  422A 0190 2029          clr.b     400(A2)
0000198E  157C 007F 2030          move.b    #127,400+1(A2)
00001992  0191      
00001994  157C 007F 2031          move.b    #127,400+2(A2)
00001998  0192      
0000199A  157C 004C 2032          move.b    #76,400+3(A2)
0000199E  0193      
000019A0  157C 004E 2033          move.b    #78,400+4(A2)
000019A4  0194      
000019A6  157C 007B 2034          move.b    #123,400+5(A2)
000019AA  0195      
000019AC  157C 0031 2035          move.b    #49,400+6(A2)
000019B0  0196      
000019B2  422A 0197 2036          clr.b     400+7(A2)
                    2037   ; graphics_font8x8[51][0]=0x00;graphics_font8x8[51][1]=0x32;graphics_font8x8[51][2]=0x7b;graphics_font8x8[51][3]=0x49;graphics_font8x8[51][4]=0x49;graphics_font8x8[51][5]=0x6f;graphics_font8x8[51][6]=0x26;graphics_font8x8[51][7]=0x00; 
000019B6  422A 0198 2038          clr.b     408(A2)
000019BA  157C 0032 2039          move.b    #50,408+1(A2)
000019BE  0199      
000019C0  157C 007B 2040          move.b    #123,408+2(A2)
000019C4  019A      
000019C6  157C 0049 2041          move.b    #73,408+3(A2)
000019CA  019B      
000019CC  157C 0049 2042          move.b    #73,408+4(A2)
000019D0  019C      
000019D2  157C 006F 2043          move.b    #111,408+5(A2)
000019D6  019D      
000019D8  157C 0026 2044          move.b    #38,408+6(A2)
000019DC  019E      
000019DE  422A 019F 2045          clr.b     408+7(A2)
                    2046   ; graphics_font8x8[52][0]=0x00;graphics_font8x8[52][1]=0x40;graphics_font8x8[52][2]=0x40;graphics_font8x8[52][3]=0x7f;graphics_font8x8[52][4]=0x7f;graphics_font8x8[52][5]=0x40;graphics_font8x8[52][6]=0x40;graphics_font8x8[52][7]=0x00; 
000019E2  422A 01A0 2047          clr.b     416(A2)
000019E6  157C 0040 2048          move.b    #64,416+1(A2)
000019EA  01A1      
000019EC  157C 0040 2049          move.b    #64,416+2(A2)
000019F0  01A2      
000019F2  157C 007F 2050          move.b    #127,416+3(A2)
000019F6  01A3      
000019F8  157C 007F 2051          move.b    #127,416+4(A2)
000019FC  01A4      
000019FE  157C 0040 2052          move.b    #64,416+5(A2)
00001A02  01A5      
00001A04  157C 0040 2053          move.b    #64,416+6(A2)
00001A08  01A6      
00001A0A  422A 01A7 2054          clr.b     416+7(A2)
                    2055   ; graphics_font8x8[53][0]=0x00;graphics_font8x8[53][1]=0x7e;graphics_font8x8[53][2]=0x7f;graphics_font8x8[53][3]=0x01;graphics_font8x8[53][4]=0x01;graphics_font8x8[53][5]=0x7f;graphics_font8x8[53][6]=0x7e;graphics_font8x8[53][7]=0x00; 
00001A0E  422A 01A8 2056          clr.b     424(A2)
00001A12  157C 007E 2057          move.b    #126,424+1(A2)
00001A16  01A9      
00001A18  157C 007F 2058          move.b    #127,424+2(A2)
00001A1C  01AA      
00001A1E  157C 0001 2059          move.b    #1,424+3(A2)
00001A22  01AB      
00001A24  157C 0001 2060          move.b    #1,424+4(A2)
00001A28  01AC      
00001A2A  157C 007F 2061          move.b    #127,424+5(A2)
00001A2E  01AD      
00001A30  157C 007E 2062          move.b    #126,424+6(A2)
00001A34  01AE      
00001A36  422A 01AF 2063          clr.b     424+7(A2)
                    2064   ; graphics_font8x8[54][0]=0x00;graphics_font8x8[54][1]=0x7c;graphics_font8x8[54][2]=0x7e;graphics_font8x8[54][3]=0x03;graphics_font8x8[54][4]=0x03;graphics_font8x8[54][5]=0x7e;graphics_font8x8[54][6]=0x7c;graphics_font8x8[54][7]=0x00; 
00001A3A  422A 01B0 2065          clr.b     432(A2)
00001A3E  157C 007C 2066          move.b    #124,432+1(A2)
00001A42  01B1      
00001A44  157C 007E 2067          move.b    #126,432+2(A2)
00001A48  01B2      
00001A4A  157C 0003 2068          move.b    #3,432+3(A2)
00001A4E  01B3      
00001A50  157C 0003 2069          move.b    #3,432+4(A2)
00001A54  01B4      
00001A56  157C 007E 2070          move.b    #126,432+5(A2)
00001A5A  01B5      
00001A5C  157C 007C 2071          move.b    #124,432+6(A2)
00001A60  01B6      
00001A62  422A 01B7 2072          clr.b     432+7(A2)
                    2073   ; graphics_font8x8[55][0]=0x00;graphics_font8x8[55][1]=0x7f;graphics_font8x8[55][2]=0x7f;graphics_font8x8[55][3]=0x06;graphics_font8x8[55][4]=0x0c;graphics_font8x8[55][5]=0x06;graphics_font8x8[55][6]=0x7f;graphics_font8x8[55][7]=0x7f; 
00001A66  422A 01B8 2074          clr.b     440(A2)
00001A6A  157C 007F 2075          move.b    #127,440+1(A2)
00001A6E  01B9      
00001A70  157C 007F 2076          move.b    #127,440+2(A2)
00001A74  01BA      
00001A76  157C 0006 2077          move.b    #6,440+3(A2)
00001A7A  01BB      
00001A7C  157C 000C 2078          move.b    #12,440+4(A2)
00001A80  01BC      
00001A82  157C 0006 2079          move.b    #6,440+5(A2)
00001A86  01BD      
00001A88  157C 007F 2080          move.b    #127,440+6(A2)
00001A8C  01BE      
00001A8E  157C 007F 2081          move.b    #127,440+7(A2)
00001A92  01BF      
                    2082   ; graphics_font8x8[56][0]=0x00;graphics_font8x8[56][1]=0x63;graphics_font8x8[56][2]=0x77;graphics_font8x8[56][3]=0x1c;graphics_font8x8[56][4]=0x1c;graphics_font8x8[56][5]=0x77;graphics_font8x8[56][6]=0x63;graphics_font8x8[56][7]=0x00; 
00001A94  422A 01C0 2083          clr.b     448(A2)
00001A98  157C 0063 2084          move.b    #99,448+1(A2)
00001A9C  01C1      
00001A9E  157C 0077 2085          move.b    #119,448+2(A2)
00001AA2  01C2      
00001AA4  157C 001C 2086          move.b    #28,448+3(A2)
00001AA8  01C3      
00001AAA  157C 001C 2087          move.b    #28,448+4(A2)
00001AAE  01C4      
00001AB0  157C 0077 2088          move.b    #119,448+5(A2)
00001AB4  01C5      
00001AB6  157C 0063 2089          move.b    #99,448+6(A2)
00001ABA  01C6      
00001ABC  422A 01C7 2090          clr.b     448+7(A2)
                    2091   ; graphics_font8x8[57][0]=0x00;graphics_font8x8[57][1]=0x70;graphics_font8x8[57][2]=0x78;graphics_font8x8[57][3]=0x0f;graphics_font8x8[57][4]=0x0f;graphics_font8x8[57][5]=0x78;graphics_font8x8[57][6]=0x70;graphics_font8x8[57][7]=0x00; 
00001AC0  422A 01C8 2092          clr.b     456(A2)
00001AC4  157C 0070 2093          move.b    #112,456+1(A2)
00001AC8  01C9      
00001ACA  157C 0078 2094          move.b    #120,456+2(A2)
00001ACE  01CA      
00001AD0  157C 000F 2095          move.b    #15,456+3(A2)
00001AD4  01CB      
00001AD6  157C 000F 2096          move.b    #15,456+4(A2)
00001ADA  01CC      
00001ADC  157C 0078 2097          move.b    #120,456+5(A2)
00001AE0  01CD      
00001AE2  157C 0070 2098          move.b    #112,456+6(A2)
00001AE6  01CE      
00001AE8  422A 01CF 2099          clr.b     456+7(A2)
                    2100   ; graphics_font8x8[58][0]=0x00;graphics_font8x8[58][1]=0x43;graphics_font8x8[58][2]=0x47;graphics_font8x8[58][3]=0x4d;graphics_font8x8[58][4]=0x59;graphics_font8x8[58][5]=0x71;graphics_font8x8[58][6]=0x61;graphics_font8x8[58][7]=0x00; 
00001AEC  422A 01D0 2101          clr.b     464(A2)
00001AF0  157C 0043 2102          move.b    #67,464+1(A2)
00001AF4  01D1      
00001AF6  157C 0047 2103          move.b    #71,464+2(A2)
00001AFA  01D2      
00001AFC  157C 004D 2104          move.b    #77,464+3(A2)
00001B00  01D3      
00001B02  157C 0059 2105          move.b    #89,464+4(A2)
00001B06  01D4      
00001B08  157C 0071 2106          move.b    #113,464+5(A2)
00001B0C  01D5      
00001B0E  157C 0061 2107          move.b    #97,464+6(A2)
00001B12  01D6      
00001B14  422A 01D7 2108          clr.b     464+7(A2)
                    2109   ; graphics_font8x8[59][0]=0x00;graphics_font8x8[59][1]=0x00;graphics_font8x8[59][2]=0x7f;graphics_font8x8[59][3]=0x7f;graphics_font8x8[59][4]=0x41;graphics_font8x8[59][5]=0x41;graphics_font8x8[59][6]=0x00;graphics_font8x8[59][7]=0x00; 
00001B18  422A 01D8 2110          clr.b     472(A2)
00001B1C  422A 01D9 2111          clr.b     472+1(A2)
00001B20  157C 007F 2112          move.b    #127,472+2(A2)
00001B24  01DA      
00001B26  157C 007F 2113          move.b    #127,472+3(A2)
00001B2A  01DB      
00001B2C  157C 0041 2114          move.b    #65,472+4(A2)
00001B30  01DC      
00001B32  157C 0041 2115          move.b    #65,472+5(A2)
00001B36  01DD      
00001B38  422A 01DE 2116          clr.b     472+6(A2)
00001B3C  422A 01DF 2117          clr.b     472+7(A2)
                    2118   ; graphics_font8x8[60][0]=0x00;graphics_font8x8[60][1]=0x20;graphics_font8x8[60][2]=0x30;graphics_font8x8[60][3]=0x18;graphics_font8x8[60][4]=0x0c;graphics_font8x8[60][5]=0x06;graphics_font8x8[60][6]=0x03;graphics_font8x8[60][7]=0x01; 
00001B40  422A 01E0 2119          clr.b     480(A2)
00001B44  157C 0020 2120          move.b    #32,480+1(A2)
00001B48  01E1      
00001B4A  157C 0030 2121          move.b    #48,480+2(A2)
00001B4E  01E2      
00001B50  157C 0018 2122          move.b    #24,480+3(A2)
00001B54  01E3      
00001B56  157C 000C 2123          move.b    #12,480+4(A2)
00001B5A  01E4      
00001B5C  157C 0006 2124          move.b    #6,480+5(A2)
00001B60  01E5      
00001B62  157C 0003 2125          move.b    #3,480+6(A2)
00001B66  01E6      
00001B68  157C 0001 2126          move.b    #1,480+7(A2)
00001B6C  01E7      
                    2127   ; graphics_font8x8[61][0]=0x00;graphics_font8x8[61][1]=0x00;graphics_font8x8[61][2]=0x41;graphics_font8x8[61][3]=0x41;graphics_font8x8[61][4]=0x7f;graphics_font8x8[61][5]=0x7f;graphics_font8x8[61][6]=0x00;graphics_font8x8[61][7]=0x00; 
00001B6E  422A 01E8 2128          clr.b     488(A2)
00001B72  422A 01E9 2129          clr.b     488+1(A2)
00001B76  157C 0041 2130          move.b    #65,488+2(A2)
00001B7A  01EA      
00001B7C  157C 0041 2131          move.b    #65,488+3(A2)
00001B80  01EB      
00001B82  157C 007F 2132          move.b    #127,488+4(A2)
00001B86  01EC      
00001B88  157C 007F 2133          move.b    #127,488+5(A2)
00001B8C  01ED      
00001B8E  422A 01EE 2134          clr.b     488+6(A2)
00001B92  422A 01EF 2135          clr.b     488+7(A2)
                    2136   ; graphics_font8x8[62][0]=0x00;graphics_font8x8[62][1]=0x08;graphics_font8x8[62][2]=0x18;graphics_font8x8[62][3]=0x3f;graphics_font8x8[62][4]=0x3f;graphics_font8x8[62][5]=0x18;graphics_font8x8[62][6]=0x08;graphics_font8x8[62][7]=0x00;	
00001B96  422A 01F0 2137          clr.b     496(A2)
00001B9A  157C 0008 2138          move.b    #8,496+1(A2)
00001B9E  01F1      
00001BA0  157C 0018 2139          move.b    #24,496+2(A2)
00001BA4  01F2      
00001BA6  157C 003F 2140          move.b    #63,496+3(A2)
00001BAA  01F3      
00001BAC  157C 003F 2141          move.b    #63,496+4(A2)
00001BB0  01F4      
00001BB2  157C 0018 2142          move.b    #24,496+5(A2)
00001BB6  01F5      
00001BB8  157C 0008 2143          move.b    #8,496+6(A2)
00001BBC  01F6      
00001BBE  422A 01F7 2144          clr.b     496+7(A2)
00001BC2  245F      2145          move.l    (A7)+,A2
00001BC4  4E75      2146          rts
                    2147   ; }
                    2148   ; void graphics_test_main() {
                    2149   _graphics_test_main:
                    2150   ; initialize_font();
00001BC6  4EB8 1124 2151          jsr       _initialize_font
                    2152   ; graphics_test_clrscr();
00001BCA  4EB8 0E68 2153          jsr       _graphics_test_clrscr
                    2154   ; draw_font();
00001BCE  4EB8 1096 2155          jsr       _draw_font
                    2156   ; graphics_draw_string("HELLO WORLD", 0, 0);
00001BD2  42A7      2157          clr.l     -(A7)
00001BD4  42A7      2158          clr.l     -(A7)
00001BD6  4879 0000 2159          pea       @graphi~1_1.L
00001BDA  4B7C      
00001BDC  4EB8 104C 2160          jsr       _graphics_draw_string
00001BE0  DEFC 000C 2161          add.w     #12,A7
00001BE4  4E75      2162          rts
                    2163   ; }
                    2164   ; C:\COSMICIMPALASM68K\PROGRAMS\DEBUGMONITORCODE\COSMIC_IMPALAS.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    2165   ; #include <string.h>
                    2166   ; #include <stdio.h>
                    2167   ; #include <stdlib.h>
                    2168   ; #include <limits.h>
                    2169   ; #define PIXEL_BUFFER_VGA_BASEADDRESS   (0x01000000)
                    2170   ; #define VIDMEM_DIM1_W_BLANK_EDGES (256)
                    2171   ; #define VIDMEM_DIM1 (224)
                    2172   ; #define VIDMEM_DIM2 (32)
                    2173   ; #define VIDEOMEM_ADDR(x,y) ((volatile unsigned char *)(PIXEL_BUFFER_VGA_BASEADDRESS + ((y)*VIDMEM_DIM1_W_BLANK_EDGES)+(x)))
                    2174   ; #define VIDMEM(x,y) (*VIDEOMEM_ADDR(x,y))
                    2175   ; #define COSMIC_IMPALAS_TIMER_DELAY_MS (50)
                    2176   ; #define WRITE_VIDMEM(x,y,CH) ((*(volatile unsigned char *)(PIXEL_BUFFER_VGA_BASEADDRESS + ((y)*VIDMEM_DIM1_W_BLANK_EDGES)+(x))) = CH)
                    2177   ; #define MAX_ENEMIES 28
                    2178   ; int FIRE1  ;
                    2179   ; int LEFT1  ;
                    2180   ; int RIGHT1 ;
                    2181   ; #define LOCHAR 0x20
                    2182   ; #define HICHAR 0x5e
                    2183   ; //
                    2184   ; // GAME CODE
                    2185   ; //
                    2186   ; #define MAXLIVES 5
                    2187   ; typedef unsigned char byte;
                    2188   ; typedef signed char sbyte;
                    2189   ; typedef unsigned short word;
                    2190   ; typedef struct {
                    2191   ; byte x;
                    2192   ; byte y;
                    2193   ; byte shape; 
                    2194   ; } Enemy;
                    2195   ; typedef struct {
                    2196   ; byte right;
                    2197   ; byte down;
                    2198   ; } MarchMode;
                    2199   ; MarchMode this_mode, next_mode;
                    2200   ; byte enemy_index;
                    2201   ; byte num_enemies;
                    2202   ; byte player_x;
                    2203   ; byte bullet_x;
                    2204   ; byte bullet_y;
                    2205   ; byte bomb_x;
                    2206   ; byte bomb_y;
                    2207   ; byte attract;
                    2208   ; byte credits;
                    2209   ; byte curplayer;
                    2210   ; word score;
                    2211   ; byte lives;
                    2212   ; Enemy enemies[MAX_ENEMIES];
                    2213   ; char font8x8[HICHAR-LOCHAR+1][8];
                    2214   ; byte player_bitmap[56];
                    2215   ; byte bomb_bitmap[7];
                    2216   ; byte bullet_bitmap[6];
                    2217   ; byte enemy1_bitmap[34];
                    2218   ; byte enemy2_bitmap[34];
                    2219   ; byte enemy3_bitmap[34];
                    2220   ; byte enemy4_bitmap[34];
                    2221   ; byte* enemy_bitmaps[4];
                    2222   ; unsigned long seed; 
                    2223   ; extern int clock_count_ms;
                    2224   ; // Some Function Prototypes
                    2225   ; int _getch(void);
                    2226   ; void FlushKeyboard(void);
                    2227   ; ///////////////////////////////////////////////////////////////////////////
                    2228   ; //
                    2229   ; // Functions to Implement
                    2230   ; //
                    2231   ; ///////////////////////////////////////////////////////////////////////////
                    2232   ; void draw_sprite(byte* src, byte x, byte y)
                    2233   ; {
                    2234   _draw_sprite:
00001BE6  4E56 FFFC 2235          link      A6,#-4
00001BEA  48E7 3800 2236          movem.l   D2/D3/D4,-(A7)
00001BEE  282E 0008 2237          move.l    8(A6),D4
                    2238   ; byte i;
                    2239   ; byte j;
                    2240   ; byte w = *src++;
00001BF2  2044      2241          move.l    D4,A0
00001BF4  5284      2242          addq.l    #1,D4
00001BF6  1D50 FFFE 2243          move.b    (A0),-2(A6)
                    2244   ; byte h = *src++;
00001BFA  2044      2245          move.l    D4,A0
00001BFC  5284      2246          addq.l    #1,D4
00001BFE  1D50 FFFF 2247          move.b    (A0),-1(A6)
                    2248   ; for (i=0; i<h; i++) {
00001C02  4203      2249          clr.b     D3
                    2250   draw_sprite_1:
00001C04  B62E FFFF 2251          cmp.b     -1(A6),D3
00001C08  6400 0044 2252          bhs       draw_sprite_3
                    2253   ; for (j=0; j<w; j++) {
00001C0C  4202      2254          clr.b     D2
                    2255   draw_sprite_4:
00001C0E  B42E FFFE 2256          cmp.b     -2(A6),D2
00001C12  6400 0036 2257          bhs       draw_sprite_6
                    2258   ; WRITE_VIDMEM(x+i, y+j, *src);  // Add the offsets to the base position
00001C16  2044      2259          move.l    D4,A0
00001C18  203C 0100 2260          move.l    #16777216,D0
00001C1C  0000      
00001C1E  122E 0013 2261          move.b    19(A6),D1
00001C22  D202      2262          add.b     D2,D1
00001C24  C27C 00FF 2263          and.w     #255,D1
00001C28  E141      2264          asl.w     #8,D1
00001C2A  48C1      2265          ext.l     D1
00001C2C  2F00      2266          move.l    D0,-(A7)
00001C2E  102E 000F 2267          move.b    15(A6),D0
00001C32  D003      2268          add.b     D3,D0
00001C34  C0BC 0000 2269          and.l     #255,D0
00001C38  00FF      
00001C3A  D280      2270          add.l     D0,D1
00001C3C  201F      2271          move.l    (A7)+,D0
00001C3E  D081      2272          add.l     D1,D0
00001C40  2240      2273          move.l    D0,A1
00001C42  1290      2274          move.b    (A0),(A1)
                    2275   ; src++;
00001C44  5284      2276          addq.l    #1,D4
00001C46  5202      2277          addq.b    #1,D2
00001C48  60C4      2278          bra       draw_sprite_4
                    2279   draw_sprite_6:
00001C4A  5203      2280          addq.b    #1,D3
00001C4C  60B6      2281          bra       draw_sprite_1
                    2282   draw_sprite_3:
00001C4E  4CDF 001C 2283          movem.l   (A7)+,D2/D3/D4
00001C52  4E5E      2284          unlk      A6
00001C54  4E75      2285          rts
                    2286   ; }
                    2287   ; }
                    2288   ; }
                    2289   ; byte xor_sprite(const byte* src, byte x, byte y) {
                    2290   _xor_sprite:
00001C56  4E56 FFFC 2291          link      A6,#-4
00001C5A  48E7 3C00 2292          movem.l   D2/D3/D4/D5,-(A7)
00001C5E  282E 0008 2293          move.l    8(A6),D4
                    2294   ; byte i,j;
                    2295   ; byte result = 0;
00001C62  4205      2296          clr.b     D5
                    2297   ; byte w = *src++;
00001C64  2044      2298          move.l    D4,A0
00001C66  5284      2299          addq.l    #1,D4
00001C68  1D50 FFFE 2300          move.b    (A0),-2(A6)
                    2301   ; byte h = *src++;
00001C6C  2044      2302          move.l    D4,A0
00001C6E  5284      2303          addq.l    #1,D4
00001C70  1D50 FFFF 2304          move.b    (A0),-1(A6)
                    2305   ; for (i=0; i<h; i++) {
00001C74  4203      2306          clr.b     D3
                    2307   xor_sprite_1:
00001C76  B62E FFFF 2308          cmp.b     -1(A6),D3
00001C7A  6400 004A 2309          bhs       xor_sprite_3
                    2310   ; for (j=0; j<w; j++) {
00001C7E  4202      2311          clr.b     D2
                    2312   xor_sprite_4:
00001C80  B42E FFFE 2313          cmp.b     -2(A6),D2
00001C84  6400 003C 2314          bhs       xor_sprite_6
                    2315   ; result |= (VIDMEM(x+i, y+j) ^= *src++);
00001C88  203C 0100 2316          move.l    #16777216,D0
00001C8C  0000      
00001C8E  122E 0013 2317          move.b    19(A6),D1
00001C92  D202      2318          add.b     D2,D1
00001C94  C27C 00FF 2319          and.w     #255,D1
00001C98  E141      2320          asl.w     #8,D1
00001C9A  48C1      2321          ext.l     D1
00001C9C  2F00      2322          move.l    D0,-(A7)
00001C9E  102E 000F 2323          move.b    15(A6),D0
00001CA2  D003      2324          add.b     D3,D0
00001CA4  C0BC 0000 2325          and.l     #255,D0
00001CA8  00FF      
00001CAA  D280      2326          add.l     D0,D1
00001CAC  201F      2327          move.l    (A7)+,D0
00001CAE  D081      2328          add.l     D1,D0
00001CB0  2040      2329          move.l    D0,A0
00001CB2  2244      2330          move.l    D4,A1
00001CB4  5284      2331          addq.l    #1,D4
00001CB6  1011      2332          move.b    (A1),D0
00001CB8  B110      2333          eor.b     D0,(A0)
00001CBA  1010      2334          move.b    (A0),D0
00001CBC  8A00      2335          or.b      D0,D5
00001CBE  5202      2336          addq.b    #1,D2
00001CC0  60BE      2337          bra       xor_sprite_4
                    2338   xor_sprite_6:
00001CC2  5203      2339          addq.b    #1,D3
00001CC4  60B0      2340          bra       xor_sprite_1
                    2341   xor_sprite_3:
                    2342   ; }
                    2343   ; }
                    2344   ; return result;
00001CC6  1005      2345          move.b    D5,D0
00001CC8  4CDF 003C 2346          movem.l   (A7)+,D2/D3/D4/D5
00001CCC  4E5E      2347          unlk      A6
00001CCE  4E75      2348          rts
                    2349   ; }
                    2350   ; void erase_sprite(const byte* src, byte x, byte y) {
                    2351   _erase_sprite:
00001CD0  4E56 FFFC 2352          link      A6,#-4
00001CD4  48E7 3800 2353          movem.l   D2/D3/D4,-(A7)
00001CD8  282E 0008 2354          move.l    8(A6),D4
                    2355   ; byte i,j;
                    2356   ; byte w = *src++;
00001CDC  2044      2357          move.l    D4,A0
00001CDE  5284      2358          addq.l    #1,D4
00001CE0  1D50 FFFE 2359          move.b    (A0),-2(A6)
                    2360   ; byte h = *src++;
00001CE4  2044      2361          move.l    D4,A0
00001CE6  5284      2362          addq.l    #1,D4
00001CE8  1D50 FFFF 2363          move.b    (A0),-1(A6)
                    2364   ; for (i=0; i<h; i++) {
00001CEC  4203      2365          clr.b     D3
                    2366   erase_sprite_1:
00001CEE  B62E FFFF 2367          cmp.b     -1(A6),D3
00001CF2  6400 0048 2368          bhs       erase_sprite_3
                    2369   ; for (j=0; j<w; j++) {
00001CF6  4202      2370          clr.b     D2
                    2371   erase_sprite_4:
00001CF8  B42E FFFE 2372          cmp.b     -2(A6),D2
00001CFC  6400 003A 2373          bhs       erase_sprite_6
                    2374   ; VIDMEM(x+i, y+j) &= ~(*src++);
00001D00  203C 0100 2375          move.l    #16777216,D0
00001D04  0000      
00001D06  122E 0013 2376          move.b    19(A6),D1
00001D0A  D202      2377          add.b     D2,D1
00001D0C  C27C 00FF 2378          and.w     #255,D1
00001D10  E141      2379          asl.w     #8,D1
00001D12  48C1      2380          ext.l     D1
00001D14  2F00      2381          move.l    D0,-(A7)
00001D16  102E 000F 2382          move.b    15(A6),D0
00001D1A  D003      2383          add.b     D3,D0
00001D1C  C0BC 0000 2384          and.l     #255,D0
00001D20  00FF      
00001D22  D280      2385          add.l     D0,D1
00001D24  201F      2386          move.l    (A7)+,D0
00001D26  D081      2387          add.l     D1,D0
00001D28  2040      2388          move.l    D0,A0
00001D2A  2244      2389          move.l    D4,A1
00001D2C  5284      2390          addq.l    #1,D4
00001D2E  1011      2391          move.b    (A1),D0
00001D30  4600      2392          not.b     D0
00001D32  C110      2393          and.b     D0,(A0)
00001D34  5202      2394          addq.b    #1,D2
00001D36  60C0      2395          bra       erase_sprite_4
                    2396   erase_sprite_6:
00001D38  5203      2397          addq.b    #1,D3
00001D3A  60B2      2398          bra       erase_sprite_1
                    2399   erase_sprite_3:
00001D3C  4CDF 001C 2400          movem.l   (A7)+,D2/D3/D4
00001D40  4E5E      2401          unlk      A6
00001D42  4E75      2402          rts
                    2403   ; }
                    2404   ; }
                    2405   ; }
                    2406   ; void clear_sprite(byte *src, byte x, byte y)
                    2407   ; {
                    2408   _clear_sprite:
00001D44  4E56 FFFC 2409          link      A6,#-4
00001D48  48E7 3000 2410          movem.l   D2/D3,-(A7)
                    2411   ; byte i;
                    2412   ; byte j;
                    2413   ; byte w = *src++;
00001D4C  206E 0008 2414          move.l    8(A6),A0
00001D50  52AE 0008 2415          addq.l    #1,8(A6)
00001D54  1D50 FFFE 2416          move.b    (A0),-2(A6)
                    2417   ; byte h = *src++;
00001D58  206E 0008 2418          move.l    8(A6),A0
00001D5C  52AE 0008 2419          addq.l    #1,8(A6)
00001D60  1D50 FFFF 2420          move.b    (A0),-1(A6)
                    2421   ; for (i=0; i<h; i++) {
00001D64  4203      2422          clr.b     D3
                    2423   clear_sprite_1:
00001D66  B62E FFFF 2424          cmp.b     -1(A6),D3
00001D6A  6400 0040 2425          bhs       clear_sprite_3
                    2426   ; for (j=0; j<w; j++) {
00001D6E  4202      2427          clr.b     D2
                    2428   clear_sprite_4:
00001D70  B42E FFFE 2429          cmp.b     -2(A6),D2
00001D74  6400 0032 2430          bhs       clear_sprite_6
                    2431   ; WRITE_VIDMEM(x+i, y+j, 0);  // Add the offsets to the base position
00001D78  203C 0100 2432          move.l    #16777216,D0
00001D7C  0000      
00001D7E  122E 0013 2433          move.b    19(A6),D1
00001D82  D202      2434          add.b     D2,D1
00001D84  C27C 00FF 2435          and.w     #255,D1
00001D88  E141      2436          asl.w     #8,D1
00001D8A  48C1      2437          ext.l     D1
00001D8C  2F00      2438          move.l    D0,-(A7)
00001D8E  102E 000F 2439          move.b    15(A6),D0
00001D92  D003      2440          add.b     D3,D0
00001D94  C0BC 0000 2441          and.l     #255,D0
00001D98  00FF      
00001D9A  D280      2442          add.l     D0,D1
00001D9C  201F      2443          move.l    (A7)+,D0
00001D9E  D081      2444          add.l     D1,D0
00001DA0  2040      2445          move.l    D0,A0
00001DA2  4210      2446          clr.b     (A0)
00001DA4  5202      2447          addq.b    #1,D2
00001DA6  60C8      2448          bra       clear_sprite_4
                    2449   clear_sprite_6:
00001DA8  5203      2450          addq.b    #1,D3
00001DAA  60BA      2451          bra       clear_sprite_1
                    2452   clear_sprite_3:
00001DAC  4CDF 000C 2453          movem.l   (A7)+,D2/D3
00001DB0  4E5E      2454          unlk      A6
00001DB2  4E75      2455          rts
                    2456   ; }
                    2457   ; }
                    2458   ; }
                    2459   ; void move_player() {
                    2460   _move_player:
                    2461   ; //complete this function
                    2462   ; // Clear sprite
                    2463   ; if (attract) return;
00001DB4  4A39 0803 2464          tst.b     _attract.L
00001DB8  0440      
00001DBA  6704      2465          beq.s     move_player_1
00001DBC  6000 00AC 2466          bra       move_player_3
                    2467   move_player_1:
                    2468   ; check_for_keypress();
00001DC0  4EB9 0000 2469          jsr       _check_for_keypress
00001DC4  1E6C      
                    2470   ; clear_sprite(player_bitmap, player_x, 1);
00001DC6  4878 0001 2471          pea       1
00001DCA  1239 0803 2472          move.b    _player_x.L,D1
00001DCE  0436      
00001DD0  C2BC 0000 2473          and.l     #255,D1
00001DD4  00FF      
00001DD6  2F01      2474          move.l    D1,-(A7)
00001DD8  4879 0803 2475          pea       _player_bitmap.L
00001DDC  0696      
00001DDE  4EB8 1D44 2476          jsr       _clear_sprite
00001DE2  DEFC 000C 2477          add.w     #12,A7
                    2478   ; if (LEFT1) {
00001DE6  4AB9 0803 2479          tst.l     _LEFT1.L
00001DEA  0426      
00001DEC  671A      2480          beq.s     move_player_4
                    2481   ; if (player_x > 0) player_x--;
00001DEE  1039 0803 2482          move.b    _player_x.L,D0
00001DF2  0436      
00001DF4  0C00 0000 2483          cmp.b     #0,D0
00001DF8  6306      2484          bls.s     move_player_6
00001DFA  5339 0803 2485          subq.b    #1,_player_x.L
00001DFE  0436      
                    2486   move_player_6:
                    2487   ; LEFT1 = 0;
00001E00  42B9 0803 2488          clr.l     _LEFT1.L
00001E04  0426      
00001E06  6042      2489          bra.s     move_player_12
                    2490   move_player_4:
                    2491   ; } else if (RIGHT1) {
00001E08  4AB9 0803 2492          tst.l     _RIGHT1.L
00001E0C  042A      
00001E0E  671E      2493          beq.s     move_player_8
                    2494   ; if (player_x < VIDMEM_DIM1-26) player_x++;
00001E10  1039 0803 2495          move.b    _player_x.L,D0
00001E14  0436      
00001E16  C07C 00FF 2496          and.w     #255,D0
00001E1A  0C40 00C6 2497          cmp.w     #198,D0
00001E1E  6406      2498          bhs.s     move_player_10
00001E20  5239 0803 2499          addq.b    #1,_player_x.L
00001E24  0436      
                    2500   move_player_10:
                    2501   ; RIGHT1 = 0;
00001E26  42B9 0803 2502          clr.l     _RIGHT1.L
00001E2A  042A      
00001E2C  601C      2503          bra.s     move_player_12
                    2504   move_player_8:
                    2505   ; } else if (FIRE1 && bullet_y == 0) {
00001E2E  4AB9 0803 2506          tst.l     _FIRE1.L
00001E32  0422      
00001E34  6714      2507          beq.s     move_player_12
00001E36  1039 0803 2508          move.b    _bullet_y.L,D0
00001E3A  043A      
00001E3C  660C      2509          bne.s     move_player_12
                    2510   ; fire_bullet();
00001E3E  4EB9 0000 2511          jsr       _fire_bullet
00001E42  2A3E      
                    2512   ; FIRE1 = 0;
00001E44  42B9 0803 2513          clr.l     _FIRE1.L
00001E48  0422      
                    2514   move_player_12:
                    2515   ; }
                    2516   ; // logic for moving player
                    2517   ; // draw player
                    2518   ; draw_sprite(player_bitmap, player_x, 1);
00001E4A  4878 0001 2519          pea       1
00001E4E  1239 0803 2520          move.b    _player_x.L,D1
00001E52  0436      
00001E54  C2BC 0000 2521          and.l     #255,D1
00001E58  00FF      
00001E5A  2F01      2522          move.l    D1,-(A7)
00001E5C  4879 0803 2523          pea       _player_bitmap.L
00001E60  0696      
00001E62  4EB8 1BE6 2524          jsr       _draw_sprite
00001E66  DEFC 000C 2525          add.w     #12,A7
                    2526   move_player_3:
00001E6A  4E75      2527          rts
                    2528   ; }
                    2529   ; void check_for_keypress() {
                    2530   _check_for_keypress:
00001E6C  2F02      2531          move.l    D2,-(A7)
                    2532   ; //complete this function
                    2533   ; char c;
                    2534   ; //check for keypresses and set the appropriate flags
                    2535   ; //FIRE1, LEFT1, RIGHT1
                    2536   ; c = toupper(_waitch());
00001E6E  2F00      2537          move.l    D0,-(A7)
00001E70  4EB8 097A 2538          jsr       __waitch
00001E74  2200      2539          move.l    D0,D1
00001E76  201F      2540          move.l    (A7)+,D0
00001E78  2F01      2541          move.l    D1,-(A7)
00001E7A  4EB9 0000 2542          jsr       _toupper
00001E7E  3E00      
00001E80  584F      2543          addq.w    #4,A7
00001E82  1400      2544          move.b    D0,D2
                    2545   ; if ( c == (char)('A'))  {
00001E84  0C02 0041 2546          cmp.b     #65,D2
00001E88  660C      2547          bne.s     check_for_keypress_1
                    2548   ; LEFT1 = 1;
00001E8A  23FC 0000 2549          move.l    #1,_LEFT1.L
00001E8E  0001 0803 
00001E92  0426      
00001E94  6022      2550          bra.s     check_for_keypress_5
                    2551   check_for_keypress_1:
                    2552   ; } else if ( c == (char)('D')) {
00001E96  0C02 0044 2553          cmp.b     #68,D2
00001E9A  660C      2554          bne.s     check_for_keypress_3
                    2555   ; RIGHT1 = 1;
00001E9C  23FC 0000 2556          move.l    #1,_RIGHT1.L
00001EA0  0001 0803 
00001EA4  042A      
00001EA6  6010      2557          bra.s     check_for_keypress_5
                    2558   check_for_keypress_3:
                    2559   ; } else if ( c == (char)(' ')) {
00001EA8  0C02 0020 2560          cmp.b     #32,D2
00001EAC  660A      2561          bne.s     check_for_keypress_5
                    2562   ; FIRE1 = 1;
00001EAE  23FC 0000 2563          move.l    #1,_FIRE1.L
00001EB2  0001 0803 
00001EB6  0422      
                    2564   check_for_keypress_5:
00001EB8  241F      2565          move.l    (A7)+,D2
00001EBA  4E75      2566          rts
                    2567   ; }
                    2568   ; }
                    2569   ; ///////////////////////////////////////////////////////////////////////////
                    2570   ; //
                    2571   ; // End Functions to Implement
                    2572   ; //
                    2573   ; ///////////////////////////////////////////////////////////////////////////
                    2574   ; // Set the seed
                    2575   ; void srand(unsigned long new_seed) {
                    2576   _srand:
00001EBC  4E56 0000 2577          link      A6,#0
                    2578   ; seed = new_seed;
00001EC0  23EE 0008 2579          move.l    8(A6),_seed.L
00001EC4  0803 0772 
00001EC8  4E5E      2580          unlk      A6
00001ECA  4E75      2581          rts
                    2582   ; }
                    2583   ; // Generate a pseudorandom number
                    2584   ; unsigned long long_rand(void) {
                    2585   _long_rand:
00001ECC  2F0A      2586          move.l    A2,-(A7)
00001ECE  45F9 0803 2587          lea       _seed.L,A2
00001ED2  0772      
                    2588   ; seed ^= seed << 13; // XOR with shifted value
00001ED4  2012      2589          move.l    (A2),D0
00001ED6  E188      2590          lsl.l     #8,D0
00001ED8  EB88      2591          lsl.l     #5,D0
00001EDA  B192      2592          eor.l     D0,(A2)
                    2593   ; seed ^= seed >> 17;
00001EDC  2012      2594          move.l    (A2),D0
00001EDE  E088      2595          lsr.l     #8,D0
00001EE0  E088      2596          lsr.l     #8,D0
00001EE2  E288      2597          lsr.l     #1,D0
00001EE4  B192      2598          eor.l     D0,(A2)
                    2599   ; seed ^= seed << 5;
00001EE6  2012      2600          move.l    (A2),D0
00001EE8  EB88      2601          lsl.l     #5,D0
00001EEA  B192      2602          eor.l     D0,(A2)
                    2603   ; return seed;
00001EEC  2012      2604          move.l    (A2),D0
00001EEE  245F      2605          move.l    (A7)+,A2
00001EF0  4E75      2606          rts
                    2607   ; }
                    2608   ; int clock() {
                    2609   _clock:
                    2610   ; return clock_count_ms;
00001EF2  2039 0803 2611          move.l    _clock_count_ms.L,D0
00001EF6  01C2      
00001EF8  4E75      2612          rts
                    2613   ; }
                    2614   ; void delay_ms(int num_ms) {
                    2615   _delay_ms:
00001EFA  4E56 0000 2616          link      A6,#0
00001EFE  48E7 3000 2617          movem.l   D2/D3,-(A7)
                    2618   ; int start_time;
                    2619   ; int current_time;
                    2620   ; start_time = clock();
00001F02  4EB8 1EF2 2621          jsr       _clock
00001F06  2400      2622          move.l    D0,D2
                    2623   ; do {
                    2624   delay_ms_1:
                    2625   ; current_time = clock();
00001F08  4EB8 1EF2 2626          jsr       _clock
00001F0C  2600      2627          move.l    D0,D3
                    2628   ; if (current_time < start_time) { //handle wraparound
00001F0E  B682      2629          cmp.l     D2,D3
00001F10  6C0E      2630          bge.s     delay_ms_3
                    2631   ; num_ms = num_ms - (INT_MAX-start_time);
00001F12  203C 7FFF 2632          move.l    #2147483647,D0
00001F16  FFFF      
00001F18  9082      2633          sub.l     D2,D0
00001F1A  91AE 0008 2634          sub.l     D0,8(A6)
                    2635   ; start_time = current_time;
00001F1E  2403      2636          move.l    D3,D2
                    2637   delay_ms_3:
00001F20  2003      2638          move.l    D3,D0
00001F22  9082      2639          sub.l     D2,D0
00001F24  B0AE 0008 2640          cmp.l     8(A6),D0
00001F28  6DDE      2641          blt       delay_ms_1
00001F2A  4CDF 000C 2642          movem.l   (A7)+,D2/D3
00001F2E  4E5E      2643          unlk      A6
00001F30  4E75      2644          rts
                    2645   ; }
                    2646   ; } while ((current_time - start_time) < num_ms);
                    2647   ; }
                    2648   ; void clrscr() {
                    2649   _clrscr:
00001F32  48E7 3000 2650          movem.l   D2/D3,-(A7)
                    2651   ; int a;
                    2652   ; int b;
                    2653   ; for (a = 0; a < VIDMEM_DIM1; a++) {
00001F36  4283      2654          clr.l     D3
                    2655   clrscr_1:
00001F38  0C83 0000 2656          cmp.l     #224,D3
00001F3C  00E0      
00001F3E  6C00 0032 2657          bge       clrscr_3
                    2658   ; for (b = 0; b < VIDMEM_DIM2; b++) {
00001F42  4282      2659          clr.l     D2
                    2660   clrscr_4:
00001F44  0C82 0000 2661          cmp.l     #32,D2
00001F48  0020      
00001F4A  6C22      2662          bge.s     clrscr_6
                    2663   ; WRITE_VIDMEM(a,b,0 /*0xff*/);	   
00001F4C  203C 0100 2664          move.l    #16777216,D0
00001F50  0000      
00001F52  2F02      2665          move.l    D2,-(A7)
00001F54  4878 0100 2666          pea       256
00001F58  4EB9 0000 2667          jsr       LMUL
00001F5C  3E70      
00001F5E  2217      2668          move.l    (A7),D1
00001F60  504F      2669          addq.w    #8,A7
00001F62  D283      2670          add.l     D3,D1
00001F64  D081      2671          add.l     D1,D0
00001F66  2040      2672          move.l    D0,A0
00001F68  4210      2673          clr.b     (A0)
00001F6A  5282      2674          addq.l    #1,D2
00001F6C  60D6      2675          bra       clrscr_4
                    2676   clrscr_6:
00001F6E  5283      2677          addq.l    #1,D3
00001F70  60C6      2678          bra       clrscr_1
                    2679   clrscr_3:
00001F72  4CDF 000C 2680          movem.l   (A7)+,D2/D3
00001F76  4E75      2681          rts
                    2682   ; }
                    2683   ; }
                    2684   ; //memset(vidmem, 0, VIDMEM_DIM1*VIDMEM_DIM2);
                    2685   ; }
                    2686   ; void xor_pixel(unsigned char x, unsigned char y) {
                    2687   _xor_pixel:
00001F78  4E56 FFFC 2688          link      A6,#-4
                    2689   ; unsigned char* dest;
                    2690   ; dest =  VIDEOMEM_ADDR(x,y>>3);
00001F7C  203C 0100 2691          move.l    #16777216,D0
00001F80  0000      
00001F82  122E 000F 2692          move.b    15(A6),D1
00001F86  E609      2693          lsr.b     #3,D1
00001F88  C27C 00FF 2694          and.w     #255,D1
00001F8C  E141      2695          asl.w     #8,D1
00001F8E  48C1      2696          ext.l     D1
00001F90  2F00      2697          move.l    D0,-(A7)
00001F92  102E 000B 2698          move.b    11(A6),D0
00001F96  C0BC 0000 2699          and.l     #255,D0
00001F9A  00FF      
00001F9C  D280      2700          add.l     D0,D1
00001F9E  201F      2701          move.l    (A7)+,D0
00001FA0  D081      2702          add.l     D1,D0
00001FA2  2D40 FFFC 2703          move.l    D0,-4(A6)
                    2704   ; *dest = (*dest) ^ (0x1 << (y&7));
00001FA6  206E FFFC 2705          move.l    -4(A6),A0
00001FAA  7001      2706          moveq     #1,D0
00001FAC  122E 000F 2707          move.b    15(A6),D1
00001FB0  C23C 0007 2708          and.b     #7,D1
00001FB4  E328      2709          lsl.b     D1,D0
00001FB6  B110      2710          eor.b     D0,(A0)
00001FB8  4E5E      2711          unlk      A6
00001FBA  4E75      2712          rts
                    2713   ; }
                    2714   ; void draw_vline(unsigned char x, unsigned char y1, unsigned char y2) {
                    2715   _draw_vline:
00001FBC  4E56 FFFC 2716          link      A6,#-4
00001FC0  48E7 3E00 2717          movem.l   D2/D3/D4/D5/D6,-(A7)
00001FC4  1A2E 0013 2718          move.b    19(A6),D5
00001FC8  CABC 0000 2719          and.l     #255,D5
00001FCC  00FF      
                    2720   ; unsigned char yb1;
                    2721   ; unsigned char yb2;
                    2722   ; unsigned char val;
                    2723   ; unsigned char* dest;
                    2724   ; int nchars;
                    2725   ; yb1 = y1>>3;
00001FCE  102E 000F 2726          move.b    15(A6),D0
00001FD2  E608      2727          lsr.b     #3,D0
00001FD4  1C00      2728          move.b    D0,D6
                    2729   ; yb2 = y2>>3;
00001FD6  1005      2730          move.b    D5,D0
00001FD8  E608      2731          lsr.b     #3,D0
00001FDA  1D40 FFFF 2732          move.b    D0,-1(A6)
                    2733   ; nchars  = (((unsigned int) yb2) & 0xff) - (((unsigned int) yb1) & 0xff);
00001FDE  102E FFFF 2734          move.b    -1(A6),D0
00001FE2  C0BC 0000 2735          and.l     #255,D0
00001FE6  00FF      
00001FE8  C0BC 0000 2736          and.l     #255,D0
00001FEC  00FF      
00001FEE  1206      2737          move.b    D6,D1
00001FF0  C2BC 0000 2738          and.l     #255,D1
00001FF4  00FF      
00001FF6  C2BC 0000 2739          and.l     #255,D1
00001FFA  00FF      
00001FFC  9081      2740          sub.l     D1,D0
00001FFE  2800      2741          move.l    D0,D4
                    2742   ; dest = VIDEOMEM_ADDR(x,yb1);
00002000  203C 0100 2743          move.l    #16777216,D0
00002004  0000      
00002006  1206      2744          move.b    D6,D1
00002008  C27C 00FF 2745          and.w     #255,D1
0000200C  E141      2746          asl.w     #8,D1
0000200E  48C1      2747          ext.l     D1
00002010  2F00      2748          move.l    D0,-(A7)
00002012  102E 000B 2749          move.b    11(A6),D0
00002016  C0BC 0000 2750          and.l     #255,D0
0000201A  00FF      
0000201C  D280      2751          add.l     D0,D1
0000201E  201F      2752          move.l    (A7)+,D0
00002020  D081      2753          add.l     D1,D0
00002022  2600      2754          move.l    D0,D3
                    2755   ; val = 0xff << (y1&7);
00002024  303C 00FF 2756          move.w    #255,D0
00002028  122E 000F 2757          move.b    15(A6),D1
0000202C  C23C 0007 2758          and.b     #7,D1
00002030  C27C 00FF 2759          and.w     #255,D1
00002034  E360      2760          asl.w     D1,D0
00002036  1400      2761          move.b    D0,D2
                    2762   ; *dest ^= val;
00002038  2043      2763          move.l    D3,A0
0000203A  B510      2764          eor.b     D2,(A0)
                    2765   ; dest = dest+VIDMEM_DIM1_W_BLANK_EDGES;
0000203C  0683 0000 2766          add.l     #256,D3
00002040  0100      
                    2767   ; if (nchars > 0) {
00002042  0C84 0000 2768          cmp.l     #0,D4
00002046  0000      
00002048  6F00 0036 2769          ble       draw_vline_1
                    2770   ; while (--nchars > 0) {
                    2771   draw_vline_3:
0000204C  5384      2772          subq.l    #1,D4
0000204E  0C84 0000 2773          cmp.l     #0,D4
00002052  0000      
00002054  6F10      2774          ble.s     draw_vline_5
                    2775   ; val =  0xff;
00002056  143C 00FF 2776          move.b    #255,D2
                    2777   ; *dest ^= val;
0000205A  2043      2778          move.l    D3,A0
0000205C  B510      2779          eor.b     D2,(A0)
                    2780   ; dest = dest+VIDMEM_DIM1_W_BLANK_EDGES;	  
0000205E  0683 0000 2781          add.l     #256,D3
00002062  0100      
00002064  60E6      2782          bra       draw_vline_3
                    2783   draw_vline_5:
                    2784   ; }
                    2785   ; val = (0xff >> (~y2&7));
00002066  303C 00FF 2786          move.w    #255,D0
0000206A  1205      2787          move.b    D5,D1
0000206C  4601      2788          not.b     D1
0000206E  C23C 0007 2789          and.b     #7,D1
00002072  C27C 00FF 2790          and.w     #255,D1
00002076  E260      2791          asr.w     D1,D0
00002078  1400      2792          move.b    D0,D2
                    2793   ; *dest ^= val;
0000207A  2043      2794          move.l    D3,A0
0000207C  B510      2795          eor.b     D2,(A0)
0000207E  601E      2796          bra.s     draw_vline_2
                    2797   draw_vline_1:
                    2798   ; } else {
                    2799   ; dest = dest-VIDMEM_DIM1_W_BLANK_EDGES; 
00002080  0483 0000 2800          sub.l     #256,D3
00002084  0100      
                    2801   ; val = (0xff << ((y2+1)&7));
00002086  303C 00FF 2802          move.w    #255,D0
0000208A  1205      2803          move.b    D5,D1
0000208C  5201      2804          addq.b    #1,D1
0000208E  C23C 0007 2805          and.b     #7,D1
00002092  C27C 00FF 2806          and.w     #255,D1
00002096  E360      2807          asl.w     D1,D0
00002098  1400      2808          move.b    D0,D2
                    2809   ; *dest ^= val;
0000209A  2043      2810          move.l    D3,A0
0000209C  B510      2811          eor.b     D2,(A0)
                    2812   draw_vline_2:
0000209E  4CDF 007C 2813          movem.l   (A7)+,D2/D3/D4/D5/D6
000020A2  4E5E      2814          unlk      A6
000020A4  4E75      2815          rts
                    2816   ; }
                    2817   ; }
                    2818   ; void draw_char(unsigned char ch, unsigned char x, unsigned char y) {
                    2819   _draw_char:
000020A6  4E56 0000 2820          link      A6,#0
000020AA  48E7 3800 2821          movem.l   D2/D3/D4,-(A7)
                    2822   ; unsigned char i;
                    2823   ; unsigned char* src;
                    2824   ; unsigned char* dest;
                    2825   ; src  = &font8x8[(ch-LOCHAR)][0];
000020AE  41F9 0803 2826          lea       _font8x8.L,A0
000020B2  049E      
000020B4  102E 000B 2827          move.b    11(A6),D0
000020B8  C0BC 0000 2828          and.l     #255,D0
000020BC  00FF      
000020BE  0480 0000 2829          sub.l     #32,D0
000020C2  0020      
000020C4  E788      2830          lsl.l     #3,D0
000020C6  D1C0      2831          add.l     D0,A0
000020C8  2808      2832          move.l    A0,D4
                    2833   ; dest = VIDEOMEM_ADDR(x*8,y);
000020CA  203C 0100 2834          move.l    #16777216,D0
000020CE  0000      
000020D0  122E 0013 2835          move.b    19(A6),D1
000020D4  C27C 00FF 2836          and.w     #255,D1
000020D8  E141      2837          asl.w     #8,D1
000020DA  48C1      2838          ext.l     D1
000020DC  2F00      2839          move.l    D0,-(A7)
000020DE  102E 000F 2840          move.b    15(A6),D0
000020E2  C07C 00FF 2841          and.w     #255,D0
000020E6  C0FC 0008 2842          mulu.w    #8,D0
000020EA  C0BC 0000 2843          and.l     #255,D0
000020EE  00FF      
000020F0  D280      2844          add.l     D0,D1
000020F2  201F      2845          move.l    (A7)+,D0
000020F4  D081      2846          add.l     D1,D0
000020F6  2600      2847          move.l    D0,D3
                    2848   ; for (i=0; i<8; i++) {
000020F8  4202      2849          clr.b     D2
                    2850   draw_char_1:
000020FA  0C02 0008 2851          cmp.b     #8,D2
000020FE  640E      2852          bhs.s     draw_char_3
                    2853   ; *dest = *src;
00002100  2044      2854          move.l    D4,A0
00002102  2243      2855          move.l    D3,A1
00002104  1290      2856          move.b    (A0),(A1)
                    2857   ; dest += 1;//32;
00002106  5283      2858          addq.l    #1,D3
                    2859   ; src += 1;
00002108  5284      2860          addq.l    #1,D4
0000210A  5202      2861          addq.b    #1,D2
0000210C  60EC      2862          bra       draw_char_1
                    2863   draw_char_3:
0000210E  4CDF 001C 2864          movem.l   (A7)+,D2/D3/D4
00002112  4E5E      2865          unlk      A6
00002114  4E75      2866          rts
                    2867   ; }
                    2868   ; }
                    2869   ; void draw_string(char* str, byte x, byte y) {
                    2870   _draw_string:
00002116  4E56 0000 2871          link      A6,#0
0000211A  2F02      2872          move.l    D2,-(A7)
                    2873   ; do {
                    2874   draw_string_1:
                    2875   ; byte ch = *str++;
0000211C  206E 0008 2876          move.l    8(A6),A0
00002120  52AE 0008 2877          addq.l    #1,8(A6)
00002124  1410      2878          move.b    (A0),D2
                    2879   ; if (!ch) break;
00002126  4A02      2880          tst.b     D2
00002128  6602      2881          bne.s     draw_string_3
0000212A  602E      2882          bra.s     draw_string_2
                    2883   draw_string_3:
                    2884   ; draw_char(ch, x, y);
0000212C  122E 0013 2885          move.b    19(A6),D1
00002130  C2BC 0000 2886          and.l     #255,D1
00002134  00FF      
00002136  2F01      2887          move.l    D1,-(A7)
00002138  122E 000F 2888          move.b    15(A6),D1
0000213C  C2BC 0000 2889          and.l     #255,D1
00002140  00FF      
00002142  2F01      2890          move.l    D1,-(A7)
00002144  C4BC 0000 2891          and.l     #255,D2
00002148  00FF      
0000214A  2F02      2892          move.l    D2,-(A7)
0000214C  4EB8 20A6 2893          jsr       _draw_char
00002150  DEFC 000C 2894          add.w     #12,A7
                    2895   ; x++;
00002154  522E 000F 2896          addq.b    #1,15(A6)
00002158  60C2      2897          bra       draw_string_1
                    2898   draw_string_2:
0000215A  241F      2899          move.l    (A7)+,D2
0000215C  4E5E      2900          unlk      A6
0000215E  4E75      2901          rts
                    2902   ; } while (1);
                    2903   ; }
                    2904   ; void draw_bcd_word(word bcd, byte x, byte y) {
                    2905   _draw_bcd_word:
00002160  4E56 0000 2906          link      A6,#0
00002164  48E7 3000 2907          movem.l   D2/D3,-(A7)
00002168  162E 000F 2908          move.b    15(A6),D3
0000216C  C6BC 0000 2909          and.l     #255,D3
00002170  00FF      
                    2910   ; byte j;
                    2911   ; x += 3;
00002172  5603      2912          addq.b    #3,D3
                    2913   ; for (j=0; j<4; j++) {
00002174  4202      2914          clr.b     D2
                    2915   draw_bcd_word_1:
00002176  0C02 0004 2916          cmp.b     #4,D2
0000217A  6400 0048 2917          bhs       draw_bcd_word_3
                    2918   ; draw_char('0'+(bcd&0xf), x, y);
0000217E  122E 0013 2919          move.b    19(A6),D1
00002182  C2BC 0000 2920          and.l     #255,D1
00002186  00FF      
00002188  2F01      2921          move.l    D1,-(A7)
0000218A  C6BC 0000 2922          and.l     #255,D3
0000218E  00FF      
00002190  2F03      2923          move.l    D3,-(A7)
00002192  7230      2924          moveq     #48,D1
00002194  4881      2925          ext.w     D1
00002196  2F00      2926          move.l    D0,-(A7)
00002198  302E 000A 2927          move.w    10(A6),D0
0000219C  C07C 000F 2928          and.w     #15,D0
000021A0  D240      2929          add.w     D0,D1
000021A2  201F      2930          move.l    (A7)+,D0
000021A4  C2BC 0000 2931          and.l     #255,D1
000021A8  00FF      
000021AA  2F01      2932          move.l    D1,-(A7)
000021AC  4EB8 20A6 2933          jsr       _draw_char
000021B0  DEFC 000C 2934          add.w     #12,A7
                    2935   ; x--;
000021B4  5303      2936          subq.b    #1,D3
                    2937   ; bcd >>= 4;
000021B6  302E 000A 2938          move.w    10(A6),D0
000021BA  E848      2939          lsr.w     #4,D0
000021BC  3D40 000A 2940          move.w    D0,10(A6)
000021C0  5202      2941          addq.b    #1,D2
000021C2  60B2      2942          bra       draw_bcd_word_1
                    2943   draw_bcd_word_3:
000021C4  4CDF 000C 2944          movem.l   (A7)+,D2/D3
000021C8  4E5E      2945          unlk      A6
000021CA  4E75      2946          rts
                    2947   ; }
                    2948   ; }
                    2949   ; // Function to add two BCD numbers
                    2950   ; word bcd_add(word a, word b)
                    2951   ; {
                    2952   _bcd_add:
000021CC  4E56 FFFC 2953          link      A6,#-4
000021D0  48E7 3F00 2954          movem.l   D2/D3/D4/D5/D6/D7,-(A7)
000021D4  382E 000E 2955          move.w    14(A6),D4
000021D8  C8BC 0000 2956          and.l     #65535,D4
000021DC  FFFF      
000021DE  3A2E 000A 2957          move.w    10(A6),D5
000021E2  CABC 0000 2958          and.l     #65535,D5
000021E6  FFFF      
                    2959   ; word result, carry, place, digit_a, digit_b, sum;
                    2960   ; result = 0;  /* Final BCD result */
000021E8  7E00      2961          moveq     #0,D7
                    2962   ; carry = 0;   /* Carry for BCD addition */
000021EA  4242      2963          clr.w     D2
                    2964   ; place = 0;   /* Bit position for reconstructing the result */
000021EC  4246      2965          clr.w     D6
                    2966   ; while (a > 0 || b > 0 || carry > 0) {
                    2967   bcd_add_1:
000021EE  0C45 0000 2968          cmp.w     #0,D5
000021F2  620E      2969          bhi.s     bcd_add_4
000021F4  0C44 0000 2970          cmp.w     #0,D4
000021F8  6208      2971          bhi.s     bcd_add_4
000021FA  0C42 0000 2972          cmp.w     #0,D2
000021FE  6300 0040 2973          bls       bcd_add_3
                    2974   bcd_add_4:
                    2975   ; /* Extract the lowest BCD digit from each number using a mask */
                    2976   ; digit_a = a & 0xF;
00002202  3005      2977          move.w    D5,D0
00002204  C07C 000F 2978          and.w     #15,D0
00002208  3D40 FFFC 2979          move.w    D0,-4(A6)
                    2980   ; digit_b = b & 0xF;
0000220C  3004      2981          move.w    D4,D0
0000220E  C07C 000F 2982          and.w     #15,D0
00002212  3D40 FFFE 2983          move.w    D0,-2(A6)
                    2984   ; /* Add the digits and the carry */
                    2985   ; sum = digit_a + digit_b + carry;
00002216  302E FFFC 2986          move.w    -4(A6),D0
0000221A  D06E FFFE 2987          add.w     -2(A6),D0
0000221E  D042      2988          add.w     D2,D0
00002220  3600      2989          move.w    D0,D3
                    2990   ; /* Perform BCD correction if sum > 9 */
                    2991   ; if (sum > 9) {
00002222  0C43 0009 2992          cmp.w     #9,D3
00002226  6308      2993          bls.s     bcd_add_5
                    2994   ; sum -= 10;  /* Correct the sum */
00002228  0443 000A 2995          sub.w     #10,D3
                    2996   ; carry = 1;  /* Set the carry */
0000222C  7401      2997          moveq     #1,D2
0000222E  6002      2998          bra.s     bcd_add_6
                    2999   bcd_add_5:
                    3000   ; } else {
                    3001   ; carry = 0;  /* Reset carry */
00002230  4242      3002          clr.w     D2
                    3003   bcd_add_6:
                    3004   ; }
                    3005   ; /* Add the corrected digit to the result in its proper place */
                    3006   ; result |= (sum << place);
00002232  3003      3007          move.w    D3,D0
00002234  ED68      3008          lsl.w     D6,D0
00002236  8E40      3009          or.w      D0,D7
                    3010   ; /* Move to the next higher BCD digit */
                    3011   ; a >>= 4;
00002238  E84D      3012          lsr.w     #4,D5
                    3013   ; b >>= 4;
0000223A  E84C      3014          lsr.w     #4,D4
                    3015   ; place += 4;  /* Move to the next nibble */
0000223C  5846      3016          addq.w    #4,D6
0000223E  60AE      3017          bra       bcd_add_1
                    3018   bcd_add_3:
                    3019   ; }
                    3020   ; return result;
00002240  3007      3021          move.w    D7,D0
00002242  4CDF 00FC 3022          movem.l   (A7)+,D2/D3/D4/D5/D6/D7
00002246  4E5E      3023          unlk      A6
00002248  4E75      3024          rts
                    3025   ; }
                    3026   ; void draw_lives(byte player) 
                    3027   ; {
                    3028   _draw_lives:
0000224A  4E56 FFFC 3029          link      A6,#-4
0000224E  2F02      3030          move.l    D2,-(A7)
                    3031   ; byte i, n, x, y;
                    3032   ; n = lives;
00002250  1D79 0803 3033          move.b    _lives.L,-3(A6)
00002254  0448 FFFD 
                    3034   ; x = player ? (22 - MAXLIVES) : 6;
00002258  4A2E 000B 3035          tst.b     11(A6)
0000225C  6704      3036          beq.s     draw_lives_1
0000225E  7011      3037          moveq     #17,D0
00002260  6002      3038          bra.s     draw_lives_2
                    3039   draw_lives_1:
00002262  7006      3040          moveq     #6,D0
                    3041   draw_lives_2:
00002264  1D40 FFFE 3042          move.b    D0,-2(A6)
                    3043   ; y = 30;
00002268  1D7C 001E 3044          move.b    #30,-1(A6)
0000226C  FFFF      
                    3045   ; for (i = 0; i < MAXLIVES; i++) {
0000226E  4202      3046          clr.b     D2
                    3047   draw_lives_3:
00002270  0C02 0005 3048          cmp.b     #5,D2
00002274  6400 003E 3049          bhs       draw_lives_5
                    3050   ; draw_char(i < n ? '*' : ' ', x++, y);
00002278  122E FFFF 3051          move.b    -1(A6),D1
0000227C  C2BC 0000 3052          and.l     #255,D1
00002280  00FF      
00002282  2F01      3053          move.l    D1,-(A7)
00002284  122E FFFE 3054          move.b    -2(A6),D1
00002288  522E FFFE 3055          addq.b    #1,-2(A6)
0000228C  C2BC 0000 3056          and.l     #255,D1
00002290  00FF      
00002292  2F01      3057          move.l    D1,-(A7)
00002294  B42E FFFD 3058          cmp.b     -3(A6),D2
00002298  6404      3059          bhs.s     draw_lives_6
0000229A  722A      3060          moveq     #42,D1
0000229C  6002      3061          bra.s     draw_lives_7
                    3062   draw_lives_6:
0000229E  7220      3063          moveq     #32,D1
                    3064   draw_lives_7:
000022A0  C2BC 0000 3065          and.l     #255,D1
000022A4  00FF      
000022A6  2F01      3066          move.l    D1,-(A7)
000022A8  4EB8 20A6 3067          jsr       _draw_char
000022AC  DEFC 000C 3068          add.w     #12,A7
000022B0  5202      3069          addq.b    #1,D2
000022B2  60BC      3070          bra       draw_lives_3
                    3071   draw_lives_5:
000022B4  241F      3072          move.l    (A7)+,D2
000022B6  4E5E      3073          unlk      A6
000022B8  4E75      3074          rts
                    3075   ; }
                    3076   ; }
                    3077   ; void draw_score(byte player) {
                    3078   _draw_score:
000022BA  4E56 FFFC 3079          link      A6,#-4
                    3080   ; byte x, y;
                    3081   ; x = player ? 24 : 0;
000022BE  4A2E 000B 3082          tst.b     11(A6)
000022C2  6704      3083          beq.s     draw_score_1
000022C4  7018      3084          moveq     #24,D0
000022C6  6002      3085          bra.s     draw_score_2
                    3086   draw_score_1:
000022C8  4200      3087          clr.b     D0
                    3088   draw_score_2:
000022CA  1D40 FFFE 3089          move.b    D0,-2(A6)
                    3090   ; y = 30;
000022CE  1D7C 001E 3091          move.b    #30,-1(A6)
000022D2  FFFF      
                    3092   ; draw_bcd_word(score, x, y);
000022D4  122E FFFF 3093          move.b    -1(A6),D1
000022D8  C2BC 0000 3094          and.l     #255,D1
000022DC  00FF      
000022DE  2F01      3095          move.l    D1,-(A7)
000022E0  122E FFFE 3096          move.b    -2(A6),D1
000022E4  C2BC 0000 3097          and.l     #255,D1
000022E8  00FF      
000022EA  2F01      3098          move.l    D1,-(A7)
000022EC  3239 0803 3099          move.w    _score.L,D1
000022F0  0446      
000022F2  C2BC 0000 3100          and.l     #65535,D1
000022F6  FFFF      
000022F8  2F01      3101          move.l    D1,-(A7)
000022FA  4EB8 2160 3102          jsr       _draw_bcd_word
000022FE  DEFC 000C 3103          add.w     #12,A7
00002302  4E5E      3104          unlk      A6
00002304  4E75      3105          rts
                    3106   ; }
                    3107   ; void add_score(word pts) {
                    3108   _add_score:
00002306  4E56 0000 3109          link      A6,#0
                    3110   ; if (attract) return;
0000230A  4A39 0803 3111          tst.b     _attract.L
0000230E  0440      
00002310  6702      3112          beq.s     add_score_1
00002312  603A      3113          bra.s     add_score_3
                    3114   add_score_1:
                    3115   ; score = bcd_add(score, pts);
00002314  322E 000A 3116          move.w    10(A6),D1
00002318  C2BC 0000 3117          and.l     #65535,D1
0000231C  FFFF      
0000231E  2F01      3118          move.l    D1,-(A7)
00002320  3239 0803 3119          move.w    _score.L,D1
00002324  0446      
00002326  C2BC 0000 3120          and.l     #65535,D1
0000232A  FFFF      
0000232C  2F01      3121          move.l    D1,-(A7)
0000232E  4EB8 21CC 3122          jsr       _bcd_add
00002332  504F      3123          addq.w    #8,A7
00002334  33C0 0803 3124          move.w    D0,_score.L
00002338  0446      
                    3125   ; draw_score(curplayer);
0000233A  1239 0803 3126          move.b    _curplayer.L,D1
0000233E  0444      
00002340  C2BC 0000 3127          and.l     #255,D1
00002344  00FF      
00002346  2F01      3128          move.l    D1,-(A7)
00002348  4EB8 22BA 3129          jsr       _draw_score
0000234C  584F      3130          addq.w    #4,A7
                    3131   add_score_3:
0000234E  4E5E      3132          unlk      A6
00002350  4E75      3133          rts
                    3134   ; }
                    3135   ; byte get_char_rand() {
                    3136   _get_char_rand:
00002352  4E56 FFFC 3137          link      A6,#-4
                    3138   ; byte rand;
                    3139   ; rand = (byte) (long_rand() & 0xff);  	
00002356  4EB8 1ECC 3140          jsr       _long_rand
0000235A  C0BC 0000 3141          and.l     #255,D0
0000235E  00FF      
00002360  1D40 FFFF 3142          move.b    D0,-1(A6)
                    3143   ; return rand;
00002364  102E FFFF 3144          move.b    -1(A6),D0
00002368  4E5E      3145          unlk      A6
0000236A  4E75      3146          rts
                    3147   ; }
                    3148   ; void xor_player_derez() {
                    3149   _xor_player_derez:
0000236C  4E56 FFFC 3150          link      A6,#-4
00002370  48E7 3820 3151          movem.l   D2/D3/D4/A2,-(A7)
00002374  45F8 2352 3152          lea       _get_char_rand.L,A2
                    3153   ; byte i, j, x, y, rand;
                    3154   ; signed char xx, yy;
                    3155   ; x = player_x + 13;
00002378  1039 0803 3156          move.b    _player_x.L,D0
0000237C  0436      
0000237E  0600 000D 3157          add.b     #13,D0
00002382  1D40 FFFC 3158          move.b    D0,-4(A6)
                    3159   ; y = 8;
00002386  1D7C 0008 3160          move.b    #8,-3(A6)
0000238A  FFFD      
                    3161   ; rand = get_char_rand();
0000238C  4E92      3162          jsr       (A2)
0000238E  1400      3163          move.b    D0,D2
                    3164   ; for (j = 1; j <= 0x1f; j++) {
00002390  7601      3165          moveq     #1,D3
                    3166   xor_player_derez_1:
00002392  0C03 001F 3167          cmp.b     #31,D3
00002396  6200 005C 3168          bhi       xor_player_derez_3
                    3169   ; for (i = 0; i < 50; i++) {
0000239A  4204      3170          clr.b     D4
                    3171   xor_player_derez_4:
0000239C  0C04 0032 3172          cmp.b     #50,D4
000023A0  6400 004E 3173          bhs       xor_player_derez_6
                    3174   ; rand = get_char_rand();
000023A4  4E92      3175          jsr       (A2)
000023A6  1400      3176          move.b    D0,D2
                    3177   ; xx = x + (rand & 0x1f) - 15;
000023A8  102E FFFC 3178          move.b    -4(A6),D0
000023AC  1202      3179          move.b    D2,D1
000023AE  C23C 001F 3180          and.b     #31,D1
000023B2  D001      3181          add.b     D1,D0
000023B4  0400 000F 3182          sub.b     #15,D0
000023B8  1D40 FFFE 3183          move.b    D0,-2(A6)
                    3184   ; rand = get_char_rand();
000023BC  4E92      3185          jsr       (A2)
000023BE  1400      3186          move.b    D0,D2
                    3187   ; yy = y + (rand & j);
000023C0  102E FFFD 3188          move.b    -3(A6),D0
000023C4  1202      3189          move.b    D2,D1
000023C6  C203      3190          and.b     D3,D1
000023C8  D001      3191          add.b     D1,D0
000023CA  1D40 FFFF 3192          move.b    D0,-1(A6)
                    3193   ; xor_pixel(xx, yy);
000023CE  122E FFFF 3194          move.b    -1(A6),D1
000023D2  C2BC 0000 3195          and.l     #255,D1
000023D6  00FF      
000023D8  2F01      3196          move.l    D1,-(A7)
000023DA  122E FFFE 3197          move.b    -2(A6),D1
000023DE  C2BC 0000 3198          and.l     #255,D1
000023E2  00FF      
000023E4  2F01      3199          move.l    D1,-(A7)
000023E6  4EB8 1F78 3200          jsr       _xor_pixel
000023EA  504F      3201          addq.w    #8,A7
000023EC  5204      3202          addq.b    #1,D4
000023EE  60AC      3203          bra       xor_player_derez_4
                    3204   xor_player_derez_6:
000023F0  5203      3205          addq.b    #1,D3
000023F2  609E      3206          bra       xor_player_derez_1
                    3207   xor_player_derez_3:
000023F4  4CDF 041C 3208          movem.l   (A7)+,D2/D3/D4/A2
000023F8  4E5E      3209          unlk      A6
000023FA  4E75      3210          rts
                    3211   ; }
                    3212   ; }
                    3213   ; }
                    3214   ; void destroy_player() {
                    3215   _destroy_player:
                    3216   ; xor_player_derez(); // xor derez pattern
000023FC  4EB8 236C 3217          jsr       _xor_player_derez
                    3218   ; xor_sprite(player_bitmap, player_x, 1); // erase ship via xor
00002400  4878 0001 3219          pea       1
00002404  1239 0803 3220          move.b    _player_x.L,D1
00002408  0436      
0000240A  C2BC 0000 3221          and.l     #255,D1
0000240E  00FF      
00002410  2F01      3222          move.l    D1,-(A7)
00002412  4879 0803 3223          pea       _player_bitmap.L
00002416  0696      
00002418  4EB8 1C56 3224          jsr       _xor_sprite
0000241C  DEFC 000C 3225          add.w     #12,A7
                    3226   ; xor_player_derez(); // xor 2x to erase derez pattern
00002420  4EB8 236C 3227          jsr       _xor_player_derez
                    3228   ; player_x = 0xff;
00002424  13FC 00FF 3229          move.b    #255,_player_x.L
00002428  0803 0436 
                    3230   ; lives--;
0000242C  5339 0803 3231          subq.b    #1,_lives.L
00002430  0448      
00002432  4E75      3232          rts
                    3233   ; }
                    3234   ; void init_enemies() {
                    3235   _init_enemies:
00002434  48E7 3C20 3236          movem.l   D2/D3/D4/D5/A2,-(A7)
00002438  45F9 0803 3237          lea       _enemies.L,A2
0000243C  044A      
                    3238   ; byte i, x, y, bm;
                    3239   ; x = 0;
0000243E  4203      3240          clr.b     D3
                    3241   ; y = 26;
00002440  7A1A      3242          moveq     #26,D5
                    3243   ; bm = 0;
00002442  4204      3244          clr.b     D4
                    3245   ; for (i = 0; i < MAX_ENEMIES; i++) {
00002444  4202      3246          clr.b     D2
                    3247   init_enemies_1:
00002446  0C02 001C 3248          cmp.b     #28,D2
0000244A  6400 0052 3249          bhs       init_enemies_3
                    3250   ; enemies[i].x = x;
0000244E  C4BC 0000 3251          and.l     #255,D2
00002452  00FF      
00002454  2002      3252          move.l    D2,D0
00002456  C1FC 0003 3253          muls      #3,D0
0000245A  1583 0800 3254          move.b    D3,0(A2,D0.L)
                    3255   ; enemies[i].y = y;
0000245E  C4BC 0000 3256          and.l     #255,D2
00002462  00FF      
00002464  2002      3257          move.l    D2,D0
00002466  C1FC 0003 3258          muls      #3,D0
0000246A  41F2 0800 3259          lea       0(A2,D0.L),A0
0000246E  1145 0001 3260          move.b    D5,1(A0)
                    3261   ; enemies[i].shape = bm;
00002472  C4BC 0000 3262          and.l     #255,D2
00002476  00FF      
00002478  2002      3263          move.l    D2,D0
0000247A  C1FC 0003 3264          muls      #3,D0
0000247E  41F2 0800 3265          lea       0(A2,D0.L),A0
00002482  1144 0002 3266          move.b    D4,2(A0)
                    3267   ; x += 28;
00002486  0603 001C 3268          add.b     #28,D3
                    3269   ; if (x > 180) {
0000248A  C67C 00FF 3270          and.w     #255,D3
0000248E  0C43 00B4 3271          cmp.w     #180,D3
00002492  6306      3272          bls.s     init_enemies_4
                    3273   ; x = 0;
00002494  4203      3274          clr.b     D3
                    3275   ; y -= 3;
00002496  5705      3276          subq.b    #3,D5
                    3277   ; bm++;
00002498  5204      3278          addq.b    #1,D4
                    3279   init_enemies_4:
0000249A  5202      3280          addq.b    #1,D2
0000249C  60A8      3281          bra       init_enemies_1
                    3282   init_enemies_3:
                    3283   ; }
                    3284   ; }
                    3285   ; enemy_index = 0;
0000249E  4239 0803 3286          clr.b     _enemy_index.L
000024A2  0432      
                    3287   ; num_enemies = MAX_ENEMIES;
000024A4  13FC 001C 3288          move.b    #28,_num_enemies.L
000024A8  0803 0434 
                    3289   ; this_mode.right = 1;
000024AC  13FC 0001 3290          move.b    #1,_this_mode.L
000024B0  0803 042E 
                    3291   ; this_mode.down = 0;
000024B4  4239 0803 3292          clr.b     _this_mode+1.L
000024B8  042F      
                    3293   ; next_mode.right = 1;
000024BA  13FC 0001 3294          move.b    #1,_next_mode.L
000024BE  0803 0430 
                    3295   ; next_mode.down = 0;
000024C2  4239 0803 3296          clr.b     _next_mode+1.L
000024C6  0431      
000024C8  4CDF 043C 3297          movem.l   (A7)+,D2/D3/D4/D5/A2
000024CC  4E75      3298          rts
                    3299   ; }
                    3300   ; void delete_enemy(Enemy* e) {
                    3301   _delete_enemy:
000024CE  4E56 0000 3302          link      A6,#0
000024D2  2F02      3303          move.l    D2,-(A7)
000024D4  242E 0008 3304          move.l    8(A6),D2
                    3305   ; clear_sprite(enemy_bitmaps[e->shape], e->x, e->y);
000024D8  2042      3306          move.l    D2,A0
000024DA  1228 0001 3307          move.b    1(A0),D1
000024DE  C2BC 0000 3308          and.l     #255,D1
000024E2  00FF      
000024E4  2F01      3309          move.l    D1,-(A7)
000024E6  2042      3310          move.l    D2,A0
000024E8  1210      3311          move.b    (A0),D1
000024EA  C2BC 0000 3312          and.l     #255,D1
000024EE  00FF      
000024F0  2F01      3313          move.l    D1,-(A7)
000024F2  2042      3314          move.l    D2,A0
000024F4  1228 0002 3315          move.b    2(A0),D1
000024F8  C2BC 0000 3316          and.l     #255,D1
000024FC  00FF      
000024FE  E589      3317          lsl.l     #2,D1
00002500  41F9 0803 3318          lea       _enemy_bitmaps.L,A0
00002504  0762      
00002506  2F30 1800 3319          move.l    0(A0,D1.L),-(A7)
0000250A  4EB8 1D44 3320          jsr       _clear_sprite
0000250E  DEFC 000C 3321          add.w     #12,A7
                    3322   ; memmove(e, e+1, sizeof(Enemy)*(enemies-e+MAX_ENEMIES-1));
00002512  41F9 0803 3323          lea       _enemies.L,A0
00002516  044A      
00002518  91C2      3324          sub.l     D2,A0
0000251A  2208      3325          move.l    A0,D1
0000251C  83FC 0003 3326          divs.w    #3,D1
00002520  0681 0000 3327          add.l     #28,D1
00002524  001C      
00002526  5381      3328          subq.l    #1,D1
00002528  2F01      3329          move.l    D1,-(A7)
0000252A  4878 0003 3330          pea       3
0000252E  4EB9 0000 3331          jsr       LMUL
00002532  3E70      
00002534  2217      3332          move.l    (A7),D1
00002536  504F      3333          addq.w    #8,A7
00002538  2F01      3334          move.l    D1,-(A7)
0000253A  2202      3335          move.l    D2,D1
0000253C  5681      3336          addq.l    #3,D1
0000253E  2F01      3337          move.l    D1,-(A7)
00002540  2F02      3338          move.l    D2,-(A7)
00002542  4EB9 0000 3339          jsr       _memmove
00002546  3EFE      
00002548  DEFC 000C 3340          add.w     #12,A7
                    3341   ; num_enemies--; // update_next_enemy() will check enemy_index
0000254C  5339 0803 3342          subq.b    #1,_num_enemies.L
00002550  0434      
00002552  241F      3343          move.l    (A7)+,D2
00002554  4E5E      3344          unlk      A6
00002556  4E75      3345          rts
                    3346   ; }
                    3347   ; void update_next_enemy() {
                    3348   _update_next_enemy:
00002558  48E7 0030 3349          movem.l   A2/A3,-(A7)
0000255C  45F9 0803 3350          lea       _enemies.L,A2
00002560  044A      
00002562  47F9 0803 3351          lea       _this_mode.L,A3
00002566  042E      
                    3352   ; if (enemy_index >= num_enemies) {
00002568  1039 0803 3353          move.b    _enemy_index.L,D0
0000256C  0432      
0000256E  B039 0803 3354          cmp.b     _num_enemies.L,D0
00002572  0434      
00002574  6514      3355          blo.s     update_next_enemy_1
                    3356   ; enemy_index = 0;
00002576  4239 0803 3357          clr.b     _enemy_index.L
0000257A  0432      
                    3358   ; this_mode.down = next_mode.down;
0000257C  1779 0803 3359          move.b    _next_mode+1.L,1(A3)
00002580  0431 0001 
                    3360   ; this_mode.right = next_mode.right;
00002584  16B9 0803 3361          move.b    _next_mode.L,(A3)
00002588  0430      
                    3362   update_next_enemy_1:
                    3363   ; }
                    3364   ; clear_sprite(enemy_bitmaps[enemies[enemy_index].shape], enemies[enemy_index].x, enemies[enemy_index].y);
0000258A  1239 0803 3365          move.b    _enemy_index.L,D1
0000258E  0432      
00002590  C2BC 0000 3366          and.l     #255,D1
00002594  00FF      
00002596  C3FC 0003 3367          muls      #3,D1
0000259A  41F2 1800 3368          lea       0(A2,D1.L),A0
0000259E  1228 0001 3369          move.b    1(A0),D1
000025A2  C2BC 0000 3370          and.l     #255,D1
000025A6  00FF      
000025A8  2F01      3371          move.l    D1,-(A7)
000025AA  1239 0803 3372          move.b    _enemy_index.L,D1
000025AE  0432      
000025B0  C2BC 0000 3373          and.l     #255,D1
000025B4  00FF      
000025B6  C3FC 0003 3374          muls      #3,D1
000025BA  1232 1800 3375          move.b    0(A2,D1.L),D1
000025BE  C2BC 0000 3376          and.l     #255,D1
000025C2  00FF      
000025C4  2F01      3377          move.l    D1,-(A7)
000025C6  1239 0803 3378          move.b    _enemy_index.L,D1
000025CA  0432      
000025CC  C2BC 0000 3379          and.l     #255,D1
000025D0  00FF      
000025D2  C3FC 0003 3380          muls      #3,D1
000025D6  41F2 1800 3381          lea       0(A2,D1.L),A0
000025DA  1228 0002 3382          move.b    2(A0),D1
000025DE  C2BC 0000 3383          and.l     #255,D1
000025E2  00FF      
000025E4  E589      3384          lsl.l     #2,D1
000025E6  41F9 0803 3385          lea       _enemy_bitmaps.L,A0
000025EA  0762      
000025EC  2F30 1800 3386          move.l    0(A0,D1.L),-(A7)
000025F0  4EB8 1D44 3387          jsr       _clear_sprite
000025F4  DEFC 000C 3388          add.w     #12,A7
                    3389   ; if (this_mode.down) {
000025F8  4A2B 0001 3390          tst.b     1(A3)
000025FC  6700 0066 3391          beq       update_next_enemy_3
                    3392   ; // if too close to ground, end game
                    3393   ; enemies[enemy_index].y = enemies[enemy_index].y-1;
00002600  1039 0803 3394          move.b    _enemy_index.L,D0
00002604  0432      
00002606  C0BC 0000 3395          and.l     #255,D0
0000260A  00FF      
0000260C  C1FC 0003 3396          muls      #3,D0
00002610  41F2 0800 3397          lea       0(A2,D0.L),A0
00002614  1028 0001 3398          move.b    1(A0),D0
00002618  5300      3399          subq.b    #1,D0
0000261A  1239 0803 3400          move.b    _enemy_index.L,D1
0000261E  0432      
00002620  C2BC 0000 3401          and.l     #255,D1
00002624  00FF      
00002626  C3FC 0003 3402          muls      #3,D1
0000262A  41F2 1800 3403          lea       0(A2,D1.L),A0
0000262E  1140 0001 3404          move.b    D0,1(A0)
                    3405   ; if (enemies[enemy_index].y < 5) {
00002632  1039 0803 3406          move.b    _enemy_index.L,D0
00002636  0432      
00002638  C0BC 0000 3407          and.l     #255,D0
0000263C  00FF      
0000263E  C1FC 0003 3408          muls      #3,D0
00002642  41F2 0800 3409          lea       0(A2,D0.L),A0
00002646  1028 0001 3410          move.b    1(A0),D0
0000264A  0C00 0005 3411          cmp.b     #5,D0
0000264E  640A      3412          bhs.s     update_next_enemy_5
                    3413   ; destroy_player();
00002650  4EB8 23FC 3414          jsr       _destroy_player
                    3415   ; lives = 0;
00002654  4239 0803 3416          clr.b     _lives.L
00002658  0448      
                    3417   update_next_enemy_5:
                    3418   ; }
                    3419   ; next_mode.down = 0;
0000265A  4239 0803 3420          clr.b     _next_mode+1.L
0000265E  0431      
00002660  6000 0082 3421          bra       update_next_enemy_11
                    3422   update_next_enemy_3:
                    3423   ; } else {
                    3424   ; if (this_mode.right) {
00002664  4A13      3425          tst.b     (A3)
00002666  6742      3426          beq.s     update_next_enemy_7
                    3427   ; enemies[enemy_index].x += 2;
00002668  1039 0803 3428          move.b    _enemy_index.L,D0
0000266C  0432      
0000266E  C0BC 0000 3429          and.l     #255,D0
00002672  00FF      
00002674  C1FC 0003 3430          muls      #3,D0
00002678  5432 0800 3431          addq.b    #2,0(A2,D0.L)
                    3432   ; if (enemies[enemy_index].x >= 200) {
0000267C  1039 0803 3433          move.b    _enemy_index.L,D0
00002680  0432      
00002682  C0BC 0000 3434          and.l     #255,D0
00002686  00FF      
00002688  C1FC 0003 3435          muls      #3,D0
0000268C  1032 0800 3436          move.b    0(A2,D0.L),D0
00002690  C07C 00FF 3437          and.w     #255,D0
00002694  0C40 00C8 3438          cmp.w     #200,D0
00002698  650E      3439          blo.s     update_next_enemy_9
                    3440   ; next_mode.down = 1;
0000269A  13FC 0001 3441          move.b    #1,_next_mode+1.L
0000269E  0803 0431 
                    3442   ; next_mode.right = 0;
000026A2  4239 0803 3443          clr.b     _next_mode.L
000026A6  0430      
                    3444   update_next_enemy_9:
000026A8  603A      3445          bra.s     update_next_enemy_11
                    3446   update_next_enemy_7:
                    3447   ; }
                    3448   ; } else {
                    3449   ; enemies[enemy_index].x -= 2;
000026AA  1039 0803 3450          move.b    _enemy_index.L,D0
000026AE  0432      
000026B0  C0BC 0000 3451          and.l     #255,D0
000026B4  00FF      
000026B6  C1FC 0003 3452          muls      #3,D0
000026BA  5532 0800 3453          subq.b    #2,0(A2,D0.L)
                    3454   ; if (enemies[enemy_index].x == 0) {
000026BE  1039 0803 3455          move.b    _enemy_index.L,D0
000026C2  0432      
000026C4  C0BC 0000 3456          and.l     #255,D0
000026C8  00FF      
000026CA  C1FC 0003 3457          muls      #3,D0
000026CE  1032 0800 3458          move.b    0(A2,D0.L),D0
000026D2  6610      3459          bne.s     update_next_enemy_11
                    3460   ; next_mode.down = 1;
000026D4  13FC 0001 3461          move.b    #1,_next_mode+1.L
000026D8  0803 0431 
                    3462   ; next_mode.right = 1;
000026DC  13FC 0001 3463          move.b    #1,_next_mode.L
000026E0  0803 0430 
                    3464   update_next_enemy_11:
                    3465   ; }
                    3466   ; }
                    3467   ; }
                    3468   ; draw_sprite(enemy_bitmaps[enemies[enemy_index].shape], enemies[enemy_index].x, enemies[enemy_index].y);
000026E4  1239 0803 3469          move.b    _enemy_index.L,D1
000026E8  0432      
000026EA  C2BC 0000 3470          and.l     #255,D1
000026EE  00FF      
000026F0  C3FC 0003 3471          muls      #3,D1
000026F4  41F2 1800 3472          lea       0(A2,D1.L),A0
000026F8  1228 0001 3473          move.b    1(A0),D1
000026FC  C2BC 0000 3474          and.l     #255,D1
00002700  00FF      
00002702  2F01      3475          move.l    D1,-(A7)
00002704  1239 0803 3476          move.b    _enemy_index.L,D1
00002708  0432      
0000270A  C2BC 0000 3477          and.l     #255,D1
0000270E  00FF      
00002710  C3FC 0003 3478          muls      #3,D1
00002714  1232 1800 3479          move.b    0(A2,D1.L),D1
00002718  C2BC 0000 3480          and.l     #255,D1
0000271C  00FF      
0000271E  2F01      3481          move.l    D1,-(A7)
00002720  1239 0803 3482          move.b    _enemy_index.L,D1
00002724  0432      
00002726  C2BC 0000 3483          and.l     #255,D1
0000272A  00FF      
0000272C  C3FC 0003 3484          muls      #3,D1
00002730  41F2 1800 3485          lea       0(A2,D1.L),A0
00002734  1228 0002 3486          move.b    2(A0),D1
00002738  C2BC 0000 3487          and.l     #255,D1
0000273C  00FF      
0000273E  E589      3488          lsl.l     #2,D1
00002740  41F9 0803 3489          lea       _enemy_bitmaps.L,A0
00002744  0762      
00002746  2F30 1800 3490          move.l    0(A0,D1.L),-(A7)
0000274A  4EB8 1BE6 3491          jsr       _draw_sprite
0000274E  DEFC 000C 3492          add.w     #12,A7
                    3493   ; enemy_index++;
00002752  5239 0803 3494          addq.b    #1,_enemy_index.L
00002756  0432      
00002758  4CDF 0C00 3495          movem.l   (A7)+,A2/A3
0000275C  4E75      3496          rts
                    3497   ; }
                    3498   ; void draw_bunker(byte x, byte y, byte y2, byte h, byte w) {
                    3499   _draw_bunker:
0000275E  4E56 0000 3500          link      A6,#0
00002762  48E7 3E20 3501          movem.l   D2/D3/D4/D5/D6/A2,-(A7)
00002766  162E 000F 3502          move.b    15(A6),D3
0000276A  C6BC 0000 3503          and.l     #255,D3
0000276E  00FF      
00002770  182E 0017 3504          move.b    23(A6),D4
00002774  C8BC 0000 3505          and.l     #255,D4
00002778  00FF      
0000277A  1A2E 000B 3506          move.b    11(A6),D5
0000277E  CABC 0000 3507          and.l     #255,D5
00002782  00FF      
00002784  1C2E 0013 3508          move.b    19(A6),D6
00002788  CCBC 0000 3509          and.l     #255,D6
0000278C  00FF      
0000278E  45F8 1FBC 3510          lea       _draw_vline.L,A2
                    3511   ; byte i;
                    3512   ; for (i=0; i<h; i++) {
00002792  4202      3513          clr.b     D2
                    3514   draw_bunker_1:
00002794  B404      3515          cmp.b     D4,D2
00002796  6400 0092 3516          bhs       draw_bunker_3
                    3517   ; draw_vline(x+i, y+i, y+y2+i*2);
0000279A  1203      3518          move.b    D3,D1
0000279C  D206      3519          add.b     D6,D1
0000279E  2F00      3520          move.l    D0,-(A7)
000027A0  1002      3521          move.b    D2,D0
000027A2  C07C 00FF 3522          and.w     #255,D0
000027A6  C0FC 0002 3523          mulu.w    #2,D0
000027AA  D200      3524          add.b     D0,D1
000027AC  201F      3525          move.l    (A7)+,D0
000027AE  C2BC 0000 3526          and.l     #255,D1
000027B2  00FF      
000027B4  2F01      3527          move.l    D1,-(A7)
000027B6  1203      3528          move.b    D3,D1
000027B8  D202      3529          add.b     D2,D1
000027BA  C2BC 0000 3530          and.l     #255,D1
000027BE  00FF      
000027C0  2F01      3531          move.l    D1,-(A7)
000027C2  1205      3532          move.b    D5,D1
000027C4  D202      3533          add.b     D2,D1
000027C6  C2BC 0000 3534          and.l     #255,D1
000027CA  00FF      
000027CC  2F01      3535          move.l    D1,-(A7)
000027CE  4E92      3536          jsr       (A2)
000027D0  DEFC 000C 3537          add.w     #12,A7
                    3538   ; draw_vline(x+h*2+w-i-1, y+i, y+y2+i*2);
000027D4  1203      3539          move.b    D3,D1
000027D6  D206      3540          add.b     D6,D1
000027D8  2F00      3541          move.l    D0,-(A7)
000027DA  1002      3542          move.b    D2,D0
000027DC  C07C 00FF 3543          and.w     #255,D0
000027E0  C0FC 0002 3544          mulu.w    #2,D0
000027E4  D200      3545          add.b     D0,D1
000027E6  201F      3546          move.l    (A7)+,D0
000027E8  C2BC 0000 3547          and.l     #255,D1
000027EC  00FF      
000027EE  2F01      3548          move.l    D1,-(A7)
000027F0  1203      3549          move.b    D3,D1
000027F2  D202      3550          add.b     D2,D1
000027F4  C2BC 0000 3551          and.l     #255,D1
000027F8  00FF      
000027FA  2F01      3552          move.l    D1,-(A7)
000027FC  1205      3553          move.b    D5,D1
000027FE  2F00      3554          move.l    D0,-(A7)
00002800  1004      3555          move.b    D4,D0
00002802  C07C 00FF 3556          and.w     #255,D0
00002806  C0FC 0002 3557          mulu.w    #2,D0
0000280A  D200      3558          add.b     D0,D1
0000280C  201F      3559          move.l    (A7)+,D0
0000280E  D22E 001B 3560          add.b     27(A6),D1
00002812  9202      3561          sub.b     D2,D1
00002814  5301      3562          subq.b    #1,D1
00002816  C2BC 0000 3563          and.l     #255,D1
0000281A  00FF      
0000281C  2F01      3564          move.l    D1,-(A7)
0000281E  4E92      3565          jsr       (A2)
00002820  DEFC 000C 3566          add.w     #12,A7
00002824  5202      3567          addq.b    #1,D2
00002826  6000 FF6C 3568          bra       draw_bunker_1
                    3569   draw_bunker_3:
                    3570   ; }
                    3571   ; for (i=0; i<w; i++) {
0000282A  4202      3572          clr.b     D2
                    3573   draw_bunker_4:
0000282C  B42E 001B 3574          cmp.b     27(A6),D2
00002830  6400 0042 3575          bhs       draw_bunker_6
                    3576   ; draw_vline(x+h+i, y+h, y+y2+h*2);
00002834  1203      3577          move.b    D3,D1
00002836  D206      3578          add.b     D6,D1
00002838  2F00      3579          move.l    D0,-(A7)
0000283A  1004      3580          move.b    D4,D0
0000283C  C07C 00FF 3581          and.w     #255,D0
00002840  C0FC 0002 3582          mulu.w    #2,D0
00002844  D200      3583          add.b     D0,D1
00002846  201F      3584          move.l    (A7)+,D0
00002848  C2BC 0000 3585          and.l     #255,D1
0000284C  00FF      
0000284E  2F01      3586          move.l    D1,-(A7)
00002850  1203      3587          move.b    D3,D1
00002852  D204      3588          add.b     D4,D1
00002854  C2BC 0000 3589          and.l     #255,D1
00002858  00FF      
0000285A  2F01      3590          move.l    D1,-(A7)
0000285C  1205      3591          move.b    D5,D1
0000285E  D204      3592          add.b     D4,D1
00002860  D202      3593          add.b     D2,D1
00002862  C2BC 0000 3594          and.l     #255,D1
00002866  00FF      
00002868  2F01      3595          move.l    D1,-(A7)
0000286A  4E92      3596          jsr       (A2)
0000286C  DEFC 000C 3597          add.w     #12,A7
00002870  5202      3598          addq.b    #1,D2
00002872  60B8      3599          bra       draw_bunker_4
                    3600   draw_bunker_6:
00002874  4CDF 047C 3601          movem.l   (A7)+,D2/D3/D4/D5/D6/A2
00002878  4E5E      3602          unlk      A6
0000287A  4E75      3603          rts
                    3604   ; }
                    3605   ; }
                    3606   ; void draw_playfield() {
                    3607   _draw_playfield:
0000287C  2F02      3608          move.l    D2,-(A7)
                    3609   ; byte i;
                    3610   ; clrscr();
0000287E  4EB8 1F32 3611          jsr       _clrscr
                    3612   ; draw_string("PLAYER 1", 0, 31);
00002882  4878 001F 3613          pea       31
00002886  42A7      3614          clr.l     -(A7)
00002888  4879 0000 3615          pea       @cosmic~1_1.L
0000288C  4B88      
0000288E  4EB8 2116 3616          jsr       _draw_string
00002892  DEFC 000C 3617          add.w     #12,A7
                    3618   ; draw_score(0);
00002896  42A7      3619          clr.l     -(A7)
00002898  4EB8 22BA 3620          jsr       _draw_score
0000289C  584F      3621          addq.w    #4,A7
                    3622   ; draw_lives(0);
0000289E  42A7      3623          clr.l     -(A7)
000028A0  4EB8 224A 3624          jsr       _draw_lives
000028A4  584F      3625          addq.w    #4,A7
                    3626   ; for (i=0; i<224; i++) {
000028A6  4202      3627          clr.b     D2
                    3628   draw_playfield_1:
000028A8  C47C 00FF 3629          and.w     #255,D2
000028AC  0C42 00E0 3630          cmp.w     #224,D2
000028B0  6418      3631          bhs.s     draw_playfield_3
                    3632   ; WRITE_VIDMEM(i,0,0x7f & 0x55);
000028B2  203C 0100 3633          move.l    #16777216,D0
000028B6  0000      
000028B8  C4BC 0000 3634          and.l     #255,D2
000028BC  00FF      
000028BE  D082      3635          add.l     D2,D0
000028C0  2040      3636          move.l    D0,A0
000028C2  10BC 0055 3637          move.b    #85,(A0)
000028C6  5202      3638          addq.b    #1,D2
000028C8  60DE      3639          bra       draw_playfield_1
                    3640   draw_playfield_3:
                    3641   ; }
                    3642   ; draw_bunker(30, 40, 15, 15, 20);
000028CA  4878 0014 3643          pea       20
000028CE  4878 000F 3644          pea       15
000028D2  4878 000F 3645          pea       15
000028D6  4878 0028 3646          pea       40
000028DA  4878 001E 3647          pea       30
000028DE  4EB8 275E 3648          jsr       _draw_bunker
000028E2  DEFC 0014 3649          add.w     #20,A7
                    3650   ; draw_bunker(140, 40, 15, 15, 20);
000028E6  4878 0014 3651          pea       20
000028EA  4878 000F 3652          pea       15
000028EE  4878 000F 3653          pea       15
000028F2  4878 0028 3654          pea       40
000028F6  4878 008C 3655          pea       140
000028FA  4EB8 275E 3656          jsr       _draw_bunker
000028FE  DEFC 0014 3657          add.w     #20,A7
00002902  241F      3658          move.l    (A7)+,D2
00002904  4E75      3659          rts
                    3660   ; }
                    3661   ; char in_rect(e, x, y, w, h)
                    3662   ; Enemy *e;
                    3663   ; byte x, y, w, h;
                    3664   ; {
                    3665   _in_rect:
00002906  4E56 FFFC 3666          link      A6,#-4
0000290A  2F02      3667          move.l    D2,-(A7)
0000290C  242E 0008 3668          move.l    8(A6),D2
                    3669   ; byte eh, ew;
                    3670   ; eh = enemy_bitmaps[e->shape][0];
00002910  2042      3671          move.l    D2,A0
00002912  1028 0002 3672          move.b    2(A0),D0
00002916  C0BC 0000 3673          and.l     #255,D0
0000291A  00FF      
0000291C  E588      3674          lsl.l     #2,D0
0000291E  41F9 0803 3675          lea       _enemy_bitmaps.L,A0
00002922  0762      
00002924  2070 0800 3676          move.l    0(A0,D0.L),A0
00002928  1D50 FFFE 3677          move.b    (A0),-2(A6)
                    3678   ; ew = enemy_bitmaps[e->shape][1];
0000292C  2042      3679          move.l    D2,A0
0000292E  1028 0002 3680          move.b    2(A0),D0
00002932  C0BC 0000 3681          and.l     #255,D0
00002936  00FF      
00002938  E588      3682          lsl.l     #2,D0
0000293A  41F9 0803 3683          lea       _enemy_bitmaps.L,A0
0000293E  0762      
00002940  2070 0800 3684          move.l    0(A0,D0.L),A0
00002944  1D68 0001 3685          move.b    1(A0),-1(A6)
00002948  FFFF      
                    3686   ; return (x >= e->x - w && x <= e->x + ew && y >= e->y - h && y <= e->y + eh);
0000294A  2042      3687          move.l    D2,A0
0000294C  1010      3688          move.b    (A0),D0
0000294E  902E 0017 3689          sub.b     23(A6),D0
00002952  B02E 000F 3690          cmp.b     15(A6),D0
00002956  6200 0034 3691          bhi       in_rect_1
0000295A  2042      3692          move.l    D2,A0
0000295C  1010      3693          move.b    (A0),D0
0000295E  D02E FFFF 3694          add.b     -1(A6),D0
00002962  B02E 000F 3695          cmp.b     15(A6),D0
00002966  6524      3696          blo.s     in_rect_1
00002968  2042      3697          move.l    D2,A0
0000296A  1028 0001 3698          move.b    1(A0),D0
0000296E  902E 001B 3699          sub.b     27(A6),D0
00002972  B02E 0013 3700          cmp.b     19(A6),D0
00002976  6214      3701          bhi.s     in_rect_1
00002978  2042      3702          move.l    D2,A0
0000297A  1028 0001 3703          move.b    1(A0),D0
0000297E  D02E FFFE 3704          add.b     -2(A6),D0
00002982  B02E 0013 3705          cmp.b     19(A6),D0
00002986  6504      3706          blo.s     in_rect_1
00002988  7001      3707          moveq     #1,D0
0000298A  6002      3708          bra.s     in_rect_2
                    3709   in_rect_1:
0000298C  4280      3710          clr.l     D0
                    3711   in_rect_2:
0000298E  241F      3712          move.l    (A7)+,D2
00002990  4E5E      3713          unlk      A6
00002992  4E75      3714          rts
                    3715   ; }
                    3716   ; Enemy *find_enemy_at(x, y)
                    3717   ; byte x, y;
                    3718   ; {
                    3719   _find_enemy_at:
00002994  4E56 0000 3720          link      A6,#0
00002998  48E7 3000 3721          movem.l   D2/D3,-(A7)
                    3722   ; byte i;
                    3723   ; Enemy *e;
                    3724   ; for (i = 0; i < num_enemies; i++) {
0000299C  4202      3725          clr.b     D2
                    3726   find_enemy_at_1:
0000299E  B439 0803 3727          cmp.b     _num_enemies.L,D2
000029A2  0434      
000029A4  6400 004C 3728          bhs       find_enemy_at_3
                    3729   ; e = &enemies[i];
000029A8  41F9 0803 3730          lea       _enemies.L,A0
000029AC  044A      
000029AE  C4BC 0000 3731          and.l     #255,D2
000029B2  00FF      
000029B4  2002      3732          move.l    D2,D0
000029B6  C1FC 0003 3733          muls      #3,D0
000029BA  D1C0      3734          add.l     D0,A0
000029BC  2608      3735          move.l    A0,D3
                    3736   ; if (in_rect(e, x, y, 2, 0)) {
000029BE  42A7      3737          clr.l     -(A7)
000029C0  4878 0002 3738          pea       2
000029C4  122E 000F 3739          move.b    15(A6),D1
000029C8  C2BC 0000 3740          and.l     #255,D1
000029CC  00FF      
000029CE  2F01      3741          move.l    D1,-(A7)
000029D0  122E 000B 3742          move.b    11(A6),D1
000029D4  C2BC 0000 3743          and.l     #255,D1
000029D8  00FF      
000029DA  2F01      3744          move.l    D1,-(A7)
000029DC  2F03      3745          move.l    D3,-(A7)
000029DE  4EB8 2906 3746          jsr       _in_rect
000029E2  DEFC 0014 3747          add.w     #20,A7
000029E6  4A00      3748          tst.b     D0
000029E8  6704      3749          beq.s     find_enemy_at_4
                    3750   ; return e;
000029EA  2003      3751          move.l    D3,D0
000029EC  6006      3752          bra.s     find_enemy_at_6
                    3753   find_enemy_at_4:
000029EE  5202      3754          addq.b    #1,D2
000029F0  60AC      3755          bra       find_enemy_at_1
                    3756   find_enemy_at_3:
                    3757   ; }
                    3758   ; }
                    3759   ; return NULL;
000029F2  4280      3760          clr.l     D0
                    3761   find_enemy_at_6:
000029F4  4CDF 000C 3762          movem.l   (A7)+,D2/D3
000029F8  4E5E      3763          unlk      A6
000029FA  4E75      3764          rts
                    3765   ; }
                    3766   ; void check_bullet_hit(x, y)
                    3767   ; byte x, y;
                    3768   ; {
                    3769   _check_bullet_hit:
000029FC  4E56 0000 3770          link      A6,#0
00002A00  2F02      3771          move.l    D2,-(A7)
                    3772   ; Enemy *e;
                    3773   ; e = find_enemy_at(x, y);
00002A02  122E 000F 3774          move.b    15(A6),D1
00002A06  C2BC 0000 3775          and.l     #255,D1
00002A0A  00FF      
00002A0C  2F01      3776          move.l    D1,-(A7)
00002A0E  122E 000B 3777          move.b    11(A6),D1
00002A12  C2BC 0000 3778          and.l     #255,D1
00002A16  00FF      
00002A18  2F01      3779          move.l    D1,-(A7)
00002A1A  4EB8 2994 3780          jsr       _find_enemy_at
00002A1E  504F      3781          addq.w    #8,A7
00002A20  2400      3782          move.l    D0,D2
                    3783   ; if (e) {
00002A22  4A82      3784          tst.l     D2
00002A24  6712      3785          beq.s     check_bullet_hit_1
                    3786   ; delete_enemy(e);
00002A26  2F02      3787          move.l    D2,-(A7)
00002A28  4EB8 24CE 3788          jsr       _delete_enemy
00002A2C  584F      3789          addq.w    #4,A7
                    3790   ; add_score(0x25);
00002A2E  4878 0025 3791          pea       37
00002A32  4EB8 2306 3792          jsr       _add_score
00002A36  584F      3793          addq.w    #4,A7
                    3794   check_bullet_hit_1:
00002A38  241F      3795          move.l    (A7)+,D2
00002A3A  4E5E      3796          unlk      A6
00002A3C  4E75      3797          rts
                    3798   ; }
                    3799   ; }
                    3800   ; void fire_bullet()
                    3801   ; {
                    3802   _fire_bullet:
                    3803   ; bullet_x = player_x + 13;
00002A3E  1039 0803 3804          move.b    _player_x.L,D0
00002A42  0436      
00002A44  0600 000D 3805          add.b     #13,D0
00002A48  13C0 0803 3806          move.b    D0,_bullet_x.L
00002A4C  0438      
                    3807   ; bullet_y = 3;
00002A4E  13FC 0003 3808          move.b    #3,_bullet_y.L
00002A52  0803 043A 
                    3809   ; xor_sprite(bullet_bitmap, bullet_x, bullet_y); /* Draw bullet */
00002A56  1239 0803 3810          move.b    _bullet_y.L,D1
00002A5A  043A      
00002A5C  C2BC 0000 3811          and.l     #255,D1
00002A60  00FF      
00002A62  2F01      3812          move.l    D1,-(A7)
00002A64  1239 0803 3813          move.b    _bullet_x.L,D1
00002A68  0438      
00002A6A  C2BC 0000 3814          and.l     #255,D1
00002A6E  00FF      
00002A70  2F01      3815          move.l    D1,-(A7)
00002A72  4879 0803 3816          pea       _bullet_bitmap.L
00002A76  06D6      
00002A78  4EB8 1C56 3817          jsr       _xor_sprite
00002A7C  DEFC 000C 3818          add.w     #12,A7
00002A80  4E75      3819          rts
                    3820   ; }
                    3821   ; void move_bullet()
                    3822   ; {
                    3823   _move_bullet:
00002A82  4E56 FFFC 3824          link      A6,#-4
00002A86  2F0A      3825          move.l    A2,-(A7)
00002A88  45F9 0803 3826          lea       _bullet_bitmap.L,A2
00002A8C  06D6      
                    3827   ; byte leftover;
                    3828   ; leftover = xor_sprite(bullet_bitmap, bullet_x, bullet_y); /* Erase bullet */
00002A8E  1239 0803 3829          move.b    _bullet_y.L,D1
00002A92  043A      
00002A94  C2BC 0000 3830          and.l     #255,D1
00002A98  00FF      
00002A9A  2F01      3831          move.l    D1,-(A7)
00002A9C  1239 0803 3832          move.b    _bullet_x.L,D1
00002AA0  0438      
00002AA2  C2BC 0000 3833          and.l     #255,D1
00002AA6  00FF      
00002AA8  2F01      3834          move.l    D1,-(A7)
00002AAA  2F0A      3835          move.l    A2,-(A7)
00002AAC  4EB8 1C56 3836          jsr       _xor_sprite
00002AB0  DEFC 000C 3837          add.w     #12,A7
00002AB4  1D40 FFFF 3838          move.b    D0,-1(A6)
                    3839   ; if (leftover || bullet_y > 26) {
00002AB8  102E FFFF 3840          move.b    -1(A6),D0
00002ABC  C0BC 0000 3841          and.l     #255,D0
00002AC0  00FF      
00002AC2  660E      3842          bne.s     move_bullet_3
00002AC4  1039 0803 3843          move.b    _bullet_y.L,D0
00002AC8  043A      
00002ACA  0C00 001A 3844          cmp.b     #26,D0
00002ACE  6300 0054 3845          bls       move_bullet_1
                    3846   move_bullet_3:
                    3847   ; clear_sprite(bullet_bitmap, bullet_x, bullet_y);
00002AD2  1239 0803 3848          move.b    _bullet_y.L,D1
00002AD6  043A      
00002AD8  C2BC 0000 3849          and.l     #255,D1
00002ADC  00FF      
00002ADE  2F01      3850          move.l    D1,-(A7)
00002AE0  1239 0803 3851          move.b    _bullet_x.L,D1
00002AE4  0438      
00002AE6  C2BC 0000 3852          and.l     #255,D1
00002AEA  00FF      
00002AEC  2F01      3853          move.l    D1,-(A7)
00002AEE  2F0A      3854          move.l    A2,-(A7)
00002AF0  4EB8 1D44 3855          jsr       _clear_sprite
00002AF4  DEFC 000C 3856          add.w     #12,A7
                    3857   ; check_bullet_hit(bullet_x, bullet_y + 2);
00002AF8  1239 0803 3858          move.b    _bullet_y.L,D1
00002AFC  043A      
00002AFE  5401      3859          addq.b    #2,D1
00002B00  C2BC 0000 3860          and.l     #255,D1
00002B04  00FF      
00002B06  2F01      3861          move.l    D1,-(A7)
00002B08  1239 0803 3862          move.b    _bullet_x.L,D1
00002B0C  0438      
00002B0E  C2BC 0000 3863          and.l     #255,D1
00002B12  00FF      
00002B14  2F01      3864          move.l    D1,-(A7)
00002B16  4EB8 29FC 3865          jsr       _check_bullet_hit
00002B1A  504F      3866          addq.w    #8,A7
                    3867   ; bullet_y = 0;
00002B1C  4239 0803 3868          clr.b     _bullet_y.L
00002B20  043A      
00002B22  602C      3869          bra.s     move_bullet_2
                    3870   move_bullet_1:
                    3871   ; } else {
                    3872   ; bullet_y++;
00002B24  5239 0803 3873          addq.b    #1,_bullet_y.L
00002B28  043A      
                    3874   ; xor_sprite(bullet_bitmap, bullet_x, bullet_y); /* Draw bullet */
00002B2A  1239 0803 3875          move.b    _bullet_y.L,D1
00002B2E  043A      
00002B30  C2BC 0000 3876          and.l     #255,D1
00002B34  00FF      
00002B36  2F01      3877          move.l    D1,-(A7)
00002B38  1239 0803 3878          move.b    _bullet_x.L,D1
00002B3C  0438      
00002B3E  C2BC 0000 3879          and.l     #255,D1
00002B42  00FF      
00002B44  2F01      3880          move.l    D1,-(A7)
00002B46  2F0A      3881          move.l    A2,-(A7)
00002B48  4EB8 1C56 3882          jsr       _xor_sprite
00002B4C  DEFC 000C 3883          add.w     #12,A7
                    3884   move_bullet_2:
00002B50  245F      3885          move.l    (A7)+,A2
00002B52  4E5E      3886          unlk      A6
00002B54  4E75      3887          rts
                    3888   ; }
                    3889   ; }
                    3890   ; void drop_bomb()
                    3891   ; {
                    3892   _drop_bomb:
00002B56  2F02      3893          move.l    D2,-(A7)
                    3894   ; Enemy *e;
                    3895   ; e = &enemies[enemy_index];
00002B58  41F9 0803 3896          lea       _enemies.L,A0
00002B5C  044A      
00002B5E  1039 0803 3897          move.b    _enemy_index.L,D0
00002B62  0432      
00002B64  C0BC 0000 3898          and.l     #255,D0
00002B68  00FF      
00002B6A  C1FC 0003 3899          muls      #3,D0
00002B6E  D1C0      3900          add.l     D0,A0
00002B70  2408      3901          move.l    A0,D2
                    3902   ; bomb_x = e->x + 7;
00002B72  2042      3903          move.l    D2,A0
00002B74  1010      3904          move.b    (A0),D0
00002B76  5E00      3905          addq.b    #7,D0
00002B78  13C0 0803 3906          move.b    D0,_bomb_x.L
00002B7C  043C      
                    3907   ; bomb_y = e->y - 2;
00002B7E  2042      3908          move.l    D2,A0
00002B80  1028 0001 3909          move.b    1(A0),D0
00002B84  5500      3910          subq.b    #2,D0
00002B86  13C0 0803 3911          move.b    D0,_bomb_y.L
00002B8A  043E      
                    3912   ; xor_sprite(bomb_bitmap, bomb_x, bomb_y); /* Draw bomb */
00002B8C  1239 0803 3913          move.b    _bomb_y.L,D1
00002B90  043E      
00002B92  C2BC 0000 3914          and.l     #255,D1
00002B96  00FF      
00002B98  2F01      3915          move.l    D1,-(A7)
00002B9A  1239 0803 3916          move.b    _bomb_x.L,D1
00002B9E  043C      
00002BA0  C2BC 0000 3917          and.l     #255,D1
00002BA4  00FF      
00002BA6  2F01      3918          move.l    D1,-(A7)
00002BA8  4879 0803 3919          pea       _bomb_bitmap.L
00002BAC  06CE      
00002BAE  4EB8 1C56 3920          jsr       _xor_sprite
00002BB2  DEFC 000C 3921          add.w     #12,A7
00002BB6  241F      3922          move.l    (A7)+,D2
00002BB8  4E75      3923          rts
                    3924   ; }
                    3925   ; void move_bomb()
                    3926   ; {
                    3927   _move_bomb:
00002BBA  4E56 FFFC 3928          link      A6,#-4
00002BBE  2F0A      3929          move.l    A2,-(A7)
00002BC0  45F9 0803 3930          lea       _bomb_bitmap.L,A2
00002BC4  06CE      
                    3931   ; byte leftover;
                    3932   ; leftover = xor_sprite(bomb_bitmap, bomb_x, bomb_y); /* Erase bomb */
00002BC6  1239 0803 3933          move.b    _bomb_y.L,D1
00002BCA  043E      
00002BCC  C2BC 0000 3934          and.l     #255,D1
00002BD0  00FF      
00002BD2  2F01      3935          move.l    D1,-(A7)
00002BD4  1239 0803 3936          move.b    _bomb_x.L,D1
00002BD8  043C      
00002BDA  C2BC 0000 3937          and.l     #255,D1
00002BDE  00FF      
00002BE0  2F01      3938          move.l    D1,-(A7)
00002BE2  2F0A      3939          move.l    A2,-(A7)
00002BE4  4EB8 1C56 3940          jsr       _xor_sprite
00002BE8  DEFC 000C 3941          add.w     #12,A7
00002BEC  1D40 FFFF 3942          move.b    D0,-1(A6)
                    3943   ; if (bomb_y < 2) {
00002BF0  1039 0803 3944          move.b    _bomb_y.L,D0
00002BF4  043E      
00002BF6  0C00 0002 3945          cmp.b     #2,D0
00002BFA  640A      3946          bhs.s     move_bomb_1
                    3947   ; bomb_y = 0;
00002BFC  4239 0803 3948          clr.b     _bomb_y.L
00002C00  043E      
00002C02  6000 0072 3949          bra       move_bomb_4
                    3950   move_bomb_1:
                    3951   ; } else if (leftover) {
00002C06  4A2E FFFF 3952          tst.b     -1(A6)
00002C0A  673E      3953          beq.s     move_bomb_3
                    3954   ; erase_sprite(bomb_bitmap, bomb_x, bomb_y); /* Erase bunker */
00002C0C  1239 0803 3955          move.b    _bomb_y.L,D1
00002C10  043E      
00002C12  C2BC 0000 3956          and.l     #255,D1
00002C16  00FF      
00002C18  2F01      3957          move.l    D1,-(A7)
00002C1A  1239 0803 3958          move.b    _bomb_x.L,D1
00002C1E  043C      
00002C20  C2BC 0000 3959          and.l     #255,D1
00002C24  00FF      
00002C26  2F01      3960          move.l    D1,-(A7)
00002C28  2F0A      3961          move.l    A2,-(A7)
00002C2A  4EB8 1CD0 3962          jsr       _erase_sprite
00002C2E  DEFC 000C 3963          add.w     #12,A7
                    3964   ; if (bomb_y < 3) {
00002C32  1039 0803 3965          move.b    _bomb_y.L,D0
00002C36  043E      
00002C38  0C00 0003 3966          cmp.b     #3,D0
00002C3C  6404      3967          bhs.s     move_bomb_5
                    3968   ; /* Player was hit (probably) */
                    3969   ; destroy_player();
00002C3E  4EB8 23FC 3970          jsr       _destroy_player
                    3971   move_bomb_5:
                    3972   ; }
                    3973   ; bomb_y = 0;
00002C42  4239 0803 3974          clr.b     _bomb_y.L
00002C46  043E      
00002C48  602C      3975          bra.s     move_bomb_4
                    3976   move_bomb_3:
                    3977   ; } else {
                    3978   ; bomb_y--;
00002C4A  5339 0803 3979          subq.b    #1,_bomb_y.L
00002C4E  043E      
                    3980   ; xor_sprite(bomb_bitmap, bomb_x, bomb_y); /* Draw bomb */
00002C50  1239 0803 3981          move.b    _bomb_y.L,D1
00002C54  043E      
00002C56  C2BC 0000 3982          and.l     #255,D1
00002C5A  00FF      
00002C5C  2F01      3983          move.l    D1,-(A7)
00002C5E  1239 0803 3984          move.b    _bomb_x.L,D1
00002C62  043C      
00002C64  C2BC 0000 3985          and.l     #255,D1
00002C68  00FF      
00002C6A  2F01      3986          move.l    D1,-(A7)
00002C6C  2F0A      3987          move.l    A2,-(A7)
00002C6E  4EB8 1C56 3988          jsr       _xor_sprite
00002C72  DEFC 000C 3989          add.w     #12,A7
                    3990   move_bomb_4:
00002C76  245F      3991          move.l    (A7)+,A2
00002C78  4E5E      3992          unlk      A6
00002C7A  4E75      3993          rts
                    3994   ; }
                    3995   ; }
                    3996   ; byte frame;
                    3997   ; void play_round() {
                    3998   _play_round:
                    3999   ; draw_playfield();
00002C7C  4EB8 287C 4000          jsr       _draw_playfield
                    4001   ; player_x = 96;
00002C80  13FC 0060 4002          move.b    #96,_player_x.L
00002C84  0803 0436 
                    4003   ; bullet_y = 0;
00002C88  4239 0803 4004          clr.b     _bullet_y.L
00002C8C  043A      
                    4005   ; bomb_y = 0;
00002C8E  4239 0803 4006          clr.b     _bomb_y.L
00002C92  043E      
                    4007   ; frame = 0;
00002C94  4239 0803 4008          clr.b     _frame.L
00002C98  0776      
                    4009   ; while (player_x != 0xff && num_enemies) {
                    4010   play_round_1:
00002C9A  1039 0803 4011          move.b    _player_x.L,D0
00002C9E  0436      
00002CA0  C07C 00FF 4012          and.w     #255,D0
00002CA4  0C40 00FF 4013          cmp.w     #255,D0
00002CA8  6700 0056 4014          beq       play_round_3
00002CAC  1039 0803 4015          move.b    _num_enemies.L,D0
00002CB0  0434      
00002CB2  C0BC 0000 4016          and.l     #255,D0
00002CB6  00FF      
00002CB8  6700 0046 4017          beq       play_round_3
                    4018   ; delay_ms(COSMIC_IMPALAS_TIMER_DELAY_MS);
00002CBC  4878 0032 4019          pea       50
00002CC0  4EB8 1EFA 4020          jsr       _delay_ms
00002CC4  584F      4021          addq.w    #4,A7
                    4022   ; move_player();
00002CC6  4EB8 1DB4 4023          jsr       _move_player
                    4024   ; if (bullet_y) {
00002CCA  4A39 0803 4025          tst.b     _bullet_y.L
00002CCE  043A      
00002CD0  6704      4026          beq.s     play_round_4
                    4027   ; move_bullet();
00002CD2  4EB8 2A82 4028          jsr       _move_bullet
                    4029   play_round_4:
                    4030   ; }
                    4031   ; update_next_enemy();
00002CD6  4EB8 2558 4032          jsr       _update_next_enemy
                    4033   ; if (frame & 1) {
00002CDA  1039 0803 4034          move.b    _frame.L,D0
00002CDE  0776      
00002CE0  C03C 0001 4035          and.b     #1,D0
00002CE4  6712      4036          beq.s     play_round_9
                    4037   ; if (bomb_y == 0) {
00002CE6  1039 0803 4038          move.b    _bomb_y.L,D0
00002CEA  043E      
00002CEC  6606      4039          bne.s     play_round_8
                    4040   ; drop_bomb();
00002CEE  4EB8 2B56 4041          jsr       _drop_bomb
00002CF2  6004      4042          bra.s     play_round_9
                    4043   play_round_8:
                    4044   ; } else {
                    4045   ; move_bomb();
00002CF4  4EB8 2BBA 4046          jsr       _move_bomb
                    4047   play_round_9:
                    4048   ; }
                    4049   ; }
                    4050   ; frame++;
00002CF8  5239 0803 4051          addq.b    #1,_frame.L
00002CFC  0776      
00002CFE  609A      4052          bra       play_round_1
                    4053   play_round_3:
00002D00  4E75      4054          rts
                    4055   ; }
                    4056   ; }
                    4057   ; void init_game() {
                    4058   _init_game:
                    4059   ; score = 0;
00002D02  4279 0803 4060          clr.w     _score.L
00002D06  0446      
                    4061   ; lives = MAXLIVES;
00002D08  13FC 0005 4062          move.b    #5,_lives.L
00002D0C  0803 0448 
                    4063   ; curplayer = 0;
00002D10  4239 0803 4064          clr.b     _curplayer.L
00002D14  0444      
00002D16  4E75      4065          rts
                    4066   ; }
                    4067   ; void game_over_msg() {
                    4068   _game_over_msg:
00002D18  48E7 2020 4069          movem.l   D2/A2,-(A7)
00002D1C  45F8 2116 4070          lea       _draw_string.L,A2
                    4071   ; byte i;
                    4072   ; for (i=0; i<50; i++) {
00002D20  4202      4073          clr.b     D2
                    4074   game_over_msg_1:
00002D22  0C02 0032 4075          cmp.b     #50,D2
00002D26  6400 006A 4076          bhs       game_over_msg_3
                    4077   ; draw_string(" *************** ", 5, 15);
00002D2A  4878 000F 4078          pea       15
00002D2E  4878 0005 4079          pea       5
00002D32  4879 0000 4080          pea       @cosmic~1_2.L
00002D36  4B92      
00002D38  4E92      4081          jsr       (A2)
00002D3A  DEFC 000C 4082          add.w     #12,A7
                    4083   ; draw_string("***           ***", 5, 16);
00002D3E  4878 0010 4084          pea       16
00002D42  4878 0005 4085          pea       5
00002D46  4879 0000 4086          pea       @cosmic~1_3.L
00002D4A  4BA4      
00002D4C  4E92      4087          jsr       (A2)
00002D4E  DEFC 000C 4088          add.w     #12,A7
                    4089   ; draw_string("**  GAME OVER  **", 5, 17);
00002D52  4878 0011 4090          pea       17
00002D56  4878 0005 4091          pea       5
00002D5A  4879 0000 4092          pea       @cosmic~1_4.L
00002D5E  4BB6      
00002D60  4E92      4093          jsr       (A2)
00002D62  DEFC 000C 4094          add.w     #12,A7
                    4095   ; draw_string("***           ***", 5, 18);
00002D66  4878 0012 4096          pea       18
00002D6A  4878 0005 4097          pea       5
00002D6E  4879 0000 4098          pea       @cosmic~1_5.L
00002D72  4BC8      
00002D74  4E92      4099          jsr       (A2)
00002D76  DEFC 000C 4100          add.w     #12,A7
                    4101   ; draw_string(" *************** ", 5, 19);
00002D7A  4878 0013 4102          pea       19
00002D7E  4878 0005 4103          pea       5
00002D82  4879 0000 4104          pea       @cosmic~1_6.L
00002D86  4BDA      
00002D88  4E92      4105          jsr       (A2)
00002D8A  DEFC 000C 4106          add.w     #12,A7
00002D8E  5202      4107          addq.b    #1,D2
00002D90  6090      4108          bra       game_over_msg_1
                    4109   game_over_msg_3:
00002D92  4CDF 0404 4110          movem.l   (A7)+,D2/A2
00002D96  4E75      4111          rts
                    4112   ; }
                    4113   ; }
                    4114   ; void play_game() {
                    4115   _play_game:
                    4116   ; attract = 0;
00002D98  4239 0803 4117          clr.b     _attract.L
00002D9C  0440      
                    4118   ; init_game();
00002D9E  4EB8 2D02 4119          jsr       _init_game
                    4120   ; init_enemies();
00002DA2  4EB8 2434 4121          jsr       _init_enemies
                    4122   ; while (lives) {
                    4123   play_game_1:
00002DA6  4A39 0803 4124          tst.b     _lives.L
00002DAA  0448      
00002DAC  6712      4125          beq.s     play_game_3
                    4126   ; play_round();
00002DAE  4EB8 2C7C 4127          jsr       _play_round
                    4128   ; if (num_enemies == 0) {
00002DB2  1039 0803 4129          move.b    _num_enemies.L,D0
00002DB6  0434      
00002DB8  6604      4130          bne.s     play_game_4
                    4131   ; init_enemies();
00002DBA  4EB8 2434 4132          jsr       _init_enemies
                    4133   play_game_4:
00002DBE  60E6      4134          bra       play_game_1
                    4135   play_game_3:
                    4136   ; }
                    4137   ; }
                    4138   ; game_over_msg();
00002DC0  4EB8 2D18 4139          jsr       _game_over_msg
00002DC4  4E75      4140          rts
                    4141   ; }
                    4142   ; void attract_mode() {
                    4143   _attract_mode:
                    4144   ; attract = 1;
00002DC6  13FC 0001 4145          move.b    #1,_attract.L
00002DCA  0803 0440 
                    4146   ; while (1) {
                    4147   attract_mode_1:
                    4148   ; init_enemies();
00002DCE  4EB8 2434 4149          jsr       _init_enemies
                    4150   ; play_round();
00002DD2  4EB8 2C7C 4151          jsr       _play_round
00002DD6  60F6      4152          bra       attract_mode_1
                    4153   ; }
                    4154   ; }
                    4155   ; void initialize_all_bitmaps() {
                    4156   _initialize_all_bitmaps:
00002DD8  48E7 003C 4157          movem.l   A2/A3/A4/A5,-(A7)
00002DDC  45F9 0803 4158          lea       _font8x8.L,A2
00002DE0  049E      
00002DE2  47F9 0803 4159          lea       _player_bitmap.L,A3
00002DE6  0696      
00002DE8  49F9 0803 4160          lea       _enemy4_bitmap.L,A4
00002DEC  0740      
00002DEE  4BF9 0803 4161          lea       _enemy3_bitmap.L,A5
00002DF2  071E      
                    4162   ; /* Initialize player_bitmap */
                    4163   ; player_bitmap[0] = 2;
00002DF4  16BC 0002 4164          move.b    #2,(A3)
                    4165   ; player_bitmap[1] = 27;
00002DF8  177C 001B 4166          move.b    #27,1(A3)
00002DFC  0001      
                    4167   ; player_bitmap[2] = 0x00;
00002DFE  422B 0002 4168          clr.b     2(A3)
                    4169   ; player_bitmap[3] = 0x00;
00002E02  422B 0003 4170          clr.b     3(A3)
                    4171   ; player_bitmap[4] = 0x00;
00002E06  422B 0004 4172          clr.b     4(A3)
                    4173   ; player_bitmap[5] = 0x00;
00002E0A  422B 0005 4174          clr.b     5(A3)
                    4175   ; player_bitmap[6] = 0x0F;
00002E0E  177C 000F 4176          move.b    #15,6(A3)
00002E12  0006      
                    4177   ; player_bitmap[7] = 0x00;
00002E14  422B 0007 4178          clr.b     7(A3)
                    4179   ; player_bitmap[8] = 0x3E;
00002E18  177C 003E 4180          move.b    #62,8(A3)
00002E1C  0008      
                    4181   ; player_bitmap[9] = 0x00;
00002E1E  422B 0009 4182          clr.b     9(A3)
                    4183   ; player_bitmap[10] = 0xF4;
00002E22  177C 00F4 4184          move.b    #244,10(A3)
00002E26  000A      
                    4185   ; player_bitmap[11] = 0x07;
00002E28  177C 0007 4186          move.b    #7,11(A3)
00002E2C  000B      
                    4187   ; player_bitmap[12] = 0xEC;
00002E2E  177C 00EC 4188          move.b    #236,12(A3)
00002E32  000C      
                    4189   ; player_bitmap[13] = 0x00;
00002E34  422B 000D 4190          clr.b     13(A3)
                    4191   ; player_bitmap[14] = 0x76;
00002E38  177C 0076 4192          move.b    #118,14(A3)
00002E3C  000E      
                    4193   ; player_bitmap[15] = 0x00;
00002E3E  422B 000F 4194          clr.b     15(A3)
                    4195   ; player_bitmap[16] = 0x2B;
00002E42  177C 002B 4196          move.b    #43,16(A3)
00002E46  0010      
                    4197   ; player_bitmap[17] = 0x00;
00002E48  422B 0011 4198          clr.b     17(A3)
                    4199   ; player_bitmap[18] = 0x33;
00002E4C  177C 0033 4200          move.b    #51,18(A3)
00002E50  0012      
                    4201   ; player_bitmap[19] = 0x00;
00002E52  422B 0013 4202          clr.b     19(A3)
                    4203   ; player_bitmap[20] = 0x75;
00002E56  177C 0075 4204          move.b    #117,20(A3)
00002E5A  0014      
                    4205   ; player_bitmap[21] = 0x00;
00002E5C  422B 0015 4206          clr.b     21(A3)
                    4207   ; player_bitmap[22] = 0xF5;
00002E60  177C 00F5 4208          move.b    #245,22(A3)
00002E64  0016      
                    4209   ; player_bitmap[23] = 0x00;
00002E66  422B 0017 4210          clr.b     23(A3)
                    4211   ; player_bitmap[24] = 0xEB;
00002E6A  177C 00EB 4212          move.b    #235,24(A3)
00002E6E  0018      
                    4213   ; player_bitmap[25] = 0x31;
00002E70  177C 0031 4214          move.b    #49,25(A3)
00002E74  0019      
                    4215   ; player_bitmap[26] = 0xBF;
00002E76  177C 00BF 4216          move.b    #191,26(A3)
00002E7A  001A      
                    4217   ; player_bitmap[27] = 0xEF;
00002E7C  177C 00EF 4218          move.b    #239,27(A3)
00002E80  001B      
                    4219   ; player_bitmap[28] = 0x3F;
00002E82  177C 003F 4220          move.b    #63,28(A3)
00002E86  001C      
                    4221   ; player_bitmap[29] = 0xCF;
00002E88  177C 00CF 4222          move.b    #207,29(A3)
00002E8C  001D      
                    4223   ; player_bitmap[30] = 0xBF;
00002E8E  177C 00BF 4224          move.b    #191,30(A3)
00002E92  001E      
                    4225   ; player_bitmap[31] = 0xEF;
00002E94  177C 00EF 4226          move.b    #239,31(A3)
00002E98  001F      
                    4227   ; player_bitmap[32] = 0xEB;
00002E9A  177C 00EB 4228          move.b    #235,32(A3)
00002E9E  0020      
                    4229   ; player_bitmap[33] = 0x31;
00002EA0  177C 0031 4230          move.b    #49,33(A3)
00002EA4  0021      
                    4231   ; player_bitmap[34] = 0xF5;
00002EA6  177C 00F5 4232          move.b    #245,34(A3)
00002EAA  0022      
                    4233   ; player_bitmap[35] = 0x00;
00002EAC  422B 0023 4234          clr.b     35(A3)
                    4235   ; player_bitmap[36] = 0x75;
00002EB0  177C 0075 4236          move.b    #117,36(A3)
00002EB4  0024      
                    4237   ; player_bitmap[37] = 0x00;
00002EB6  422B 0025 4238          clr.b     37(A3)
                    4239   ; player_bitmap[38] = 0x33;
00002EBA  177C 0033 4240          move.b    #51,38(A3)
00002EBE  0026      
                    4241   ; player_bitmap[39] = 0x00;
00002EC0  422B 0027 4242          clr.b     39(A3)
                    4243   ; player_bitmap[40] = 0x2B;
00002EC4  177C 002B 4244          move.b    #43,40(A3)
00002EC8  0028      
                    4245   ; player_bitmap[41] = 0x00;
00002ECA  422B 0029 4246          clr.b     41(A3)
                    4247   ; player_bitmap[42] = 0x76;
00002ECE  177C 0076 4248          move.b    #118,42(A3)
00002ED2  002A      
                    4249   ; player_bitmap[43] = 0x00;
00002ED4  422B 002B 4250          clr.b     43(A3)
                    4251   ; player_bitmap[44] = 0xEC;
00002ED8  177C 00EC 4252          move.b    #236,44(A3)
00002EDC  002C      
                    4253   ; player_bitmap[45] = 0x00;
00002EDE  422B 002D 4254          clr.b     45(A3)
                    4255   ; player_bitmap[46] = 0xF4;
00002EE2  177C 00F4 4256          move.b    #244,46(A3)
00002EE6  002E      
                    4257   ; player_bitmap[47] = 0x07;
00002EE8  177C 0007 4258          move.b    #7,47(A3)
00002EEC  002F      
                    4259   ; player_bitmap[48] = 0x3E;
00002EEE  177C 003E 4260          move.b    #62,48(A3)
00002EF2  0030      
                    4261   ; player_bitmap[49] = 0x00;
00002EF4  422B 0031 4262          clr.b     49(A3)
                    4263   ; player_bitmap[50] = 0x0F;
00002EF8  177C 000F 4264          move.b    #15,50(A3)
00002EFC  0032      
                    4265   ; player_bitmap[51] = 0x00;
00002EFE  422B 0033 4266          clr.b     51(A3)
                    4267   ; player_bitmap[52] = 0x00;
00002F02  422B 0034 4268          clr.b     52(A3)
                    4269   ; player_bitmap[53] = 0x00;
00002F06  422B 0035 4270          clr.b     53(A3)
                    4271   ; player_bitmap[54] = 0x00;
00002F0A  422B 0036 4272          clr.b     54(A3)
                    4273   ; player_bitmap[55] = 0x00;
00002F0E  422B 0037 4274          clr.b     55(A3)
                    4275   ; /* Initialize bomb_bitmap */
                    4276   ; bomb_bitmap[0] = 1;
00002F12  13FC 0001 4277          move.b    #1,_bomb_bitmap.L
00002F16  0803 06CE 
                    4278   ; bomb_bitmap[1] = 5;
00002F1A  13FC 0005 4279          move.b    #5,_bomb_bitmap+1.L
00002F1E  0803 06CF 
                    4280   ; bomb_bitmap[2] = 0x88;
00002F22  13FC 0088 4281          move.b    #136,_bomb_bitmap+2.L
00002F26  0803 06D0 
                    4282   ; bomb_bitmap[3] = 0x55;
00002F2A  13FC 0055 4283          move.b    #85,_bomb_bitmap+3.L
00002F2E  0803 06D1 
                    4284   ; bomb_bitmap[4] = 0x77;
00002F32  13FC 0077 4285          move.b    #119,_bomb_bitmap+4.L
00002F36  0803 06D2 
                    4286   ; bomb_bitmap[5] = 0x55;
00002F3A  13FC 0055 4287          move.b    #85,_bomb_bitmap+5.L
00002F3E  0803 06D3 
                    4288   ; bomb_bitmap[6] = 0x88;
00002F42  13FC 0088 4289          move.b    #136,_bomb_bitmap+6.L
00002F46  0803 06D4 
                    4290   ; /* Initialize bullet_bitmap */
                    4291   ; bullet_bitmap[0] = 2;
00002F4A  13FC 0002 4292          move.b    #2,_bullet_bitmap.L
00002F4E  0803 06D6 
                    4293   ; bullet_bitmap[1] = 2;
00002F52  13FC 0002 4294          move.b    #2,_bullet_bitmap+1.L
00002F56  0803 06D7 
                    4295   ; bullet_bitmap[2] = 0x88;
00002F5A  13FC 0088 4296          move.b    #136,_bullet_bitmap+2.L
00002F5E  0803 06D8 
                    4297   ; bullet_bitmap[3] = 0x88;
00002F62  13FC 0088 4298          move.b    #136,_bullet_bitmap+3.L
00002F66  0803 06D9 
                    4299   ; bullet_bitmap[4] = 0x44;
00002F6A  13FC 0044 4300          move.b    #68,_bullet_bitmap+4.L
00002F6E  0803 06DA 
                    4301   ; bullet_bitmap[5] = 0x44;
00002F72  13FC 0044 4302          move.b    #68,_bullet_bitmap+5.L
00002F76  0803 06DB 
                    4303   ; /* Initialize enemy1_bitmap */
                    4304   ; enemy1_bitmap[0] = 2;
00002F7A  13FC 0002 4305          move.b    #2,_enemy1_bitmap.L
00002F7E  0803 06DA 
                    4306   ; enemy1_bitmap[1] = 17;
00002F82  13FC 0011 4307          move.b    #17,_enemy1_bitmap+1.L
00002F86  0803 06DB 
                    4308   ; enemy1_bitmap[2] = 0x00;
00002F8A  4239 0803 4309          clr.b     _enemy1_bitmap+2.L
00002F8E  06DC      
                    4310   ; enemy1_bitmap[3] = 0x00;
00002F90  4239 0803 4311          clr.b     _enemy1_bitmap+3.L
00002F94  06DD      
                    4312   ; enemy1_bitmap[4] = 0x00;
00002F96  4239 0803 4313          clr.b     _enemy1_bitmap+4.L
00002F9A  06DE      
                    4314   ; enemy1_bitmap[5] = 0x0C;
00002F9C  13FC 000C 4315          move.b    #12,_enemy1_bitmap+5.L
00002FA0  0803 06DF 
                    4316   ; enemy1_bitmap[6] = 0x04;
00002FA4  13FC 0004 4317          move.b    #4,_enemy1_bitmap+6.L
00002FA8  0803 06E0 
                    4318   ; enemy1_bitmap[7] = 0x1E;
00002FAC  13FC 001E 4319          move.b    #30,_enemy1_bitmap+7.L
00002FB0  0803 06E1 
                    4320   ; enemy1_bitmap[8] = 0x46;
00002FB4  13FC 0046 4321          move.b    #70,_enemy1_bitmap+8.L
00002FB8  0803 06E2 
                    4322   ; enemy1_bitmap[9] = 0x3F;
00002FBC  13FC 003F 4323          move.b    #63,_enemy1_bitmap+9.L
00002FC0  0803 06E3 
                    4324   ; enemy1_bitmap[10] = 0xB8;
00002FC4  13FC 00B8 4325          move.b    #184,_enemy1_bitmap+10.L
00002FC8  0803 06E4 
                    4326   ; enemy1_bitmap[11] = 0x7F;
00002FCC  13FC 007F 4327          move.b    #127,_enemy1_bitmap+11.L
00002FD0  0803 06E5 
                    4328   ; enemy1_bitmap[12] = 0xB0;
00002FD4  13FC 00B0 4329          move.b    #176,_enemy1_bitmap+12.L
00002FD8  0803 06E6 
                    4330   ; enemy1_bitmap[13] = 0x7F;
00002FDC  13FC 007F 4331          move.b    #127,_enemy1_bitmap+13.L
00002FE0  0803 06E7 
                    4332   ; enemy1_bitmap[14] = 0xBA;
00002FE4  13FC 00BA 4333          move.b    #186,_enemy1_bitmap+14.L
00002FE8  0803 06E8 
                    4334   ; enemy1_bitmap[15] = 0x7F;
00002FEC  13FC 007F 4335          move.b    #127,_enemy1_bitmap+15.L
00002FF0  0803 06E9 
                    4336   ; enemy1_bitmap[16] = 0xFD;
00002FF4  13FC 00FD 4337          move.b    #253,_enemy1_bitmap+16.L
00002FF8  0803 06EA 
                    4338   ; enemy1_bitmap[17] = 0x3F;
00002FFC  13FC 003F 4339          move.b    #63,_enemy1_bitmap+17.L
00003000  0803 06EB 
                    4340   ; enemy1_bitmap[18] = 0xFC;
00003004  13FC 00FC 4341          move.b    #252,_enemy1_bitmap+18.L
00003008  0803 06EC 
                    4342   ; enemy1_bitmap[19] = 0x07;
0000300C  13FC 0007 4343          move.b    #7,_enemy1_bitmap+19.L
00003010  0803 06ED 
                    4344   ; enemy1_bitmap[20] = 0xFC;
00003014  13FC 00FC 4345          move.b    #252,_enemy1_bitmap+20.L
00003018  0803 06EE 
                    4346   ; enemy1_bitmap[21] = 0x07;
0000301C  13FC 0007 4347          move.b    #7,_enemy1_bitmap+21.L
00003020  0803 06EF 
                    4348   ; enemy1_bitmap[22] = 0xFD;
00003024  13FC 00FD 4349          move.b    #253,_enemy1_bitmap+22.L
00003028  0803 06F0 
                    4350   ; enemy1_bitmap[23] = 0x3F;
0000302C  13FC 003F 4351          move.b    #63,_enemy1_bitmap+23.L
00003030  0803 06F1 
                    4352   ; enemy1_bitmap[24] = 0xBA;
00003034  13FC 00BA 4353          move.b    #186,_enemy1_bitmap+24.L
00003038  0803 06F2 
                    4354   ; enemy1_bitmap[25] = 0x7F;
0000303C  13FC 007F 4355          move.b    #127,_enemy1_bitmap+25.L
00003040  0803 06F3 
                    4356   ; enemy1_bitmap[26] = 0xB0;
00003044  13FC 00B0 4357          move.b    #176,_enemy1_bitmap+26.L
00003048  0803 06F4 
                    4358   ; enemy1_bitmap[27] = 0x7F;
0000304C  13FC 007F 4359          move.b    #127,_enemy1_bitmap+27.L
00003050  0803 06F5 
                    4360   ; enemy1_bitmap[28] = 0xB8;
00003054  13FC 00B8 4361          move.b    #184,_enemy1_bitmap+28.L
00003058  0803 06F6 
                    4362   ; enemy1_bitmap[29] = 0x7F;
0000305C  13FC 007F 4363          move.b    #127,_enemy1_bitmap+29.L
00003060  0803 06F7 
                    4364   ; enemy1_bitmap[30] = 0x46;
00003064  13FC 0046 4365          move.b    #70,_enemy1_bitmap+30.L
00003068  0803 06F8 
                    4366   ; enemy1_bitmap[31] = 0x3F;
0000306C  13FC 003F 4367          move.b    #63,_enemy1_bitmap+31.L
00003070  0803 06F9 
                    4368   ; enemy1_bitmap[32] = 0x04;
00003074  13FC 0004 4369          move.b    #4,_enemy1_bitmap+32.L
00003078  0803 06FA 
                    4370   ; enemy1_bitmap[33] = 0x1E;
0000307C  13FC 001E 4371          move.b    #30,_enemy1_bitmap+33.L
00003080  0803 06FB 
                    4372   ; /* Initialize enemy2_bitmap */
                    4373   ; enemy2_bitmap[0] = 2;
00003084  13FC 0002 4374          move.b    #2,_enemy2_bitmap.L
00003088  0803 06FC 
                    4375   ; enemy2_bitmap[1] = 16;
0000308C  13FC 0010 4376          move.b    #16,_enemy2_bitmap+1.L
00003090  0803 06FD 
                    4377   ; enemy2_bitmap[2] = 0x26;
00003094  13FC 0026 4378          move.b    #38,_enemy2_bitmap+2.L
00003098  0803 06FE 
                    4379   ; enemy2_bitmap[3] = 0x00;
0000309C  4239 0803 4380          clr.b     _enemy2_bitmap+3.L
000030A0  06FF      
                    4381   ; enemy2_bitmap[4] = 0x59;
000030A2  13FC 0059 4382          move.b    #89,_enemy2_bitmap+4.L
000030A6  0803 0700 
                    4383   ; enemy2_bitmap[5] = 0x10;
000030AA  13FC 0010 4384          move.b    #16,_enemy2_bitmap+5.L
000030AE  0803 0701 
                    4385   ; enemy2_bitmap[6] = 0x10;
000030B2  13FC 0010 4386          move.b    #16,_enemy2_bitmap+6.L
000030B6  0803 0702 
                    4387   ; enemy2_bitmap[7] = 0x30;
000030BA  13FC 0030 4388          move.b    #48,_enemy2_bitmap+7.L
000030BE  0803 0703 
                    4389   ; enemy2_bitmap[8] = 0x33;
000030C2  13FC 0033 4390          move.b    #51,_enemy2_bitmap+8.L
000030C6  0803 0704 
                    4391   ; enemy2_bitmap[9] = 0x18;
000030CA  13FC 0018 4392          move.b    #24,_enemy2_bitmap+9.L
000030CE  0803 0705 
                    4393   ; enemy2_bitmap[10] = 0xE6;
000030D2  13FC 00E6 4394          move.b    #230,_enemy2_bitmap+10.L
000030D6  0803 0706 
                    4395   ; enemy2_bitmap[11] = 0x61;
000030DA  13FC 0061 4396          move.b    #97,_enemy2_bitmap+11.L
000030DE  0803 0707 
                    4397   ; enemy2_bitmap[12] = 0xC4;
000030E2  13FC 00C4 4398          move.b    #196,_enemy2_bitmap+12.L
000030E6  0803 0708 
                    4399   ; enemy2_bitmap[13] = 0x56;
000030EA  13FC 0056 4400          move.b    #86,_enemy2_bitmap+13.L
000030EE  0803 0709 
                    4401   ; enemy2_bitmap[14] = 0x03;
000030F2  13FC 0003 4402          move.b    #3,_enemy2_bitmap+14.L
000030F6  0803 070A 
                    4403   ; enemy2_bitmap[15] = 0x03;
000030FA  13FC 0003 4404          move.b    #3,_enemy2_bitmap+15.L
000030FE  0803 070B 
                    4405   ; enemy2_bitmap[16] = 0xDC;
00003102  13FC 00DC 4406          move.b    #220,_enemy2_bitmap+16.L
00003106  0803 070C 
                    4407   ; enemy2_bitmap[17] = 0x03;
0000310A  13FC 0003 4408          move.b    #3,_enemy2_bitmap+17.L
0000310E  0803 070D 
                    4409   ; enemy2_bitmap[18] = 0xDC;
00003112  13FC 00DC 4410          move.b    #220,_enemy2_bitmap+18.L
00003116  0803 070E 
                    4411   ; enemy2_bitmap[19] = 0x03;
0000311A  13FC 0003 4412          move.b    #3,_enemy2_bitmap+19.L
0000311E  0803 070F 
                    4413   ; enemy2_bitmap[20] = 0x03;
00003122  13FC 0003 4414          move.b    #3,_enemy2_bitmap+20.L
00003126  0803 0710 
                    4415   ; enemy2_bitmap[21] = 0x03;
0000312A  13FC 0003 4416          move.b    #3,_enemy2_bitmap+21.L
0000312E  0803 0711 
                    4417   ; enemy2_bitmap[22] = 0xC4;
00003132  13FC 00C4 4418          move.b    #196,_enemy2_bitmap+22.L
00003136  0803 0712 
                    4419   ; enemy2_bitmap[23] = 0x56;
0000313A  13FC 0056 4420          move.b    #86,_enemy2_bitmap+23.L
0000313E  0803 0713 
                    4421   ; enemy2_bitmap[24] = 0xE6;
00003142  13FC 00E6 4422          move.b    #230,_enemy2_bitmap+24.L
00003146  0803 0714 
                    4423   ; enemy2_bitmap[25] = 0x61;
0000314A  13FC 0061 4424          move.b    #97,_enemy2_bitmap+25.L
0000314E  0803 0715 
                    4425   ; enemy2_bitmap[26] = 0x33;
00003152  13FC 0033 4426          move.b    #51,_enemy2_bitmap+26.L
00003156  0803 0716 
                    4427   ; enemy2_bitmap[27] = 0x18;
0000315A  13FC 0018 4428          move.b    #24,_enemy2_bitmap+27.L
0000315E  0803 0717 
                    4429   ; enemy2_bitmap[28] = 0x10;
00003162  13FC 0010 4430          move.b    #16,_enemy2_bitmap+28.L
00003166  0803 0718 
                    4431   ; enemy2_bitmap[29] = 0x30;
0000316A  13FC 0030 4432          move.b    #48,_enemy2_bitmap+29.L
0000316E  0803 0719 
                    4433   ; enemy2_bitmap[30] = 0x59;
00003172  13FC 0059 4434          move.b    #89,_enemy2_bitmap+30.L
00003176  0803 071A 
                    4435   ; enemy2_bitmap[31] = 0x10;
0000317A  13FC 0010 4436          move.b    #16,_enemy2_bitmap+31.L
0000317E  0803 071B 
                    4437   ; enemy2_bitmap[32] = 0x26;
00003182  13FC 0026 4438          move.b    #38,_enemy2_bitmap+32.L
00003186  0803 071C 
                    4439   ; enemy2_bitmap[33] = 0x00;
0000318A  4239 0803 4440          clr.b     _enemy2_bitmap+33.L
0000318E  071D      
                    4441   ; /* Initialize enemy3_bitmap */
                    4442   ; enemy3_bitmap[0] = 2;
00003190  1ABC 0002 4443          move.b    #2,(A5)
                    4444   ; enemy3_bitmap[1] = 16;
00003194  1B7C 0010 4445          move.b    #16,1(A5)
00003198  0001      
                    4446   ; enemy3_bitmap[2] = 0x80;
0000319A  1B7C 0080 4447          move.b    #128,2(A5)
0000319E  0002      
                    4448   ; enemy3_bitmap[3] = 0x1F;
000031A0  1B7C 001F 4449          move.b    #31,3(A5)
000031A4  0003      
                    4450   ; enemy3_bitmap[4] = 0xC0;
000031A6  1B7C 00C0 4451          move.b    #192,4(A5)
000031AA  0004      
                    4452   ; enemy3_bitmap[5] = 0x03;
000031AC  1B7C 0003 4453          move.b    #3,5(A5)
000031B0  0005      
                    4454   ; enemy3_bitmap[6] = 0xF8;
000031B2  1B7C 00F8 4455          move.b    #248,6(A5)
000031B6  0006      
                    4456   ; enemy3_bitmap[7] = 0x3F;
000031B8  1B7C 003F 4457          move.b    #63,7(A5)
000031BC  0007      
                    4458   ; enemy3_bitmap[8] = 0x70;
000031BE  1B7C 0070 4459          move.b    #112,8(A5)
000031C2  0008      
                    4460   ; enemy3_bitmap[9] = 0x00;
000031C4  422D 0009 4461          clr.b     9(A5)
                    4462   ; enemy3_bitmap[10] = 0xF0;
000031C8  1B7C 00F0 4463          move.b    #240,10(A5)
000031CC  000A      
                    4464   ; enemy3_bitmap[11] = 0x01;
000031CE  1B7C 0001 4465          move.b    #1,11(A5)
000031D2  000B      
                    4466   ; enemy3_bitmap[12] = 0xFC;
000031D4  1B7C 00FC 4467          move.b    #252,12(A5)
000031D8  000C      
                    4468   ; enemy3_bitmap[13] = 0x07;
000031DA  1B7C 0007 4469          move.b    #7,13(A5)
000031DE  000D      
                    4470   ; enemy3_bitmap[14] = 0xE8;
000031E0  1B7C 00E8 4471          move.b    #232,14(A5)
000031E4  000E      
                    4472   ; enemy3_bitmap[15] = 0x01;
000031E6  1B7C 0001 4473          move.b    #1,15(A5)
000031EA  000F      
                    4474   ; enemy3_bitmap[16] = 0xF8;
000031EC  1B7C 00F8 4475          move.b    #248,16(A5)
000031F0  0010      
                    4476   ; enemy3_bitmap[17] = 0x03;
000031F2  1B7C 0003 4477          move.b    #3,17(A5)
000031F6  0011      
                    4478   ; enemy3_bitmap[18] = 0xF8;
000031F8  1B7C 00F8 4479          move.b    #248,18(A5)
000031FC  0012      
                    4480   ; enemy3_bitmap[19] = 0x03;
000031FE  1B7C 0003 4481          move.b    #3,19(A5)
00003202  0013      
                    4482   ; enemy3_bitmap[20] = 0xE8;
00003204  1B7C 00E8 4483          move.b    #232,20(A5)
00003208  0014      
                    4484   ; enemy3_bitmap[21] = 0x01;
0000320A  1B7C 0001 4485          move.b    #1,21(A5)
0000320E  0015      
                    4486   ; enemy3_bitmap[22] = 0xF8;
00003210  1B7C 00F8 4487          move.b    #248,22(A5)
00003214  0016      
                    4488   ; enemy3_bitmap[23] = 0x07;
00003216  1B7C 0007 4489          move.b    #7,23(A5)
0000321A  0017      
                    4490   ; enemy3_bitmap[24] = 0xF0;
0000321C  1B7C 00F0 4491          move.b    #240,24(A5)
00003220  0018      
                    4492   ; enemy3_bitmap[25] = 0x01;
00003222  1B7C 0001 4493          move.b    #1,25(A5)
00003226  0019      
                    4494   ; enemy3_bitmap[26] = 0x70;
00003228  1B7C 0070 4495          move.b    #112,26(A5)
0000322C  001A      
                    4496   ; enemy3_bitmap[27] = 0x00;
0000322E  422D 001B 4497          clr.b     27(A5)
                    4498   ; enemy3_bitmap[28] = 0xF8;
00003232  1B7C 00F8 4499          move.b    #248,28(A5)
00003236  001C      
                    4500   ; enemy3_bitmap[29] = 0x3F;
00003238  1B7C 003F 4501          move.b    #63,29(A5)
0000323C  001D      
                    4502   ; enemy3_bitmap[30] = 0xC0;
0000323E  1B7C 00C0 4503          move.b    #192,30(A5)
00003242  001E      
                    4504   ; enemy3_bitmap[31] = 0x03;
00003244  1B7C 0003 4505          move.b    #3,31(A5)
00003248  001F      
                    4506   ; enemy3_bitmap[32] = 0x80;
0000324A  1B7C 0080 4507          move.b    #128,32(A5)
0000324E  0020      
                    4508   ; enemy3_bitmap[33] = 0x1F;
00003250  1B7C 001F 4509          move.b    #31,33(A5)
00003254  0021      
                    4510   ; /* Initialize enemy4_bitmap */
                    4511   ; enemy4_bitmap[0] = 2;
00003256  18BC 0002 4512          move.b    #2,(A4)
                    4513   ; enemy4_bitmap[1] = 16;
0000325A  197C 0010 4514          move.b    #16,1(A4)
0000325E  0001      
                    4515   ; enemy4_bitmap[2] = 0x06;
00003260  197C 0006 4516          move.b    #6,2(A4)
00003264  0002      
                    4517   ; enemy4_bitmap[3] = 0x00;
00003266  422C 0003 4518          clr.b     3(A4)
                    4519   ; enemy4_bitmap[4] = 0x0C;
0000326A  197C 000C 4520          move.b    #12,4(A4)
0000326E  0004      
                    4521   ; enemy4_bitmap[5] = 0x00;
00003270  422C 0005 4522          clr.b     5(A4)
                    4523   ; enemy4_bitmap[6] = 0x28;
00003274  197C 0028 4524          move.b    #40,6(A4)
00003278  0006      
                    4525   ; enemy4_bitmap[7] = 0x00;
0000327A  422C 0007 4526          clr.b     7(A4)
                    4527   ; enemy4_bitmap[8] = 0x70;
0000327E  197C 0070 4528          move.b    #112,8(A4)
00003282  0008      
                    4529   ; enemy4_bitmap[9] = 0x1F;
00003284  197C 001F 4530          move.b    #31,9(A4)
00003288  0009      
                    4531   ; enemy4_bitmap[10] = 0x84;
0000328A  197C 0084 4532          move.b    #132,10(A4)
0000328E  000A      
                    4533   ; enemy4_bitmap[11] = 0x3F;
00003290  197C 003F 4534          move.b    #63,11(A4)
00003294  000B      
                    4535   ; enemy4_bitmap[12] = 0xDE;
00003296  197C 00DE 4536          move.b    #222,12(A4)
0000329A  000C      
                    4537   ; enemy4_bitmap[13] = 0x37;
0000329C  197C 0037 4538          move.b    #55,13(A4)
000032A0  000D      
                    4539   ; enemy4_bitmap[14] = 0xBB;
000032A2  197C 00BB 4540          move.b    #187,14(A4)
000032A6  000E      
                    4541   ; enemy4_bitmap[15] = 0x3F;
000032A8  197C 003F 4542          move.b    #63,15(A4)
000032AC  000F      
                    4543   ; enemy4_bitmap[16] = 0xF0;
000032AE  197C 00F0 4544          move.b    #240,16(A4)
000032B2  0010      
                    4545   ; enemy4_bitmap[17] = 0x3F;
000032B4  197C 003F 4546          move.b    #63,17(A4)
000032B8  0011      
                    4547   ; enemy4_bitmap[18] = 0xF0;
000032BA  197C 00F0 4548          move.b    #240,18(A4)
000032BE  0012      
                    4549   ; enemy4_bitmap[19] = 0x3F;
000032C0  197C 003F 4550          move.b    #63,19(A4)
000032C4  0013      
                    4551   ; enemy4_bitmap[20] = 0xBB;
000032C6  197C 00BB 4552          move.b    #187,20(A4)
000032CA  0014      
                    4553   ; enemy4_bitmap[21] = 0x3F;
000032CC  197C 003F 4554          move.b    #63,21(A4)
000032D0  0015      
                    4555   ; enemy4_bitmap[22] = 0xDE;
000032D2  197C 00DE 4556          move.b    #222,22(A4)
000032D6  0016      
                    4557   ; enemy4_bitmap[23] = 0x37;
000032D8  197C 0037 4558          move.b    #55,23(A4)
000032DC  0017      
                    4559   ; enemy4_bitmap[24] = 0x84;
000032DE  197C 0084 4560          move.b    #132,24(A4)
000032E2  0018      
                    4561   ; enemy4_bitmap[25] = 0x3F;
000032E4  197C 003F 4562          move.b    #63,25(A4)
000032E8  0019      
                    4563   ; enemy4_bitmap[26] = 0x70;
000032EA  197C 0070 4564          move.b    #112,26(A4)
000032EE  001A      
                    4565   ; enemy4_bitmap[27] = 0x1F;
000032F0  197C 001F 4566          move.b    #31,27(A4)
000032F4  001B      
                    4567   ; enemy4_bitmap[28] = 0x28;
000032F6  197C 0028 4568          move.b    #40,28(A4)
000032FA  001C      
                    4569   ; enemy4_bitmap[29] = 0x00;
000032FC  422C 001D 4570          clr.b     29(A4)
                    4571   ; enemy4_bitmap[30] = 0x0C;
00003300  197C 000C 4572          move.b    #12,30(A4)
00003304  001E      
                    4573   ; enemy4_bitmap[31] = 0x00;
00003306  422C 001F 4574          clr.b     31(A4)
                    4575   ; enemy4_bitmap[32] = 0x06;
0000330A  197C 0006 4576          move.b    #6,32(A4)
0000330E  0020      
                    4577   ; enemy4_bitmap[33] = 0x00;
00003310  422C 0021 4578          clr.b     33(A4)
                    4579   ; enemy_bitmaps[0] = enemy1_bitmap;
00003314  41F9 0803 4580          lea       _enemy1_bitmap.L,A0
00003318  06DA      
0000331A  23C8 0803 4581          move.l    A0,_enemy_bitmaps.L
0000331E  0762      
                    4582   ; enemy_bitmaps[1] = enemy2_bitmap;
00003320  41F9 0803 4583          lea       _enemy2_bitmap.L,A0
00003324  06FC      
00003326  23C8 0803 4584          move.l    A0,_enemy_bitmaps+4.L
0000332A  0766      
                    4585   ; enemy_bitmaps[2] = enemy3_bitmap;
0000332C  23CD 0803 4586          move.l    A5,_enemy_bitmaps+8.L
00003330  076A      
                    4587   ; enemy_bitmaps[3] = enemy4_bitmap;
00003332  23CC 0803 4588          move.l    A4,_enemy_bitmaps+12.L
00003336  076E      
                    4589   ; font8x8[0 ][0]=0x00;font8x8[0 ][1]=0x00;font8x8[0 ][2]=0x00;font8x8[0 ][3]=0x00;font8x8[0 ][4]=0x00;font8x8[0 ][5]=0x00;font8x8[0 ][6]=0x00;font8x8[0 ][7]=0x00;
00003338  4212      4590          clr.b     (A2)
0000333A  422A 0001 4591          clr.b     1(A2)
0000333E  422A 0002 4592          clr.b     2(A2)
00003342  422A 0003 4593          clr.b     3(A2)
00003346  422A 0004 4594          clr.b     4(A2)
0000334A  422A 0005 4595          clr.b     5(A2)
0000334E  422A 0006 4596          clr.b     6(A2)
00003352  422A 0007 4597          clr.b     7(A2)
                    4598   ; font8x8[1 ][0]=0x00;font8x8[1 ][1]=0x00;font8x8[1 ][2]=0x00;font8x8[1 ][3]=0x79;font8x8[1 ][4]=0x79;font8x8[1 ][5]=0x00;font8x8[1 ][6]=0x00;font8x8[1 ][7]=0x00;
00003356  422A 0008 4599          clr.b     8(A2)
0000335A  422A 0009 4600          clr.b     8+1(A2)
0000335E  422A 000A 4601          clr.b     8+2(A2)
00003362  157C 0079 4602          move.b    #121,8+3(A2)
00003366  000B      
00003368  157C 0079 4603          move.b    #121,8+4(A2)
0000336C  000C      
0000336E  422A 000D 4604          clr.b     8+5(A2)
00003372  422A 000E 4605          clr.b     8+6(A2)
00003376  422A 000F 4606          clr.b     8+7(A2)
                    4607   ; font8x8[2 ][0]=0x00;font8x8[2 ][1]=0x70;font8x8[2 ][2]=0x70;font8x8[2 ][3]=0x00;font8x8[2 ][4]=0x00;font8x8[2 ][5]=0x70;font8x8[2 ][6]=0x70;font8x8[2 ][7]=0x00; 
0000337A  422A 0010 4608          clr.b     16(A2)
0000337E  157C 0070 4609          move.b    #112,16+1(A2)
00003382  0011      
00003384  157C 0070 4610          move.b    #112,16+2(A2)
00003388  0012      
0000338A  422A 0013 4611          clr.b     16+3(A2)
0000338E  422A 0014 4612          clr.b     16+4(A2)
00003392  157C 0070 4613          move.b    #112,16+5(A2)
00003396  0015      
00003398  157C 0070 4614          move.b    #112,16+6(A2)
0000339C  0016      
0000339E  422A 0017 4615          clr.b     16+7(A2)
                    4616   ; font8x8[3 ][0]=0x14;font8x8[3 ][1]=0x7f;font8x8[3 ][2]=0x7f;font8x8[3 ][3]=0x14;font8x8[3 ][4]=0x14;font8x8[3 ][5]=0x7f;font8x8[3 ][6]=0x7f;font8x8[3 ][7]=0x14; 
000033A2  157C 0014 4617          move.b    #20,24(A2)
000033A6  0018      
000033A8  157C 007F 4618          move.b    #127,24+1(A2)
000033AC  0019      
000033AE  157C 007F 4619          move.b    #127,24+2(A2)
000033B2  001A      
000033B4  157C 0014 4620          move.b    #20,24+3(A2)
000033B8  001B      
000033BA  157C 0014 4621          move.b    #20,24+4(A2)
000033BE  001C      
000033C0  157C 007F 4622          move.b    #127,24+5(A2)
000033C4  001D      
000033C6  157C 007F 4623          move.b    #127,24+6(A2)
000033CA  001E      
000033CC  157C 0014 4624          move.b    #20,24+7(A2)
000033D0  001F      
                    4625   ; font8x8[4 ][0]=0x00;font8x8[4 ][1]=0x12;font8x8[4 ][2]=0x3a;font8x8[4 ][3]=0x6b;font8x8[4 ][4]=0x6b;font8x8[4 ][5]=0x2e;font8x8[4 ][6]=0x24;font8x8[4 ][7]=0x00;
000033D2  422A 0020 4626          clr.b     32(A2)
000033D6  157C 0012 4627          move.b    #18,32+1(A2)
000033DA  0021      
000033DC  157C 003A 4628          move.b    #58,32+2(A2)
000033E0  0022      
000033E2  157C 006B 4629          move.b    #107,32+3(A2)
000033E6  0023      
000033E8  157C 006B 4630          move.b    #107,32+4(A2)
000033EC  0024      
000033EE  157C 002E 4631          move.b    #46,32+5(A2)
000033F2  0025      
000033F4  157C 0024 4632          move.b    #36,32+6(A2)
000033F8  0026      
000033FA  422A 0027 4633          clr.b     32+7(A2)
                    4634   ; font8x8[5 ][0]=0x00;font8x8[5 ][1]=0x63;font8x8[5 ][2]=0x66;font8x8[5 ][3]=0x0c;font8x8[5 ][4]=0x18;font8x8[5 ][5]=0x33;font8x8[5 ][6]=0x63;font8x8[5 ][7]=0x00; 
000033FE  422A 0028 4635          clr.b     40(A2)
00003402  157C 0063 4636          move.b    #99,40+1(A2)
00003406  0029      
00003408  157C 0066 4637          move.b    #102,40+2(A2)
0000340C  002A      
0000340E  157C 000C 4638          move.b    #12,40+3(A2)
00003412  002B      
00003414  157C 0018 4639          move.b    #24,40+4(A2)
00003418  002C      
0000341A  157C 0033 4640          move.b    #51,40+5(A2)
0000341E  002D      
00003420  157C 0063 4641          move.b    #99,40+6(A2)
00003424  002E      
00003426  422A 002F 4642          clr.b     40+7(A2)
                    4643   ; font8x8[6 ][0]=0x00;font8x8[6 ][1]=0x26;font8x8[6 ][2]=0x7f;font8x8[6 ][3]=0x59;font8x8[6 ][4]=0x59;font8x8[6 ][5]=0x77;font8x8[6 ][6]=0x27;font8x8[6 ][7]=0x05; 
0000342A  422A 0030 4644          clr.b     48(A2)
0000342E  157C 0026 4645          move.b    #38,48+1(A2)
00003432  0031      
00003434  157C 007F 4646          move.b    #127,48+2(A2)
00003438  0032      
0000343A  157C 0059 4647          move.b    #89,48+3(A2)
0000343E  0033      
00003440  157C 0059 4648          move.b    #89,48+4(A2)
00003444  0034      
00003446  157C 0077 4649          move.b    #119,48+5(A2)
0000344A  0035      
0000344C  157C 0027 4650          move.b    #39,48+6(A2)
00003450  0036      
00003452  157C 0005 4651          move.b    #5,48+7(A2)
00003456  0037      
                    4652   ; font8x8[7 ][0]=0x00;font8x8[7 ][1]=0x00;font8x8[7 ][2]=0x00;font8x8[7 ][3]=0x10;font8x8[7 ][4]=0x30;font8x8[7 ][5]=0x60;font8x8[7 ][6]=0x40;font8x8[7 ][7]=0x00; 
00003458  422A 0038 4653          clr.b     56(A2)
0000345C  422A 0039 4654          clr.b     56+1(A2)
00003460  422A 003A 4655          clr.b     56+2(A2)
00003464  157C 0010 4656          move.b    #16,56+3(A2)
00003468  003B      
0000346A  157C 0030 4657          move.b    #48,56+4(A2)
0000346E  003C      
00003470  157C 0060 4658          move.b    #96,56+5(A2)
00003474  003D      
00003476  157C 0040 4659          move.b    #64,56+6(A2)
0000347A  003E      
0000347C  422A 003F 4660          clr.b     56+7(A2)
                    4661   ; font8x8[8 ][0]=0x00;font8x8[8 ][1]=0x00;font8x8[8 ][2]=0x1c;font8x8[8 ][3]=0x3e;font8x8[8 ][4]=0x63;font8x8[8 ][5]=0x41;font8x8[8 ][6]=0x00;font8x8[8 ][7]=0x00; 
00003480  422A 0040 4662          clr.b     64(A2)
00003484  422A 0041 4663          clr.b     64+1(A2)
00003488  157C 001C 4664          move.b    #28,64+2(A2)
0000348C  0042      
0000348E  157C 003E 4665          move.b    #62,64+3(A2)
00003492  0043      
00003494  157C 0063 4666          move.b    #99,64+4(A2)
00003498  0044      
0000349A  157C 0041 4667          move.b    #65,64+5(A2)
0000349E  0045      
000034A0  422A 0046 4668          clr.b     64+6(A2)
000034A4  422A 0047 4669          clr.b     64+7(A2)
                    4670   ; font8x8[9 ][0]=0x00;font8x8[9 ][1]=0x00;font8x8[9 ][2]=0x41;font8x8[9 ][3]=0x63;font8x8[9 ][4]=0x3e;font8x8[9 ][5]=0x1c;font8x8[9 ][6]=0x00;font8x8[9 ][7]=0x00; 
000034A8  422A 0048 4671          clr.b     72(A2)
000034AC  422A 0049 4672          clr.b     72+1(A2)
000034B0  157C 0041 4673          move.b    #65,72+2(A2)
000034B4  004A      
000034B6  157C 0063 4674          move.b    #99,72+3(A2)
000034BA  004B      
000034BC  157C 003E 4675          move.b    #62,72+4(A2)
000034C0  004C      
000034C2  157C 001C 4676          move.b    #28,72+5(A2)
000034C6  004D      
000034C8  422A 004E 4677          clr.b     72+6(A2)
000034CC  422A 004F 4678          clr.b     72+7(A2)
                    4679   ; font8x8[10][0]=0x08;font8x8[10][1]=0x2a;font8x8[10][2]=0x3e;font8x8[10][3]=0x1c;font8x8[10][4]=0x1c;font8x8[10][5]=0x3e;font8x8[10][6]=0x2a;font8x8[10][7]=0x08; 
000034D0  157C 0008 4680          move.b    #8,80(A2)
000034D4  0050      
000034D6  157C 002A 4681          move.b    #42,80+1(A2)
000034DA  0051      
000034DC  157C 003E 4682          move.b    #62,80+2(A2)
000034E0  0052      
000034E2  157C 001C 4683          move.b    #28,80+3(A2)
000034E6  0053      
000034E8  157C 001C 4684          move.b    #28,80+4(A2)
000034EC  0054      
000034EE  157C 003E 4685          move.b    #62,80+5(A2)
000034F2  0055      
000034F4  157C 002A 4686          move.b    #42,80+6(A2)
000034F8  0056      
000034FA  157C 0008 4687          move.b    #8,80+7(A2)
000034FE  0057      
                    4688   ; font8x8[11][0]=0x00;font8x8[11][1]=0x08;font8x8[11][2]=0x08;font8x8[11][3]=0x3e;font8x8[11][4]=0x3e;font8x8[11][5]=0x08;font8x8[11][6]=0x08;font8x8[11][7]=0x00; 
00003500  422A 0058 4689          clr.b     88(A2)
00003504  157C 0008 4690          move.b    #8,88+1(A2)
00003508  0059      
0000350A  157C 0008 4691          move.b    #8,88+2(A2)
0000350E  005A      
00003510  157C 003E 4692          move.b    #62,88+3(A2)
00003514  005B      
00003516  157C 003E 4693          move.b    #62,88+4(A2)
0000351A  005C      
0000351C  157C 0008 4694          move.b    #8,88+5(A2)
00003520  005D      
00003522  157C 0008 4695          move.b    #8,88+6(A2)
00003526  005E      
00003528  422A 005F 4696          clr.b     88+7(A2)
                    4697   ; font8x8[12][0]=0x00;font8x8[12][1]=0x00;font8x8[12][2]=0x00;font8x8[12][3]=0x03;font8x8[12][4]=0x03;font8x8[12][5]=0x00;font8x8[12][6]=0x00;font8x8[12][7]=0x00; 
0000352C  422A 0060 4698          clr.b     96(A2)
00003530  422A 0061 4699          clr.b     96+1(A2)
00003534  422A 0062 4700          clr.b     96+2(A2)
00003538  157C 0003 4701          move.b    #3,96+3(A2)
0000353C  0063      
0000353E  157C 0003 4702          move.b    #3,96+4(A2)
00003542  0064      
00003544  422A 0065 4703          clr.b     96+5(A2)
00003548  422A 0066 4704          clr.b     96+6(A2)
0000354C  422A 0067 4705          clr.b     96+7(A2)
                    4706   ; font8x8[13][0]=0x00;font8x8[13][1]=0x08;font8x8[13][2]=0x08;font8x8[13][3]=0x08;font8x8[13][4]=0x08;font8x8[13][5]=0x08;font8x8[13][6]=0x08;font8x8[13][7]=0x00; 
00003550  422A 0068 4707          clr.b     104(A2)
00003554  157C 0008 4708          move.b    #8,104+1(A2)
00003558  0069      
0000355A  157C 0008 4709          move.b    #8,104+2(A2)
0000355E  006A      
00003560  157C 0008 4710          move.b    #8,104+3(A2)
00003564  006B      
00003566  157C 0008 4711          move.b    #8,104+4(A2)
0000356A  006C      
0000356C  157C 0008 4712          move.b    #8,104+5(A2)
00003570  006D      
00003572  157C 0008 4713          move.b    #8,104+6(A2)
00003576  006E      
00003578  422A 006F 4714          clr.b     104+7(A2)
                    4715   ; font8x8[14][0]=0x00;font8x8[14][1]=0x00;font8x8[14][2]=0x00;font8x8[14][3]=0x03;font8x8[14][4]=0x03;font8x8[14][5]=0x00;font8x8[14][6]=0x00;font8x8[14][7]=0x00; 
0000357C  422A 0070 4716          clr.b     112(A2)
00003580  422A 0071 4717          clr.b     112+1(A2)
00003584  422A 0072 4718          clr.b     112+2(A2)
00003588  157C 0003 4719          move.b    #3,112+3(A2)
0000358C  0073      
0000358E  157C 0003 4720          move.b    #3,112+4(A2)
00003592  0074      
00003594  422A 0075 4721          clr.b     112+5(A2)
00003598  422A 0076 4722          clr.b     112+6(A2)
0000359C  422A 0077 4723          clr.b     112+7(A2)
                    4724   ; font8x8[15][0]=0x00;font8x8[15][1]=0x01;font8x8[15][2]=0x03;font8x8[15][3]=0x06;font8x8[15][4]=0x0c;font8x8[15][5]=0x18;font8x8[15][6]=0x30;font8x8[15][7]=0x20; 
000035A0  422A 0078 4725          clr.b     120(A2)
000035A4  157C 0001 4726          move.b    #1,120+1(A2)
000035A8  0079      
000035AA  157C 0003 4727          move.b    #3,120+2(A2)
000035AE  007A      
000035B0  157C 0006 4728          move.b    #6,120+3(A2)
000035B4  007B      
000035B6  157C 000C 4729          move.b    #12,120+4(A2)
000035BA  007C      
000035BC  157C 0018 4730          move.b    #24,120+5(A2)
000035C0  007D      
000035C2  157C 0030 4731          move.b    #48,120+6(A2)
000035C6  007E      
000035C8  157C 0020 4732          move.b    #32,120+7(A2)
000035CC  007F      
                    4733   ; font8x8[16][0]=0x00;font8x8[16][1]=0x3e;font8x8[16][2]=0x7f;font8x8[16][3]=0x49;font8x8[16][4]=0x51;font8x8[16][5]=0x7f;font8x8[16][6]=0x3e;font8x8[16][7]=0x00; 
000035CE  422A 0080 4734          clr.b     128(A2)
000035D2  157C 003E 4735          move.b    #62,128+1(A2)
000035D6  0081      
000035D8  157C 007F 4736          move.b    #127,128+2(A2)
000035DC  0082      
000035DE  157C 0049 4737          move.b    #73,128+3(A2)
000035E2  0083      
000035E4  157C 0051 4738          move.b    #81,128+4(A2)
000035E8  0084      
000035EA  157C 007F 4739          move.b    #127,128+5(A2)
000035EE  0085      
000035F0  157C 003E 4740          move.b    #62,128+6(A2)
000035F4  0086      
000035F6  422A 0087 4741          clr.b     128+7(A2)
                    4742   ; font8x8[17][0]=0x00;font8x8[17][1]=0x01;font8x8[17][2]=0x11;font8x8[17][3]=0x7f;font8x8[17][4]=0x7f;font8x8[17][5]=0x01;font8x8[17][6]=0x01;font8x8[17][7]=0x00; 
000035FA  422A 0088 4743          clr.b     136(A2)
000035FE  157C 0001 4744          move.b    #1,136+1(A2)
00003602  0089      
00003604  157C 0011 4745          move.b    #17,136+2(A2)
00003608  008A      
0000360A  157C 007F 4746          move.b    #127,136+3(A2)
0000360E  008B      
00003610  157C 007F 4747          move.b    #127,136+4(A2)
00003614  008C      
00003616  157C 0001 4748          move.b    #1,136+5(A2)
0000361A  008D      
0000361C  157C 0001 4749          move.b    #1,136+6(A2)
00003620  008E      
00003622  422A 008F 4750          clr.b     136+7(A2)
                    4751   ; font8x8[18][0]=0x00;font8x8[18][1]=0x23;font8x8[18][2]=0x67;font8x8[18][3]=0x45;font8x8[18][4]=0x49;font8x8[18][5]=0x79;font8x8[18][6]=0x31;font8x8[18][7]=0x00; 
00003626  422A 0090 4752          clr.b     144(A2)
0000362A  157C 0023 4753          move.b    #35,144+1(A2)
0000362E  0091      
00003630  157C 0067 4754          move.b    #103,144+2(A2)
00003634  0092      
00003636  157C 0045 4755          move.b    #69,144+3(A2)
0000363A  0093      
0000363C  157C 0049 4756          move.b    #73,144+4(A2)
00003640  0094      
00003642  157C 0079 4757          move.b    #121,144+5(A2)
00003646  0095      
00003648  157C 0031 4758          move.b    #49,144+6(A2)
0000364C  0096      
0000364E  422A 0097 4759          clr.b     144+7(A2)
                    4760   ; font8x8[19][0]=0x00;font8x8[19][1]=0x22;font8x8[19][2]=0x63;font8x8[19][3]=0x49;font8x8[19][4]=0x49;font8x8[19][5]=0x7f;font8x8[19][6]=0x36;font8x8[19][7]=0x00; 
00003652  422A 0098 4761          clr.b     152(A2)
00003656  157C 0022 4762          move.b    #34,152+1(A2)
0000365A  0099      
0000365C  157C 0063 4763          move.b    #99,152+2(A2)
00003660  009A      
00003662  157C 0049 4764          move.b    #73,152+3(A2)
00003666  009B      
00003668  157C 0049 4765          move.b    #73,152+4(A2)
0000366C  009C      
0000366E  157C 007F 4766          move.b    #127,152+5(A2)
00003672  009D      
00003674  157C 0036 4767          move.b    #54,152+6(A2)
00003678  009E      
0000367A  422A 009F 4768          clr.b     152+7(A2)
                    4769   ; font8x8[20][0]=0x00;font8x8[20][1]=0x0c;font8x8[20][2]=0x0c;font8x8[20][3]=0x14;font8x8[20][4]=0x34;font8x8[20][5]=0x7f;font8x8[20][6]=0x7f;font8x8[20][7]=0x04; 
0000367E  422A 00A0 4770          clr.b     160(A2)
00003682  157C 000C 4771          move.b    #12,160+1(A2)
00003686  00A1      
00003688  157C 000C 4772          move.b    #12,160+2(A2)
0000368C  00A2      
0000368E  157C 0014 4773          move.b    #20,160+3(A2)
00003692  00A3      
00003694  157C 0034 4774          move.b    #52,160+4(A2)
00003698  00A4      
0000369A  157C 007F 4775          move.b    #127,160+5(A2)
0000369E  00A5      
000036A0  157C 007F 4776          move.b    #127,160+6(A2)
000036A4  00A6      
000036A6  157C 0004 4777          move.b    #4,160+7(A2)
000036AA  00A7      
                    4778   ; font8x8[21][0]=0x00;font8x8[21][1]=0x72;font8x8[21][2]=0x73;font8x8[21][3]=0x51;font8x8[21][4]=0x51;font8x8[21][5]=0x5f;font8x8[21][6]=0x4e;font8x8[21][7]=0x00; 
000036AC  422A 00A8 4779          clr.b     168(A2)
000036B0  157C 0072 4780          move.b    #114,168+1(A2)
000036B4  00A9      
000036B6  157C 0073 4781          move.b    #115,168+2(A2)
000036BA  00AA      
000036BC  157C 0051 4782          move.b    #81,168+3(A2)
000036C0  00AB      
000036C2  157C 0051 4783          move.b    #81,168+4(A2)
000036C6  00AC      
000036C8  157C 005F 4784          move.b    #95,168+5(A2)
000036CC  00AD      
000036CE  157C 004E 4785          move.b    #78,168+6(A2)
000036D2  00AE      
000036D4  422A 00AF 4786          clr.b     168+7(A2)
                    4787   ; font8x8[22][0]=0x00;font8x8[22][1]=0x3e;font8x8[22][2]=0x7f;font8x8[22][3]=0x49;font8x8[22][4]=0x49;font8x8[22][5]=0x6f;font8x8[22][6]=0x26;font8x8[22][7]=0x00; 
000036D8  422A 00B0 4788          clr.b     176(A2)
000036DC  157C 003E 4789          move.b    #62,176+1(A2)
000036E0  00B1      
000036E2  157C 007F 4790          move.b    #127,176+2(A2)
000036E6  00B2      
000036E8  157C 0049 4791          move.b    #73,176+3(A2)
000036EC  00B3      
000036EE  157C 0049 4792          move.b    #73,176+4(A2)
000036F2  00B4      
000036F4  157C 006F 4793          move.b    #111,176+5(A2)
000036F8  00B5      
000036FA  157C 0026 4794          move.b    #38,176+6(A2)
000036FE  00B6      
00003700  422A 00B7 4795          clr.b     176+7(A2)
                    4796   ; font8x8[23][0]=0x00;font8x8[23][1]=0x60;font8x8[23][2]=0x60;font8x8[23][3]=0x4f;font8x8[23][4]=0x5f;font8x8[23][5]=0x70;font8x8[23][6]=0x60;font8x8[23][7]=0x00; 
00003704  422A 00B8 4797          clr.b     184(A2)
00003708  157C 0060 4798          move.b    #96,184+1(A2)
0000370C  00B9      
0000370E  157C 0060 4799          move.b    #96,184+2(A2)
00003712  00BA      
00003714  157C 004F 4800          move.b    #79,184+3(A2)
00003718  00BB      
0000371A  157C 005F 4801          move.b    #95,184+4(A2)
0000371E  00BC      
00003720  157C 0070 4802          move.b    #112,184+5(A2)
00003724  00BD      
00003726  157C 0060 4803          move.b    #96,184+6(A2)
0000372A  00BE      
0000372C  422A 00BF 4804          clr.b     184+7(A2)
                    4805   ; font8x8[24][0]=0x00;font8x8[24][1]=0x36;font8x8[24][2]=0x7f;font8x8[24][3]=0x49;font8x8[24][4]=0x49;font8x8[24][5]=0x7f;font8x8[24][6]=0x36;font8x8[24][7]=0x00; 
00003730  422A 00C0 4806          clr.b     192(A2)
00003734  157C 0036 4807          move.b    #54,192+1(A2)
00003738  00C1      
0000373A  157C 007F 4808          move.b    #127,192+2(A2)
0000373E  00C2      
00003740  157C 0049 4809          move.b    #73,192+3(A2)
00003744  00C3      
00003746  157C 0049 4810          move.b    #73,192+4(A2)
0000374A  00C4      
0000374C  157C 007F 4811          move.b    #127,192+5(A2)
00003750  00C5      
00003752  157C 0036 4812          move.b    #54,192+6(A2)
00003756  00C6      
00003758  422A 00C7 4813          clr.b     192+7(A2)
                    4814   ; font8x8[25][0]=0x00;font8x8[25][1]=0x32;font8x8[25][2]=0x7b;font8x8[25][3]=0x49;font8x8[25][4]=0x49;font8x8[25][5]=0x7f;font8x8[25][6]=0x3e;font8x8[25][7]=0x00; 
0000375C  422A 00C8 4815          clr.b     200(A2)
00003760  157C 0032 4816          move.b    #50,200+1(A2)
00003764  00C9      
00003766  157C 007B 4817          move.b    #123,200+2(A2)
0000376A  00CA      
0000376C  157C 0049 4818          move.b    #73,200+3(A2)
00003770  00CB      
00003772  157C 0049 4819          move.b    #73,200+4(A2)
00003776  00CC      
00003778  157C 007F 4820          move.b    #127,200+5(A2)
0000377C  00CD      
0000377E  157C 003E 4821          move.b    #62,200+6(A2)
00003782  00CE      
00003784  422A 00CF 4822          clr.b     200+7(A2)
                    4823   ; font8x8[26][0]=0x00;font8x8[26][1]=0x00;font8x8[26][2]=0x00;font8x8[26][3]=0x12;font8x8[26][4]=0x12;font8x8[26][5]=0x00;font8x8[26][6]=0x00;font8x8[26][7]=0x00; 
00003788  422A 00D0 4824          clr.b     208(A2)
0000378C  422A 00D1 4825          clr.b     208+1(A2)
00003790  422A 00D2 4826          clr.b     208+2(A2)
00003794  157C 0012 4827          move.b    #18,208+3(A2)
00003798  00D3      
0000379A  157C 0012 4828          move.b    #18,208+4(A2)
0000379E  00D4      
000037A0  422A 00D5 4829          clr.b     208+5(A2)
000037A4  422A 00D6 4830          clr.b     208+6(A2)
000037A8  422A 00D7 4831          clr.b     208+7(A2)
                    4832   ; font8x8[27][0]=0x00;font8x8[27][1]=0x00;font8x8[27][2]=0x00;font8x8[27][3]=0x13;font8x8[27][4]=0x13;font8x8[27][5]=0x00;font8x8[27][6]=0x00;font8x8[27][7]=0x00; 
000037AC  422A 00D8 4833          clr.b     216(A2)
000037B0  422A 00D9 4834          clr.b     216+1(A2)
000037B4  422A 00DA 4835          clr.b     216+2(A2)
000037B8  157C 0013 4836          move.b    #19,216+3(A2)
000037BC  00DB      
000037BE  157C 0013 4837          move.b    #19,216+4(A2)
000037C2  00DC      
000037C4  422A 00DD 4838          clr.b     216+5(A2)
000037C8  422A 00DE 4839          clr.b     216+6(A2)
000037CC  422A 00DF 4840          clr.b     216+7(A2)
                    4841   ; font8x8[28][0]=0x00;font8x8[28][1]=0x08;font8x8[28][2]=0x1c;font8x8[28][3]=0x36;font8x8[28][4]=0x63;font8x8[28][5]=0x41;font8x8[28][6]=0x41;font8x8[28][7]=0x00; 
000037D0  422A 00E0 4842          clr.b     224(A2)
000037D4  157C 0008 4843          move.b    #8,224+1(A2)
000037D8  00E1      
000037DA  157C 001C 4844          move.b    #28,224+2(A2)
000037DE  00E2      
000037E0  157C 0036 4845          move.b    #54,224+3(A2)
000037E4  00E3      
000037E6  157C 0063 4846          move.b    #99,224+4(A2)
000037EA  00E4      
000037EC  157C 0041 4847          move.b    #65,224+5(A2)
000037F0  00E5      
000037F2  157C 0041 4848          move.b    #65,224+6(A2)
000037F6  00E6      
000037F8  422A 00E7 4849          clr.b     224+7(A2)
                    4850   ; font8x8[29][0]=0x00;font8x8[29][1]=0x14;font8x8[29][2]=0x14;font8x8[29][3]=0x14;font8x8[29][4]=0x14;font8x8[29][5]=0x14;font8x8[29][6]=0x14;font8x8[29][7]=0x00; 
000037FC  422A 00E8 4851          clr.b     232(A2)
00003800  157C 0014 4852          move.b    #20,232+1(A2)
00003804  00E9      
00003806  157C 0014 4853          move.b    #20,232+2(A2)
0000380A  00EA      
0000380C  157C 0014 4854          move.b    #20,232+3(A2)
00003810  00EB      
00003812  157C 0014 4855          move.b    #20,232+4(A2)
00003816  00EC      
00003818  157C 0014 4856          move.b    #20,232+5(A2)
0000381C  00ED      
0000381E  157C 0014 4857          move.b    #20,232+6(A2)
00003822  00EE      
00003824  422A 00EF 4858          clr.b     232+7(A2)
                    4859   ; font8x8[30][0]=0x00;font8x8[30][1]=0x41;font8x8[30][2]=0x41;font8x8[30][3]=0x63;font8x8[30][4]=0x36;font8x8[30][5]=0x1c;font8x8[30][6]=0x08;font8x8[30][7]=0x00; 
00003828  422A 00F0 4860          clr.b     240(A2)
0000382C  157C 0041 4861          move.b    #65,240+1(A2)
00003830  00F1      
00003832  157C 0041 4862          move.b    #65,240+2(A2)
00003836  00F2      
00003838  157C 0063 4863          move.b    #99,240+3(A2)
0000383C  00F3      
0000383E  157C 0036 4864          move.b    #54,240+4(A2)
00003842  00F4      
00003844  157C 001C 4865          move.b    #28,240+5(A2)
00003848  00F5      
0000384A  157C 0008 4866          move.b    #8,240+6(A2)
0000384E  00F6      
00003850  422A 00F7 4867          clr.b     240+7(A2)
                    4868   ; font8x8[31][0]=0x00;font8x8[31][1]=0x20;font8x8[31][2]=0x60;font8x8[31][3]=0x45;font8x8[31][4]=0x4d;font8x8[31][5]=0x78;font8x8[31][6]=0x30;font8x8[31][7]=0x00; 
00003854  422A 00F8 4869          clr.b     248(A2)
00003858  157C 0020 4870          move.b    #32,248+1(A2)
0000385C  00F9      
0000385E  157C 0060 4871          move.b    #96,248+2(A2)
00003862  00FA      
00003864  157C 0045 4872          move.b    #69,248+3(A2)
00003868  00FB      
0000386A  157C 004D 4873          move.b    #77,248+4(A2)
0000386E  00FC      
00003870  157C 0078 4874          move.b    #120,248+5(A2)
00003874  00FD      
00003876  157C 0030 4875          move.b    #48,248+6(A2)
0000387A  00FE      
0000387C  422A 00FF 4876          clr.b     248+7(A2)
                    4877   ; font8x8[32][0]=0x00;font8x8[32][1]=0x3e;font8x8[32][2]=0x7f;font8x8[32][3]=0x41;font8x8[32][4]=0x59;font8x8[32][5]=0x79;font8x8[32][6]=0x3a;font8x8[32][7]=0x00; 
00003880  422A 0100 4878          clr.b     256(A2)
00003884  157C 003E 4879          move.b    #62,256+1(A2)
00003888  0101      
0000388A  157C 007F 4880          move.b    #127,256+2(A2)
0000388E  0102      
00003890  157C 0041 4881          move.b    #65,256+3(A2)
00003894  0103      
00003896  157C 0059 4882          move.b    #89,256+4(A2)
0000389A  0104      
0000389C  157C 0079 4883          move.b    #121,256+5(A2)
000038A0  0105      
000038A2  157C 003A 4884          move.b    #58,256+6(A2)
000038A6  0106      
000038A8  422A 0107 4885          clr.b     256+7(A2)
                    4886   ; font8x8[33][0]=0x00;font8x8[33][1]=0x1f;font8x8[33][2]=0x3f;font8x8[33][3]=0x68;font8x8[33][4]=0x68;font8x8[33][5]=0x3f;font8x8[33][6]=0x1f;font8x8[33][7]=0x00; 
000038AC  422A 0108 4887          clr.b     264(A2)
000038B0  157C 001F 4888          move.b    #31,264+1(A2)
000038B4  0109      
000038B6  157C 003F 4889          move.b    #63,264+2(A2)
000038BA  010A      
000038BC  157C 0068 4890          move.b    #104,264+3(A2)
000038C0  010B      
000038C2  157C 0068 4891          move.b    #104,264+4(A2)
000038C6  010C      
000038C8  157C 003F 4892          move.b    #63,264+5(A2)
000038CC  010D      
000038CE  157C 001F 4893          move.b    #31,264+6(A2)
000038D2  010E      
000038D4  422A 010F 4894          clr.b     264+7(A2)
                    4895   ; font8x8[34][0]=0x00;font8x8[34][1]=0x7f;font8x8[34][2]=0x7f;font8x8[34][3]=0x49;font8x8[34][4]=0x49;font8x8[34][5]=0x7f;font8x8[34][6]=0x36;font8x8[34][7]=0x00; 
000038D8  422A 0110 4896          clr.b     272(A2)
000038DC  157C 007F 4897          move.b    #127,272+1(A2)
000038E0  0111      
000038E2  157C 007F 4898          move.b    #127,272+2(A2)
000038E6  0112      
000038E8  157C 0049 4899          move.b    #73,272+3(A2)
000038EC  0113      
000038EE  157C 0049 4900          move.b    #73,272+4(A2)
000038F2  0114      
000038F4  157C 007F 4901          move.b    #127,272+5(A2)
000038F8  0115      
000038FA  157C 0036 4902          move.b    #54,272+6(A2)
000038FE  0116      
00003900  422A 0117 4903          clr.b     272+7(A2)
                    4904   ; font8x8[35][0]=0x00;font8x8[35][1]=0x3e;font8x8[35][2]=0x7f;font8x8[35][3]=0x41;font8x8[35][4]=0x41;font8x8[35][5]=0x63;font8x8[35][6]=0x22;font8x8[35][7]=0x00; 
00003904  422A 0118 4905          clr.b     280(A2)
00003908  157C 003E 4906          move.b    #62,280+1(A2)
0000390C  0119      
0000390E  157C 007F 4907          move.b    #127,280+2(A2)
00003912  011A      
00003914  157C 0041 4908          move.b    #65,280+3(A2)
00003918  011B      
0000391A  157C 0041 4909          move.b    #65,280+4(A2)
0000391E  011C      
00003920  157C 0063 4910          move.b    #99,280+5(A2)
00003924  011D      
00003926  157C 0022 4911          move.b    #34,280+6(A2)
0000392A  011E      
0000392C  422A 011F 4912          clr.b     280+7(A2)
                    4913   ; font8x8[36][0]=0x00;font8x8[36][1]=0x7f;font8x8[36][2]=0x7f;font8x8[36][3]=0x41;font8x8[36][4]=0x63;font8x8[36][5]=0x3e;font8x8[36][6]=0x1c;font8x8[36][7]=0x00; 
00003930  422A 0120 4914          clr.b     288(A2)
00003934  157C 007F 4915          move.b    #127,288+1(A2)
00003938  0121      
0000393A  157C 007F 4916          move.b    #127,288+2(A2)
0000393E  0122      
00003940  157C 0041 4917          move.b    #65,288+3(A2)
00003944  0123      
00003946  157C 0063 4918          move.b    #99,288+4(A2)
0000394A  0124      
0000394C  157C 003E 4919          move.b    #62,288+5(A2)
00003950  0125      
00003952  157C 001C 4920          move.b    #28,288+6(A2)
00003956  0126      
00003958  422A 0127 4921          clr.b     288+7(A2)
                    4922   ; font8x8[37][0]=0x00;font8x8[37][1]=0x7f;font8x8[37][2]=0x7f;font8x8[37][3]=0x49;font8x8[37][4]=0x49;font8x8[37][5]=0x41;font8x8[37][6]=0x41;font8x8[37][7]=0x00; 
0000395C  422A 0128 4923          clr.b     296(A2)
00003960  157C 007F 4924          move.b    #127,296+1(A2)
00003964  0129      
00003966  157C 007F 4925          move.b    #127,296+2(A2)
0000396A  012A      
0000396C  157C 0049 4926          move.b    #73,296+3(A2)
00003970  012B      
00003972  157C 0049 4927          move.b    #73,296+4(A2)
00003976  012C      
00003978  157C 0041 4928          move.b    #65,296+5(A2)
0000397C  012D      
0000397E  157C 0041 4929          move.b    #65,296+6(A2)
00003982  012E      
00003984  422A 012F 4930          clr.b     296+7(A2)
                    4931   ; font8x8[38][0]=0x00;font8x8[38][1]=0x7f;font8x8[38][2]=0x7f;font8x8[38][3]=0x48;font8x8[38][4]=0x48;font8x8[38][5]=0x40;font8x8[38][6]=0x40;font8x8[38][7]=0x00; 
00003988  422A 0130 4932          clr.b     304(A2)
0000398C  157C 007F 4933          move.b    #127,304+1(A2)
00003990  0131      
00003992  157C 007F 4934          move.b    #127,304+2(A2)
00003996  0132      
00003998  157C 0048 4935          move.b    #72,304+3(A2)
0000399C  0133      
0000399E  157C 0048 4936          move.b    #72,304+4(A2)
000039A2  0134      
000039A4  157C 0040 4937          move.b    #64,304+5(A2)
000039A8  0135      
000039AA  157C 0040 4938          move.b    #64,304+6(A2)
000039AE  0136      
000039B0  422A 0137 4939          clr.b     304+7(A2)
                    4940   ; font8x8[39][0]=0x00;font8x8[39][1]=0x3e;font8x8[39][2]=0x7f;font8x8[39][3]=0x41;font8x8[39][4]=0x49;font8x8[39][5]=0x6f;font8x8[39][6]=0x2e;font8x8[39][7]=0x00; 
000039B4  422A 0138 4941          clr.b     312(A2)
000039B8  157C 003E 4942          move.b    #62,312+1(A2)
000039BC  0139      
000039BE  157C 007F 4943          move.b    #127,312+2(A2)
000039C2  013A      
000039C4  157C 0041 4944          move.b    #65,312+3(A2)
000039C8  013B      
000039CA  157C 0049 4945          move.b    #73,312+4(A2)
000039CE  013C      
000039D0  157C 006F 4946          move.b    #111,312+5(A2)
000039D4  013D      
000039D6  157C 002E 4947          move.b    #46,312+6(A2)
000039DA  013E      
000039DC  422A 013F 4948          clr.b     312+7(A2)
                    4949   ; font8x8[40][0]=0x00;font8x8[40][1]=0x7f;font8x8[40][2]=0x7f;font8x8[40][3]=0x08;font8x8[40][4]=0x08;font8x8[40][5]=0x7f;font8x8[40][6]=0x7f;font8x8[40][7]=0x00; 
000039E0  422A 0140 4950          clr.b     320(A2)
000039E4  157C 007F 4951          move.b    #127,320+1(A2)
000039E8  0141      
000039EA  157C 007F 4952          move.b    #127,320+2(A2)
000039EE  0142      
000039F0  157C 0008 4953          move.b    #8,320+3(A2)
000039F4  0143      
000039F6  157C 0008 4954          move.b    #8,320+4(A2)
000039FA  0144      
000039FC  157C 007F 4955          move.b    #127,320+5(A2)
00003A00  0145      
00003A02  157C 007F 4956          move.b    #127,320+6(A2)
00003A06  0146      
00003A08  422A 0147 4957          clr.b     320+7(A2)
                    4958   ; font8x8[41][0]=0x00;font8x8[41][1]=0x00;font8x8[41][2]=0x41;font8x8[41][3]=0x7f;font8x8[41][4]=0x7f;font8x8[41][5]=0x41;font8x8[41][6]=0x00;font8x8[41][7]=0x00; 
00003A0C  422A 0148 4959          clr.b     328(A2)
00003A10  422A 0149 4960          clr.b     328+1(A2)
00003A14  157C 0041 4961          move.b    #65,328+2(A2)
00003A18  014A      
00003A1A  157C 007F 4962          move.b    #127,328+3(A2)
00003A1E  014B      
00003A20  157C 007F 4963          move.b    #127,328+4(A2)
00003A24  014C      
00003A26  157C 0041 4964          move.b    #65,328+5(A2)
00003A2A  014D      
00003A2C  422A 014E 4965          clr.b     328+6(A2)
00003A30  422A 014F 4966          clr.b     328+7(A2)
                    4967   ; font8x8[42][0]=0x00;font8x8[42][1]=0x02;font8x8[42][2]=0x03;font8x8[42][3]=0x41;font8x8[42][4]=0x7f;font8x8[42][5]=0x7e;font8x8[42][6]=0x40;font8x8[42][7]=0x00; 
00003A34  422A 0150 4968          clr.b     336(A2)
00003A38  157C 0002 4969          move.b    #2,336+1(A2)
00003A3C  0151      
00003A3E  157C 0003 4970          move.b    #3,336+2(A2)
00003A42  0152      
00003A44  157C 0041 4971          move.b    #65,336+3(A2)
00003A48  0153      
00003A4A  157C 007F 4972          move.b    #127,336+4(A2)
00003A4E  0154      
00003A50  157C 007E 4973          move.b    #126,336+5(A2)
00003A54  0155      
00003A56  157C 0040 4974          move.b    #64,336+6(A2)
00003A5A  0156      
00003A5C  422A 0157 4975          clr.b     336+7(A2)
                    4976   ; font8x8[43][0]=0x00;font8x8[43][1]=0x7f;font8x8[43][2]=0x7f;font8x8[43][3]=0x1c;font8x8[43][4]=0x36;font8x8[43][5]=0x63;font8x8[43][6]=0x41;font8x8[43][7]=0x00; 
00003A60  422A 0158 4977          clr.b     344(A2)
00003A64  157C 007F 4978          move.b    #127,344+1(A2)
00003A68  0159      
00003A6A  157C 007F 4979          move.b    #127,344+2(A2)
00003A6E  015A      
00003A70  157C 001C 4980          move.b    #28,344+3(A2)
00003A74  015B      
00003A76  157C 0036 4981          move.b    #54,344+4(A2)
00003A7A  015C      
00003A7C  157C 0063 4982          move.b    #99,344+5(A2)
00003A80  015D      
00003A82  157C 0041 4983          move.b    #65,344+6(A2)
00003A86  015E      
00003A88  422A 015F 4984          clr.b     344+7(A2)
                    4985   ; font8x8[44][0]=0x00;font8x8[44][1]=0x7f;font8x8[44][2]=0x7f;font8x8[44][3]=0x01;font8x8[44][4]=0x01;font8x8[44][5]=0x01;font8x8[44][6]=0x01;font8x8[44][7]=0x00; 
00003A8C  422A 0160 4986          clr.b     352(A2)
00003A90  157C 007F 4987          move.b    #127,352+1(A2)
00003A94  0161      
00003A96  157C 007F 4988          move.b    #127,352+2(A2)
00003A9A  0162      
00003A9C  157C 0001 4989          move.b    #1,352+3(A2)
00003AA0  0163      
00003AA2  157C 0001 4990          move.b    #1,352+4(A2)
00003AA6  0164      
00003AA8  157C 0001 4991          move.b    #1,352+5(A2)
00003AAC  0165      
00003AAE  157C 0001 4992          move.b    #1,352+6(A2)
00003AB2  0166      
00003AB4  422A 0167 4993          clr.b     352+7(A2)
                    4994   ; font8x8[45][0]=0x00;font8x8[45][1]=0x7f;font8x8[45][2]=0x7f;font8x8[45][3]=0x30;font8x8[45][4]=0x18;font8x8[45][5]=0x30;font8x8[45][6]=0x7f;font8x8[45][7]=0x7f; 
00003AB8  422A 0168 4995          clr.b     360(A2)
00003ABC  157C 007F 4996          move.b    #127,360+1(A2)
00003AC0  0169      
00003AC2  157C 007F 4997          move.b    #127,360+2(A2)
00003AC6  016A      
00003AC8  157C 0030 4998          move.b    #48,360+3(A2)
00003ACC  016B      
00003ACE  157C 0018 4999          move.b    #24,360+4(A2)
00003AD2  016C      
00003AD4  157C 0030 5000          move.b    #48,360+5(A2)
00003AD8  016D      
00003ADA  157C 007F 5001          move.b    #127,360+6(A2)
00003ADE  016E      
00003AE0  157C 007F 5002          move.b    #127,360+7(A2)
00003AE4  016F      
                    5003   ; font8x8[46][0]=0x00;font8x8[46][1]=0x7f;font8x8[46][2]=0x7f;font8x8[46][3]=0x38;font8x8[46][4]=0x1c;font8x8[46][5]=0x7f;font8x8[46][6]=0x7f;font8x8[46][7]=0x00; 
00003AE6  422A 0170 5004          clr.b     368(A2)
00003AEA  157C 007F 5005          move.b    #127,368+1(A2)
00003AEE  0171      
00003AF0  157C 007F 5006          move.b    #127,368+2(A2)
00003AF4  0172      
00003AF6  157C 0038 5007          move.b    #56,368+3(A2)
00003AFA  0173      
00003AFC  157C 001C 5008          move.b    #28,368+4(A2)
00003B00  0174      
00003B02  157C 007F 5009          move.b    #127,368+5(A2)
00003B06  0175      
00003B08  157C 007F 5010          move.b    #127,368+6(A2)
00003B0C  0176      
00003B0E  422A 0177 5011          clr.b     368+7(A2)
                    5012   ; font8x8[47][0]=0x00;font8x8[47][1]=0x3e;font8x8[47][2]=0x7f;font8x8[47][3]=0x41;font8x8[47][4]=0x41;font8x8[47][5]=0x7f;font8x8[47][6]=0x3e;font8x8[47][7]=0x00; 
00003B12  422A 0178 5013          clr.b     376(A2)
00003B16  157C 003E 5014          move.b    #62,376+1(A2)
00003B1A  0179      
00003B1C  157C 007F 5015          move.b    #127,376+2(A2)
00003B20  017A      
00003B22  157C 0041 5016          move.b    #65,376+3(A2)
00003B26  017B      
00003B28  157C 0041 5017          move.b    #65,376+4(A2)
00003B2C  017C      
00003B2E  157C 007F 5018          move.b    #127,376+5(A2)
00003B32  017D      
00003B34  157C 003E 5019          move.b    #62,376+6(A2)
00003B38  017E      
00003B3A  422A 017F 5020          clr.b     376+7(A2)
                    5021   ; font8x8[48][0]=0x00;font8x8[48][1]=0x7f;font8x8[48][2]=0x7f;font8x8[48][3]=0x48;font8x8[48][4]=0x48;font8x8[48][5]=0x78;font8x8[48][6]=0x30;font8x8[48][7]=0x00; 
00003B3E  422A 0180 5022          clr.b     384(A2)
00003B42  157C 007F 5023          move.b    #127,384+1(A2)
00003B46  0181      
00003B48  157C 007F 5024          move.b    #127,384+2(A2)
00003B4C  0182      
00003B4E  157C 0048 5025          move.b    #72,384+3(A2)
00003B52  0183      
00003B54  157C 0048 5026          move.b    #72,384+4(A2)
00003B58  0184      
00003B5A  157C 0078 5027          move.b    #120,384+5(A2)
00003B5E  0185      
00003B60  157C 0030 5028          move.b    #48,384+6(A2)
00003B64  0186      
00003B66  422A 0187 5029          clr.b     384+7(A2)
                    5030   ; font8x8[49][0]=0x00;font8x8[49][1]=0x3c;font8x8[49][2]=0x7e;font8x8[49][3]=0x42;font8x8[49][4]=0x43;font8x8[49][5]=0x7f;font8x8[49][6]=0x3d;font8x8[49][7]=0x00; 
00003B6A  422A 0188 5031          clr.b     392(A2)
00003B6E  157C 003C 5032          move.b    #60,392+1(A2)
00003B72  0189      
00003B74  157C 007E 5033          move.b    #126,392+2(A2)
00003B78  018A      
00003B7A  157C 0042 5034          move.b    #66,392+3(A2)
00003B7E  018B      
00003B80  157C 0043 5035          move.b    #67,392+4(A2)
00003B84  018C      
00003B86  157C 007F 5036          move.b    #127,392+5(A2)
00003B8A  018D      
00003B8C  157C 003D 5037          move.b    #61,392+6(A2)
00003B90  018E      
00003B92  422A 018F 5038          clr.b     392+7(A2)
                    5039   ; font8x8[50][0]=0x00;font8x8[50][1]=0x7f;font8x8[50][2]=0x7f;font8x8[50][3]=0x4c;font8x8[50][4]=0x4e;font8x8[50][5]=0x7b;font8x8[50][6]=0x31;font8x8[50][7]=0x00; 
00003B96  422A 0190 5040          clr.b     400(A2)
00003B9A  157C 007F 5041          move.b    #127,400+1(A2)
00003B9E  0191      
00003BA0  157C 007F 5042          move.b    #127,400+2(A2)
00003BA4  0192      
00003BA6  157C 004C 5043          move.b    #76,400+3(A2)
00003BAA  0193      
00003BAC  157C 004E 5044          move.b    #78,400+4(A2)
00003BB0  0194      
00003BB2  157C 007B 5045          move.b    #123,400+5(A2)
00003BB6  0195      
00003BB8  157C 0031 5046          move.b    #49,400+6(A2)
00003BBC  0196      
00003BBE  422A 0197 5047          clr.b     400+7(A2)
                    5048   ; font8x8[51][0]=0x00;font8x8[51][1]=0x32;font8x8[51][2]=0x7b;font8x8[51][3]=0x49;font8x8[51][4]=0x49;font8x8[51][5]=0x6f;font8x8[51][6]=0x26;font8x8[51][7]=0x00; 
00003BC2  422A 0198 5049          clr.b     408(A2)
00003BC6  157C 0032 5050          move.b    #50,408+1(A2)
00003BCA  0199      
00003BCC  157C 007B 5051          move.b    #123,408+2(A2)
00003BD0  019A      
00003BD2  157C 0049 5052          move.b    #73,408+3(A2)
00003BD6  019B      
00003BD8  157C 0049 5053          move.b    #73,408+4(A2)
00003BDC  019C      
00003BDE  157C 006F 5054          move.b    #111,408+5(A2)
00003BE2  019D      
00003BE4  157C 0026 5055          move.b    #38,408+6(A2)
00003BE8  019E      
00003BEA  422A 019F 5056          clr.b     408+7(A2)
                    5057   ; font8x8[52][0]=0x00;font8x8[52][1]=0x40;font8x8[52][2]=0x40;font8x8[52][3]=0x7f;font8x8[52][4]=0x7f;font8x8[52][5]=0x40;font8x8[52][6]=0x40;font8x8[52][7]=0x00; 
00003BEE  422A 01A0 5058          clr.b     416(A2)
00003BF2  157C 0040 5059          move.b    #64,416+1(A2)
00003BF6  01A1      
00003BF8  157C 0040 5060          move.b    #64,416+2(A2)
00003BFC  01A2      
00003BFE  157C 007F 5061          move.b    #127,416+3(A2)
00003C02  01A3      
00003C04  157C 007F 5062          move.b    #127,416+4(A2)
00003C08  01A4      
00003C0A  157C 0040 5063          move.b    #64,416+5(A2)
00003C0E  01A5      
00003C10  157C 0040 5064          move.b    #64,416+6(A2)
00003C14  01A6      
00003C16  422A 01A7 5065          clr.b     416+7(A2)
                    5066   ; font8x8[53][0]=0x00;font8x8[53][1]=0x7e;font8x8[53][2]=0x7f;font8x8[53][3]=0x01;font8x8[53][4]=0x01;font8x8[53][5]=0x7f;font8x8[53][6]=0x7e;font8x8[53][7]=0x00; 
00003C1A  422A 01A8 5067          clr.b     424(A2)
00003C1E  157C 007E 5068          move.b    #126,424+1(A2)
00003C22  01A9      
00003C24  157C 007F 5069          move.b    #127,424+2(A2)
00003C28  01AA      
00003C2A  157C 0001 5070          move.b    #1,424+3(A2)
00003C2E  01AB      
00003C30  157C 0001 5071          move.b    #1,424+4(A2)
00003C34  01AC      
00003C36  157C 007F 5072          move.b    #127,424+5(A2)
00003C3A  01AD      
00003C3C  157C 007E 5073          move.b    #126,424+6(A2)
00003C40  01AE      
00003C42  422A 01AF 5074          clr.b     424+7(A2)
                    5075   ; font8x8[54][0]=0x00;font8x8[54][1]=0x7c;font8x8[54][2]=0x7e;font8x8[54][3]=0x03;font8x8[54][4]=0x03;font8x8[54][5]=0x7e;font8x8[54][6]=0x7c;font8x8[54][7]=0x00; 
00003C46  422A 01B0 5076          clr.b     432(A2)
00003C4A  157C 007C 5077          move.b    #124,432+1(A2)
00003C4E  01B1      
00003C50  157C 007E 5078          move.b    #126,432+2(A2)
00003C54  01B2      
00003C56  157C 0003 5079          move.b    #3,432+3(A2)
00003C5A  01B3      
00003C5C  157C 0003 5080          move.b    #3,432+4(A2)
00003C60  01B4      
00003C62  157C 007E 5081          move.b    #126,432+5(A2)
00003C66  01B5      
00003C68  157C 007C 5082          move.b    #124,432+6(A2)
00003C6C  01B6      
00003C6E  422A 01B7 5083          clr.b     432+7(A2)
                    5084   ; font8x8[55][0]=0x00;font8x8[55][1]=0x7f;font8x8[55][2]=0x7f;font8x8[55][3]=0x06;font8x8[55][4]=0x0c;font8x8[55][5]=0x06;font8x8[55][6]=0x7f;font8x8[55][7]=0x7f; 
00003C72  422A 01B8 5085          clr.b     440(A2)
00003C76  157C 007F 5086          move.b    #127,440+1(A2)
00003C7A  01B9      
00003C7C  157C 007F 5087          move.b    #127,440+2(A2)
00003C80  01BA      
00003C82  157C 0006 5088          move.b    #6,440+3(A2)
00003C86  01BB      
00003C88  157C 000C 5089          move.b    #12,440+4(A2)
00003C8C  01BC      
00003C8E  157C 0006 5090          move.b    #6,440+5(A2)
00003C92  01BD      
00003C94  157C 007F 5091          move.b    #127,440+6(A2)
00003C98  01BE      
00003C9A  157C 007F 5092          move.b    #127,440+7(A2)
00003C9E  01BF      
                    5093   ; font8x8[56][0]=0x00;font8x8[56][1]=0x63;font8x8[56][2]=0x77;font8x8[56][3]=0x1c;font8x8[56][4]=0x1c;font8x8[56][5]=0x77;font8x8[56][6]=0x63;font8x8[56][7]=0x00; 
00003CA0  422A 01C0 5094          clr.b     448(A2)
00003CA4  157C 0063 5095          move.b    #99,448+1(A2)
00003CA8  01C1      
00003CAA  157C 0077 5096          move.b    #119,448+2(A2)
00003CAE  01C2      
00003CB0  157C 001C 5097          move.b    #28,448+3(A2)
00003CB4  01C3      
00003CB6  157C 001C 5098          move.b    #28,448+4(A2)
00003CBA  01C4      
00003CBC  157C 0077 5099          move.b    #119,448+5(A2)
00003CC0  01C5      
00003CC2  157C 0063 5100          move.b    #99,448+6(A2)
00003CC6  01C6      
00003CC8  422A 01C7 5101          clr.b     448+7(A2)
                    5102   ; font8x8[57][0]=0x00;font8x8[57][1]=0x70;font8x8[57][2]=0x78;font8x8[57][3]=0x0f;font8x8[57][4]=0x0f;font8x8[57][5]=0x78;font8x8[57][6]=0x70;font8x8[57][7]=0x00; 
00003CCC  422A 01C8 5103          clr.b     456(A2)
00003CD0  157C 0070 5104          move.b    #112,456+1(A2)
00003CD4  01C9      
00003CD6  157C 0078 5105          move.b    #120,456+2(A2)
00003CDA  01CA      
00003CDC  157C 000F 5106          move.b    #15,456+3(A2)
00003CE0  01CB      
00003CE2  157C 000F 5107          move.b    #15,456+4(A2)
00003CE6  01CC      
00003CE8  157C 0078 5108          move.b    #120,456+5(A2)
00003CEC  01CD      
00003CEE  157C 0070 5109          move.b    #112,456+6(A2)
00003CF2  01CE      
00003CF4  422A 01CF 5110          clr.b     456+7(A2)
                    5111   ; font8x8[58][0]=0x00;font8x8[58][1]=0x43;font8x8[58][2]=0x47;font8x8[58][3]=0x4d;font8x8[58][4]=0x59;font8x8[58][5]=0x71;font8x8[58][6]=0x61;font8x8[58][7]=0x00; 
00003CF8  422A 01D0 5112          clr.b     464(A2)
00003CFC  157C 0043 5113          move.b    #67,464+1(A2)
00003D00  01D1      
00003D02  157C 0047 5114          move.b    #71,464+2(A2)
00003D06  01D2      
00003D08  157C 004D 5115          move.b    #77,464+3(A2)
00003D0C  01D3      
00003D0E  157C 0059 5116          move.b    #89,464+4(A2)
00003D12  01D4      
00003D14  157C 0071 5117          move.b    #113,464+5(A2)
00003D18  01D5      
00003D1A  157C 0061 5118          move.b    #97,464+6(A2)
00003D1E  01D6      
00003D20  422A 01D7 5119          clr.b     464+7(A2)
                    5120   ; font8x8[59][0]=0x00;font8x8[59][1]=0x00;font8x8[59][2]=0x7f;font8x8[59][3]=0x7f;font8x8[59][4]=0x41;font8x8[59][5]=0x41;font8x8[59][6]=0x00;font8x8[59][7]=0x00; 
00003D24  422A 01D8 5121          clr.b     472(A2)
00003D28  422A 01D9 5122          clr.b     472+1(A2)
00003D2C  157C 007F 5123          move.b    #127,472+2(A2)
00003D30  01DA      
00003D32  157C 007F 5124          move.b    #127,472+3(A2)
00003D36  01DB      
00003D38  157C 0041 5125          move.b    #65,472+4(A2)
00003D3C  01DC      
00003D3E  157C 0041 5126          move.b    #65,472+5(A2)
00003D42  01DD      
00003D44  422A 01DE 5127          clr.b     472+6(A2)
00003D48  422A 01DF 5128          clr.b     472+7(A2)
                    5129   ; font8x8[60][0]=0x00;font8x8[60][1]=0x20;font8x8[60][2]=0x30;font8x8[60][3]=0x18;font8x8[60][4]=0x0c;font8x8[60][5]=0x06;font8x8[60][6]=0x03;font8x8[60][7]=0x01; 
00003D4C  422A 01E0 5130          clr.b     480(A2)
00003D50  157C 0020 5131          move.b    #32,480+1(A2)
00003D54  01E1      
00003D56  157C 0030 5132          move.b    #48,480+2(A2)
00003D5A  01E2      
00003D5C  157C 0018 5133          move.b    #24,480+3(A2)
00003D60  01E3      
00003D62  157C 000C 5134          move.b    #12,480+4(A2)
00003D66  01E4      
00003D68  157C 0006 5135          move.b    #6,480+5(A2)
00003D6C  01E5      
00003D6E  157C 0003 5136          move.b    #3,480+6(A2)
00003D72  01E6      
00003D74  157C 0001 5137          move.b    #1,480+7(A2)
00003D78  01E7      
                    5138   ; font8x8[61][0]=0x00;font8x8[61][1]=0x00;font8x8[61][2]=0x41;font8x8[61][3]=0x41;font8x8[61][4]=0x7f;font8x8[61][5]=0x7f;font8x8[61][6]=0x00;font8x8[61][7]=0x00; 
00003D7A  422A 01E8 5139          clr.b     488(A2)
00003D7E  422A 01E9 5140          clr.b     488+1(A2)
00003D82  157C 0041 5141          move.b    #65,488+2(A2)
00003D86  01EA      
00003D88  157C 0041 5142          move.b    #65,488+3(A2)
00003D8C  01EB      
00003D8E  157C 007F 5143          move.b    #127,488+4(A2)
00003D92  01EC      
00003D94  157C 007F 5144          move.b    #127,488+5(A2)
00003D98  01ED      
00003D9A  422A 01EE 5145          clr.b     488+6(A2)
00003D9E  422A 01EF 5146          clr.b     488+7(A2)
                    5147   ; font8x8[62][0]=0x00;font8x8[62][1]=0x08;font8x8[62][2]=0x18;font8x8[62][3]=0x3f;font8x8[62][4]=0x3f;font8x8[62][5]=0x18;font8x8[62][6]=0x08;font8x8[62][7]=0x00;
00003DA2  422A 01F0 5148          clr.b     496(A2)
00003DA6  157C 0008 5149          move.b    #8,496+1(A2)
00003DAA  01F1      
00003DAC  157C 0018 5150          move.b    #24,496+2(A2)
00003DB0  01F2      
00003DB2  157C 003F 5151          move.b    #63,496+3(A2)
00003DB6  01F3      
00003DB8  157C 003F 5152          move.b    #63,496+4(A2)
00003DBC  01F4      
00003DBE  157C 0018 5153          move.b    #24,496+5(A2)
00003DC2  01F5      
00003DC4  157C 0008 5154          move.b    #8,496+6(A2)
00003DC8  01F6      
00003DCA  422A 01F7 5155          clr.b     496+7(A2)
00003DCE  4CDF 3C00 5156          movem.l   (A7)+,A2/A3/A4/A5
00003DD2  4E75      5157          rts
                    5158   ; }
                    5159   ; void cosmic_impalas_main() {
                    5160   _cosmic_impalas_main:
                    5161   ; // NOTE: initializers don't get run, so we init here
                    5162   ; FIRE1  = 0;
00003DD4  42B9 0803 5163          clr.l     _FIRE1.L
00003DD8  0422      
                    5164   ; LEFT1  = 0;
00003DDA  42B9 0803 5165          clr.l     _LEFT1.L
00003DDE  0426      
                    5166   ; RIGHT1 = 0;
00003DE0  42B9 0803 5167          clr.l     _RIGHT1.L
00003DE4  042A      
                    5168   ; srand(1234);
00003DE6  4878 04D2 5169          pea       1234
00003DEA  4EB8 1EBC 5170          jsr       _srand
00003DEE  584F      5171          addq.w    #4,A7
                    5172   ; initialize_all_bitmaps();
00003DF0  4EB8 2DD8 5173          jsr       _initialize_all_bitmaps
                    5174   ; credits = 0;
00003DF4  4239 0803 5175          clr.b     _credits.L
00003DF8  0442      
                    5176   ; play_game(); 
00003DFA  4EB8 2D98 5177          jsr       _play_game
00003DFE  4E75      5178          rts
                    5179   ; }
                    5180   _toupper:
00003E00  4E56 0000 5181          link      A6,#0
00003E04  48E7 2000 5182          movem.l   D2,-(A7)
00003E08  242E 0008 5183          move.l    8(A6),D2
00003E0C  0C82 0000 5184          cmp.l     #97,D2
00003E10  0061      
00003E12  6D0E      5185          blt.s     toupper_1
00003E14  0C82 0000 5186          cmp.l     #122,D2
00003E18  007A      
00003E1A  6E06      5187          bgt.s     toupper_1
00003E1C  C4BC 0000 5188          and.l     #95,D2
00003E20  005F      
                    5189   toupper_1:
00003E22  2002      5190          move.l    D2,D0
00003E24  4CDF 0004 5191          movem.l   (A7)+,D2
00003E28  4E5E      5192          unlk      A6
00003E2A  4E75      5193          rts
                    5194   _printf:
00003E2C  4E56 FFFC 5195          link      A6,#-4
00003E30  48E7 2000 5196          movem.l   D2,-(A7)
00003E34  41EE 0008 5197          lea       8(A6),A0
00003E38  5848      5198          addq.w    #4,A0
00003E3A  2408      5199          move.l    A0,D2
00003E3C  2F02      5200          move.l    D2,-(A7)
00003E3E  2F2E 0008 5201          move.l    8(A6),-(A7)
00003E42  42A7      5202          clr.l     -(A7)
00003E44  6100 0190 5203          bsr       _vsprintf
00003E48  DEFC 000C 5204          add.w     #12,A7
00003E4C  2D40 FFFC 5205          move.l    D0,-4(A6)
00003E50  4282      5206          clr.l     D2
00003E52  202E FFFC 5207          move.l    -4(A6),D0
00003E56  4CDF 0004 5208          movem.l   (A7)+,D2
00003E5A  4E5E      5209          unlk      A6
00003E5C  4E75      5210          rts
                    5211   ULMUL:
00003E5E  4E56 0000 5212          link    A6,#0
00003E62  48E7 C000 5213          movem.l D0/D1,-(A7)
00003E66  222E 0008 5214          move.l  8(A6),D1
00003E6A  202E 000C 5215          move.l  12(A6),D0
00003E6E  602C      5216          bra.s   lmul_3
                    5217   LMUL:
00003E70  4E56 0000 5218          link    A6,#0
00003E74  48E7 C000 5219          movem.l D0/D1,-(A7)
00003E78  222E 0008 5220          move.l  8(A6),D1
00003E7C  202E 000C 5221          move.l  12(A6),D0
00003E80  4A80      5222          tst.l   D0
00003E82  6A0A      5223          bpl.s   lmul_1
00003E84  4480      5224          neg.l   D0
00003E86  4A81      5225          tst.l   D1
00003E88  6A0A      5226          bpl.s   lmul_2
00003E8A  4481      5227          neg.l   D1
00003E8C  600E      5228          bra.s   lmul_3
                    5229   lmul_1:
00003E8E  4A81      5230          tst.l   D1
00003E90  6A0A      5231          bpl.s   lmul_3
00003E92  4481      5232          neg.l   D1
                    5233   lmul_2:
00003E94  6114      5234          bsr.s   domul
00003E96  4481      5235          neg.l   D1
00003E98  4080      5236          negx.l  D0
00003E9A  6002      5237          bra.s   lmul_4
                    5238   lmul_3:
00003E9C  610C      5239          bsr.s   domul
                    5240   lmul_4:
00003E9E  2D41 0008 5241          move.l  D1,8(A6)
00003EA2  4CDF 0003 5242          movem.l (A7)+,D0/D1
00003EA6  4E5E      5243          unlk    A6
00003EA8  4E75      5244          rts
                    5245   domul:
00003EAA  0C81 0000 5246          cmpi.l  #$FFFF,D1
00003EAE  FFFF      
00003EB0  620C      5247          bhi.s   domul_1
00003EB2  0C80 0000 5248          cmpi.l  #$FFFF,D0
00003EB6  FFFF      
00003EB8  620E      5249          bhi.s   domul_2
00003EBA  C2C0      5250          mulu    D0,D1
00003EBC  4E75      5251          rts
                    5252   domul_1:
00003EBE  0C80 0000 5253          cmpi.l  #$FFFF,D0
00003EC2  FFFF      
00003EC4  6218      5254          bhi.s   domul_4
00003EC6  6002      5255          bra.s   domul_3
                    5256   domul_2
00003EC8  C141      5257          exg     D0,D1
                    5258   domul_3:
00003ECA  2F02      5259          move.l  D2,-(A7)
00003ECC  2401      5260          move.l  D1,D2
00003ECE  4842      5261          swap    D2
00003ED0  C2C0      5262          mulu    D0,D1
00003ED2  C4C0      5263          mulu    D0,D2
00003ED4  4842      5264          swap    D2
00003ED6  4242      5265          clr.w   D2
00003ED8  D282      5266          add.l   D2,D1
00003EDA  241F      5267          move.l  (A7)+,D2
00003EDC  4E75      5268          rts
                    5269   domul_4:
00003EDE  48E7 3000 5270          movem.l D2/D3,-(A7)
00003EE2  2401      5271          move.l  D1,D2
00003EE4  2601      5272          move.l  D1,D3
00003EE6  C2C0      5273          mulu    D0,D1
00003EE8  4842      5274          swap    D2
00003EEA  C4C0      5275          mulu    D0,D2
00003EEC  4840      5276          swap    D0
00003EEE  C6C0      5277          mulu    D0,D3
00003EF0  D483      5278          add.l   D3,D2
00003EF2  4842      5279          swap    D2
00003EF4  4242      5280          clr.w   D2
00003EF6  D282      5281          add.l   D2,D1
00003EF8  4CDF 000C 5282          movem.l (A7)+,D2/D3
00003EFC  4E75      5283          rts
                    5284   _memmove:
00003EFE  206F 0004 5285          move.l    (4,A7),A0
00003F02  226F 0008 5286          move.l    (8,A7),A1
00003F06  222F 000C 5287          move.l    (12,A7),D1
00003F0A  2008      5288          move.l    A0,D0
00003F0C  B1C9      5289          cmp.l     A1,A0
00003F0E  6408      5290          bcc.s     memmove_1
                    5291   memmove_0:
00003F10  10D9      5292          move.b    (A1)+,(A0)+
00003F12  5341      5293          subq      #1,D1
00003F14  66FA      5294          bne       memmove_0
00003F16  4E75      5295          rts
                    5296   memmove_1:
00003F18  D3C1      5297          add.l     D1,A1
00003F1A  D1C1      5298          add.l     D1,A0
                    5299   memmove_2:
00003F1C  1121      5300          move.b    -(A1),-(A0)
00003F1E  5341      5301          subq      #1,d1
00003F20  66FA      5302          bne       memmove_2
00003F22  4E75      5303          rts
                    5304   @vsprintf_copy:
00003F24  4E56 0000 5305          link      A6,#0
00003F28  206E 0008 5306          move.l    8(A6),A0
00003F2C  4A90      5307          tst.l     (A0)
00003F2E  6710      5308          beq.s     @vsprintf_copy_1
00003F30  202E 000C 5309          move.l    12(A6),D0
00003F34  206E 0008 5310          move.l    8(A6),A0
00003F38  2250      5311          move.l    (A0),A1
00003F3A  5290      5312          addq.l    #1,(A0)
00003F3C  1280      5313          move.b    D0,(A1)
00003F3E  600A      5314          bra.s     @vsprintf_copy_2
                    5315   @vsprintf_copy_1:
00003F40  2F2E 000C 5316          move.l    12(A6),-(A7)
00003F44  6100 085C 5317          bsr       _putch
00003F48  584F      5318          addq.w    #4,A7
                    5319   @vsprintf_copy_2:
00003F4A  4E5E      5320          unlk      A6
00003F4C  4E75      5321          rts
                    5322   @vsprintf_getval:
00003F4E  4E56 0000 5323          link      A6,#0
00003F52  48E7 3000 5324          movem.l   D2/D3,-(A7)
00003F56  242E 0008 5325          move.l    8(A6),D2
00003F5A  4283      5326          clr.l     D3
00003F5C  2042      5327          move.l    D2,A0
00003F5E  2050      5328          move.l    (A0),A0
00003F60  1010      5329          move.b    (A0),D0
00003F62  4880      5330          ext.w     D0
00003F64  48C0      5331          ext.l     D0
00003F66  0C80 0000 5332          cmp.l     #42,D0
00003F6A  002A      
00003F6C  6612      5333          bne.s     @vsprintf_getval_1
00003F6E  206E 000C 5334          move.l    12(A6),A0
00003F72  2250      5335          move.l    (A0),A1
00003F74  5890      5336          addq.l    #4,(A0)
00003F76  2611      5337          move.l    (A1),D3
00003F78  2042      5338          move.l    D2,A0
00003F7A  5290      5339          addq.l    #1,(A0)
00003F7C  6000 004E 5340          bra       @vsprintf_getval_5
                    5341   @vsprintf_getval_1:
00003F80  2042      5342          move.l    D2,A0
00003F82  2050      5343          move.l    (A0),A0
00003F84  1010      5344          move.b    (A0),D0
00003F86  4880      5345          ext.w     D0
00003F88  48C0      5346          ext.l     D0
00003F8A  0C80 0000 5347          cmp.l     #48,D0
00003F8E  0030      
00003F90  6D00 003A 5348          blt       @vsprintf_getval_5
00003F94  2042      5349          move.l    D2,A0
00003F96  2050      5350          move.l    (A0),A0
00003F98  1010      5351          move.b    (A0),D0
00003F9A  4880      5352          ext.w     D0
00003F9C  48C0      5353          ext.l     D0
00003F9E  0C80 0000 5354          cmp.l     #57,D0
00003FA2  0039      
00003FA4  6E26      5355          bgt.s     @vsprintf_getval_5
00003FA6  2F03      5356          move.l    D3,-(A7)
00003FA8  4878 000A 5357          pea       10
00003FAC  6100 FEC2 5358          bsr       LMUL
00003FB0  2017      5359          move.l    (A7),D0
00003FB2  504F      5360          addq.w    #8,A7
00003FB4  2042      5361          move.l    D2,A0
00003FB6  2250      5362          move.l    (A0),A1
00003FB8  5290      5363          addq.l    #1,(A0)
00003FBA  1211      5364          move.b    (A1),D1
00003FBC  4881      5365          ext.w     D1
00003FBE  48C1      5366          ext.l     D1
00003FC0  D081      5367          add.l     D1,D0
00003FC2  0480 0000 5368          sub.l     #48,D0
00003FC6  0030      
00003FC8  2600      5369          move.l    D0,D3
00003FCA  60B4      5370          bra       @vsprintf_getval_1
                    5371   @vsprintf_getval_5:
00003FCC  2003      5372          move.l    D3,D0
00003FCE  4CDF 000C 5373          movem.l   (A7)+,D2/D3
00003FD2  4E5E      5374          unlk      A6
00003FD4  4E75      5375          rts
                    5376   _vsprintf:
00003FD6  4E56 FFCC 5377          link      A6,#-52
00003FDA  48E7 3F3C 5378          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003FDE  45EE 0008 5379          lea       8(A6),A2
00003FE2  47F8 3F24 5380          lea       @vsprintf_copy,A3
00003FE6  49F9 0000 5381          lea       _ultoa,A4
00003FEA  472E      
00003FEC  4286      5382          clr.l     D6
                    5383   vsprintf_1:
00003FEE  206E 000C 5384          move.l    12(A6),A0
00003FF2  4A10      5385          tst.b     (A0)
00003FF4  6700 0624 5386          beq       vsprintf_3
00003FF8  206E 000C 5387          move.l    12(A6),A0
00003FFC  1010      5388          move.b    (A0),D0
00003FFE  4880      5389          ext.w     D0
00004000  48C0      5390          ext.l     D0
00004002  0C80 0000 5391          cmp.l     #37,D0
00004006  0025      
00004008  671C      5392          beq.s     vsprintf_4
0000400A  206E 000C 5393          move.l    12(A6),A0
0000400E  52AE 000C 5394          addq.l    #1,12(A6)
00004012  1210      5395          move.b    (A0),D1
00004014  4881      5396          ext.w     D1
00004016  48C1      5397          ext.l     D1
00004018  2F01      5398          move.l    D1,-(A7)
0000401A  2F0A      5399          move.l    A2,-(A7)
0000401C  4E93      5400          jsr       (A3)
0000401E  504F      5401          addq.w    #8,A7
00004020  5286      5402          addq.l    #1,D6
00004022  6000 05F2 5403          bra       vsprintf_2
                    5404   vsprintf_4:
00004026  52AE 000C 5405          addq.l    #1,12(A6)
0000402A  422E FFD3 5406          clr.b     -45(A6)
0000402E  422E FFD2 5407          clr.b     -46(A6)
00004032  422E FFD0 5408          clr.b     -48(A6)
00004036  422E FFCF 5409          clr.b     -49(A6)
0000403A  422E FFCE 5410          clr.b     -50(A6)
0000403E  422E FFCD 5411          clr.b     -51(A6)
00004042  42AE FFFC 5412          clr.l     -4(A6)
00004046  7AFF      5413          moveq     #-1,D5
00004048  41EE FFDC 5414          lea       -36(A6),A0
0000404C  2608      5415          move.l    A0,D3
0000404E  2408      5416          move.l    A0,D2
                    5417   vsprintf_6:
00004050  206E 000C 5418          move.l    12(A6),A0
00004054  1010      5419          move.b    (A0),D0
00004056  4880      5420          ext.w     D0
00004058  48C0      5421          ext.l     D0
0000405A  0C80 0000 5422          cmp.l     #43,D0
0000405E  002B      
00004060  6730      5423          beq.s     vsprintf_12
00004062  6E18      5424          bgt.s     vsprintf_15
00004064  0C80 0000 5425          cmp.l     #35,D0
00004068  0023      
0000406A  6700 003E 5426          beq       vsprintf_14
0000406E  6E00 0046 5427          bgt       vsprintf_9
00004072  0C80 0000 5428          cmp.l     #32,D0
00004076  0020      
00004078  6724      5429          beq.s     vsprintf_13
0000407A  603A      5430          bra.s     vsprintf_9
                    5431   vsprintf_15:
0000407C  0C80 0000 5432          cmp.l     #45,D0
00004080  002D      
00004082  6702      5433          beq.s     vsprintf_11
00004084  6030      5434          bra.s     vsprintf_9
                    5435   vsprintf_11:
00004086  1D7C 0001 5436          move.b    #1,-51(A6)
0000408A  FFCD      
0000408C  52AE 000C 5437          addq.l    #1,12(A6)
00004090  6026      5438          bra.s     vsprintf_7
                    5439   vsprintf_12:
00004092  1D7C 0001 5440          move.b    #1,-50(A6)
00004096  FFCE      
00004098  52AE 000C 5441          addq.l    #1,12(A6)
0000409C  601A      5442          bra.s     vsprintf_7
                    5443   vsprintf_13:
0000409E  1D7C 0001 5444          move.b    #1,-49(A6)
000040A2  FFCF      
000040A4  52AE 000C 5445          addq.l    #1,12(A6)
000040A8  600E      5446          bra.s     vsprintf_7
                    5447   vsprintf_14:
000040AA  1D7C 0001 5448          move.b    #1,-48(A6)
000040AE  FFD0      
000040B0  52AE 000C 5449          addq.l    #1,12(A6)
000040B4  6002      5450          bra.s     vsprintf_7
                    5451   vsprintf_9:
000040B6  6002      5452          bra.s     vsprintf_8
                    5453   vsprintf_7:
000040B8  6096      5454          bra       vsprintf_6
                    5455   vsprintf_8:
000040BA  206E 000C 5456          move.l    12(A6),A0
000040BE  1010      5457          move.b    (A0),D0
000040C0  4880      5458          ext.w     D0
000040C2  48C0      5459          ext.l     D0
000040C4  0C80 0000 5460          cmp.l     #48,D0
000040C8  0030      
000040CA  660A      5461          bne.s     vsprintf_16
000040CC  52AE 000C 5462          addq.l    #1,12(A6)
000040D0  1D7C 0001 5463          move.b    #1,-46(A6)
000040D4  FFD2      
                    5464   vsprintf_16:
000040D6  486E 0010 5465          pea       16(A6)
000040DA  486E 000C 5466          pea       12(A6)
000040DE  6100 FE6E 5467          bsr       @vsprintf_getval
000040E2  504F      5468          addq.w    #8,A7
000040E4  2A40      5469          move.l    D0,A5
000040E6  206E 000C 5470          move.l    12(A6),A0
000040EA  1010      5471          move.b    (A0),D0
000040EC  4880      5472          ext.w     D0
000040EE  48C0      5473          ext.l     D0
000040F0  0C80 0000 5474          cmp.l     #46,D0
000040F4  002E      
000040F6  6614      5475          bne.s     vsprintf_18
000040F8  52AE 000C 5476          addq.l    #1,12(A6)
000040FC  486E 0010 5477          pea       16(A6)
00004100  486E 000C 5478          pea       12(A6)
00004104  6100 FE48 5479          bsr       @vsprintf_getval
00004108  504F      5480          addq.w    #8,A7
0000410A  2A00      5481          move.l    D0,D5
                    5482   vsprintf_18:
0000410C  206E 000C 5483          move.l    12(A6),A0
00004110  1010      5484          move.b    (A0),D0
00004112  4880      5485          ext.w     D0
00004114  48C0      5486          ext.l     D0
00004116  0C80 0000 5487          cmp.l     #108,D0
0000411A  006C      
0000411C  660A      5488          bne.s     vsprintf_20
0000411E  52AE 000C 5489          addq.l    #1,12(A6)
00004122  1D7C 0001 5490          move.b    #1,-45(A6)
00004126  FFD3      
                    5491   vsprintf_20:
00004128  206E 000C 5492          move.l    12(A6),A0
0000412C  1010      5493          move.b    (A0),D0
0000412E  4880      5494          ext.w     D0
00004130  48C0      5495          ext.l     D0
00004132  0C80 0000 5496          cmp.l     #111,D0
00004136  006F      
00004138  6700 00D4 5497          beq       vsprintf_27
0000413C  6E34      5498          bgt.s     vsprintf_33
0000413E  0C80 0000 5499          cmp.l     #100,D0
00004142  0064      
00004144  6700 0054 5500          beq       vsprintf_24
00004148  6E1C      5501          bgt.s     vsprintf_34
0000414A  0C80 0000 5502          cmp.l     #99,D0
0000414E  0063      
00004150  6700 012C 5503          beq       vsprintf_30
00004154  6E00 016A 5504          bgt       vsprintf_22
00004158  0C80 0000 5505          cmp.l     #88,D0
0000415C  0058      
0000415E  6700 00E6 5506          beq       vsprintf_28
00004162  6000 015C 5507          bra       vsprintf_22
                    5508   vsprintf_34:
00004166  0C80 0000 5509          cmp.l     #105,D0
0000416A  0069      
0000416C  672C      5510          beq.s     vsprintf_24
0000416E  6000 0150 5511          bra       vsprintf_22
                    5512   vsprintf_33:
00004172  0C80 0000 5513          cmp.l     #117,D0
00004176  0075      
00004178  6700 005C 5514          beq       vsprintf_26
0000417C  6E0E      5515          bgt.s     vsprintf_35
0000417E  0C80 0000 5516          cmp.l     #115,D0
00004182  0073      
00004184  6700 011C 5517          beq       vsprintf_31
00004188  6000 0136 5518          bra       vsprintf_22
                    5519   vsprintf_35:
0000418C  0C80 0000 5520          cmp.l     #120,D0
00004190  0078      
00004192  6700 00B2 5521          beq       vsprintf_28
00004196  6000 0128 5522          bra       vsprintf_22
                    5523   vsprintf_24:
0000419A  4A2E FFD3 5524          tst.b     -45(A6)
0000419E  671A      5525          beq.s     vsprintf_36
000041A0  4878 000A 5526          pea       10
000041A4  2F03      5527          move.l    D3,-(A7)
000041A6  206E 0010 5528          move.l    16(A6),A0
000041AA  58AE 0010 5529          addq.l    #4,16(A6)
000041AE  2F10      5530          move.l    (A0),-(A7)
000041B0  6100 04F8 5531          bsr       _ltoa
000041B4  DEFC 000C 5532          add.w     #12,A7
000041B8  6018      5533          bra.s     vsprintf_37
                    5534   vsprintf_36:
000041BA  4878 000A 5535          pea       10
000041BE  2F03      5536          move.l    D3,-(A7)
000041C0  206E 0010 5537          move.l    16(A6),A0
000041C4  58AE 0010 5538          addq.l    #4,16(A6)
000041C8  2F10      5539          move.l    (A0),-(A7)
000041CA  6100 04DE 5540          bsr       _ltoa
000041CE  DEFC 000C 5541          add.w     #12,A7
                    5542   vsprintf_37:
000041D2  6000 00FA 5543          bra       vsprintf_23
                    5544   vsprintf_26:
000041D6  4A2E FFD3 5545          tst.b     -45(A6)
000041DA  6718      5546          beq.s     vsprintf_38
000041DC  4878 000A 5547          pea       10
000041E0  2F03      5548          move.l    D3,-(A7)
000041E2  206E 0010 5549          move.l    16(A6),A0
000041E6  58AE 0010 5550          addq.l    #4,16(A6)
000041EA  2F10      5551          move.l    (A0),-(A7)
000041EC  4E94      5552          jsr       (A4)
000041EE  DEFC 000C 5553          add.w     #12,A7
000041F2  6016      5554          bra.s     vsprintf_39
                    5555   vsprintf_38:
000041F4  4878 000A 5556          pea       10
000041F8  2F03      5557          move.l    D3,-(A7)
000041FA  206E 0010 5558          move.l    16(A6),A0
000041FE  58AE 0010 5559          addq.l    #4,16(A6)
00004202  2F10      5560          move.l    (A0),-(A7)
00004204  4E94      5561          jsr       (A4)
00004206  DEFC 000C 5562          add.w     #12,A7
                    5563   vsprintf_39:
0000420A  6000 00C2 5564          bra       vsprintf_23
                    5565   vsprintf_27:
0000420E  4A2E FFD3 5566          tst.b     -45(A6)
00004212  6718      5567          beq.s     vsprintf_40
00004214  4878 0008 5568          pea       8
00004218  2F03      5569          move.l    D3,-(A7)
0000421A  206E 0010 5570          move.l    16(A6),A0
0000421E  58AE 0010 5571          addq.l    #4,16(A6)
00004222  2F10      5572          move.l    (A0),-(A7)
00004224  4E94      5573          jsr       (A4)
00004226  DEFC 000C 5574          add.w     #12,A7
0000422A  6016      5575          bra.s     vsprintf_41
                    5576   vsprintf_40:
0000422C  4878 0008 5577          pea       8
00004230  2F03      5578          move.l    D3,-(A7)
00004232  206E 0010 5579          move.l    16(A6),A0
00004236  58AE 0010 5580          addq.l    #4,16(A6)
0000423A  2F10      5581          move.l    (A0),-(A7)
0000423C  4E94      5582          jsr       (A4)
0000423E  DEFC 000C 5583          add.w     #12,A7
                    5584   vsprintf_41:
00004242  6000 008A 5585          bra       vsprintf_23
                    5586   vsprintf_28:
00004246  4A2E FFD3 5587          tst.b     -45(A6)
0000424A  6718      5588          beq.s     vsprintf_42
0000424C  4878 0010 5589          pea       16
00004250  2F03      5590          move.l    D3,-(A7)
00004252  206E 0010 5591          move.l    16(A6),A0
00004256  58AE 0010 5592          addq.l    #4,16(A6)
0000425A  2F10      5593          move.l    (A0),-(A7)
0000425C  4E94      5594          jsr       (A4)
0000425E  DEFC 000C 5595          add.w     #12,A7
00004262  6016      5596          bra.s     vsprintf_43
                    5597   vsprintf_42:
00004264  4878 0010 5598          pea       16
00004268  2F03      5599          move.l    D3,-(A7)
0000426A  206E 0010 5600          move.l    16(A6),A0
0000426E  58AE 0010 5601          addq.l    #4,16(A6)
00004272  2F10      5602          move.l    (A0),-(A7)
00004274  4E94      5603          jsr       (A4)
00004276  DEFC 000C 5604          add.w     #12,A7
                    5605   vsprintf_43:
0000427A  6000 0052 5606          bra       vsprintf_23
                    5607   vsprintf_30:
0000427E  206E 0010 5608          move.l    16(A6),A0
00004282  58AE 0010 5609          addq.l    #4,16(A6)
00004286  2010      5610          move.l    (A0),D0
00004288  2042      5611          move.l    D2,A0
0000428A  5282      5612          addq.l    #1,D2
0000428C  1080      5613          move.b    D0,(A0)
0000428E  2042      5614          move.l    D2,A0
00004290  4210      5615          clr.b     (A0)
00004292  200D      5616          move.l    A5,D0
00004294  6704      5617          beq.s     vsprintf_44
00004296  200D      5618          move.l    A5,D0
00004298  6002      5619          bra.s     vsprintf_45
                    5620   vsprintf_44:
0000429A  7001      5621          moveq     #1,D0
                    5622   vsprintf_45:
0000429C  2A00      5623          move.l    D0,D5
0000429E  6000 002E 5624          bra       vsprintf_23
                    5625   vsprintf_31:
000042A2  206E 0010 5626          move.l    16(A6),A0
000042A6  58AE 0010 5627          addq.l    #4,16(A6)
000042AA  2610      5628          move.l    (A0),D3
000042AC  0C85 FFFF 5629          cmp.l     #-1,D5
000042B0  FFFF      
000042B2  660A      5630          bne.s     vsprintf_46
000042B4  2F03      5631          move.l    D3,-(A7)
000042B6  6100 04D8 5632          bsr       _strlen
000042BA  584F      5633          addq.w    #4,A7
000042BC  2A00      5634          move.l    D0,D5
                    5635   vsprintf_46:
000042BE  600E      5636          bra.s     vsprintf_23
                    5637   vsprintf_22:
000042C0  206E 000C 5638          move.l    12(A6),A0
000042C4  2242      5639          move.l    D2,A1
000042C6  5282      5640          addq.l    #1,D2
000042C8  1290      5641          move.b    (A0),(A1)
000042CA  2042      5642          move.l    D2,A0
000042CC  4210      5643          clr.b     (A0)
                    5644   vsprintf_23:
000042CE  2F03      5645          move.l    D3,-(A7)
000042D0  6100 04BE 5646          bsr       _strlen
000042D4  584F      5647          addq.w    #4,A7
000042D6  1800      5648          move.b    D0,D4
000042D8  206E 000C 5649          move.l    12(A6),A0
000042DC  1010      5650          move.b    (A0),D0
000042DE  4880      5651          ext.w     D0
000042E0  48C0      5652          ext.l     D0
000042E2  0C80 0000 5653          cmp.l     #115,D0
000042E6  0073      
000042E8  6618      5654          bne.s     vsprintf_48
000042EA  0C85 0000 5655          cmp.l     #0,D5
000042EE  0000      
000042F0  6D10      5656          blt.s     vsprintf_48
000042F2  4884      5657          ext.w     D4
000042F4  48C4      5658          ext.l     D4
000042F6  B885      5659          cmp.l     D5,D4
000042F8  6F04      5660          ble.s     vsprintf_50
000042FA  1005      5661          move.b    D5,D0
000042FC  6002      5662          bra.s     vsprintf_51
                    5663   vsprintf_50:
000042FE  1004      5664          move.b    D4,D0
                    5665   vsprintf_51:
00004300  1800      5666          move.b    D0,D4
                    5667   vsprintf_48:
00004302  206E 000C 5668          move.l    12(A6),A0
00004306  1010      5669          move.b    (A0),D0
00004308  4880      5670          ext.w     D0
0000430A  48C0      5671          ext.l     D0
0000430C  0C80 0000 5672          cmp.l     #88,D0
00004310  0058      
00004312  6600 0026 5673          bne       vsprintf_56
00004316  41EE FFDC 5674          lea       -36(A6),A0
0000431A  2408      5675          move.l    A0,D2
                    5676   vsprintf_54:
0000431C  2042      5677          move.l    D2,A0
0000431E  4A10      5678          tst.b     (A0)
00004320  6718      5679          beq.s     vsprintf_56
00004322  2042      5680          move.l    D2,A0
00004324  1210      5681          move.b    (A0),D1
00004326  4881      5682          ext.w     D1
00004328  48C1      5683          ext.l     D1
0000432A  2F01      5684          move.l    D1,-(A7)
0000432C  6100 FAD2 5685          bsr       _toupper
00004330  584F      5686          addq.w    #4,A7
00004332  2042      5687          move.l    D2,A0
00004334  1080      5688          move.b    D0,(A0)
00004336  5282      5689          addq.l    #1,D2
00004338  60E2      5690          bra       vsprintf_54
                    5691   vsprintf_56:
0000433A  7E00      5692          moveq     #0,D7
0000433C  41EE FFD4 5693          lea       -44(A6),A0
00004340  2408      5694          move.l    A0,D2
00004342  206E 000C 5695          move.l    12(A6),A0
00004346  1010      5696          move.b    (A0),D0
00004348  4880      5697          ext.w     D0
0000434A  48C0      5698          ext.l     D0
0000434C  0C80 0000 5699          cmp.l     #100,D0
00004350  0064      
00004352  6714      5700          beq.s     vsprintf_59
00004354  206E 000C 5701          move.l    12(A6),A0
00004358  1010      5702          move.b    (A0),D0
0000435A  4880      5703          ext.w     D0
0000435C  48C0      5704          ext.l     D0
0000435E  0C80 0000 5705          cmp.l     #105,D0
00004362  0069      
00004364  6600 0076 5706          bne       vsprintf_65
                    5707   vsprintf_59:
00004368  4A2E FFCE 5708          tst.b     -50(A6)
0000436C  6612      5709          bne.s     vsprintf_62
0000436E  2043      5710          move.l    D3,A0
00004370  1010      5711          move.b    (A0),D0
00004372  4880      5712          ext.w     D0
00004374  48C0      5713          ext.l     D0
00004376  0C80 0000 5714          cmp.l     #45,D0
0000437A  002D      
0000437C  6600 002E 5715          bne       vsprintf_60
                    5716   vsprintf_62:
00004380  2043      5717          move.l    D3,A0
00004382  1010      5718          move.b    (A0),D0
00004384  4880      5719          ext.w     D0
00004386  48C0      5720          ext.l     D0
00004388  0C80 0000 5721          cmp.l     #45,D0
0000438C  002D      
0000438E  660E      5722          bne.s     vsprintf_63
00004390  2043      5723          move.l    D3,A0
00004392  5283      5724          addq.l    #1,D3
00004394  2242      5725          move.l    D2,A1
00004396  5282      5726          addq.l    #1,D2
00004398  1290      5727          move.b    (A0),(A1)
0000439A  5304      5728          subq.b    #1,D4
0000439C  6008      5729          bra.s     vsprintf_64
                    5730   vsprintf_63:
0000439E  2042      5731          move.l    D2,A0
000043A0  5282      5732          addq.l    #1,D2
000043A2  10BC 002B 5733          move.b    #43,(A0)
                    5734   vsprintf_64:
000043A6  5287      5735          addq.l    #1,D7
000043A8  6000 0032 5736          bra       vsprintf_65
                    5737   vsprintf_60:
000043AC  4A2E FFCF 5738          tst.b     -49(A6)
000043B0  6700 002A 5739          beq       vsprintf_65
000043B4  2043      5740          move.l    D3,A0
000043B6  1010      5741          move.b    (A0),D0
000043B8  4880      5742          ext.w     D0
000043BA  48C0      5743          ext.l     D0
000043BC  0C80 0000 5744          cmp.l     #45,D0
000043C0  002D      
000043C2  660E      5745          bne.s     vsprintf_67
000043C4  2043      5746          move.l    D3,A0
000043C6  5283      5747          addq.l    #1,D3
000043C8  2242      5748          move.l    D2,A1
000043CA  5282      5749          addq.l    #1,D2
000043CC  1290      5750          move.b    (A0),(A1)
000043CE  5304      5751          subq.b    #1,D4
000043D0  6008      5752          bra.s     vsprintf_68
                    5753   vsprintf_67:
000043D2  2042      5754          move.l    D2,A0
000043D4  5282      5755          addq.l    #1,D2
000043D6  10BC 0020 5756          move.b    #32,(A0)
                    5757   vsprintf_68:
000043DA  5287      5758          addq.l    #1,D7
                    5759   vsprintf_65:
000043DC  4A2E FFD0 5760          tst.b     -48(A6)
000043E0  6700 0066 5761          beq       vsprintf_77
000043E4  206E 000C 5762          move.l    12(A6),A0
000043E8  1010      5763          move.b    (A0),D0
000043EA  4880      5764          ext.w     D0
000043EC  48C0      5765          ext.l     D0
000043EE  0C80 0000 5766          cmp.l     #111,D0
000043F2  006F      
000043F4  671A      5767          beq.s     vsprintf_73
000043F6  6E0C      5768          bgt.s     vsprintf_76
000043F8  0C80 0000 5769          cmp.l     #88,D0
000043FC  0058      
000043FE  6710      5770          beq.s     vsprintf_73
00004400  6000 0046 5771          bra       vsprintf_77
                    5772   vsprintf_76:
00004404  0C80 0000 5773          cmp.l     #120,D0
00004408  0078      
0000440A  6704      5774          beq.s     vsprintf_73
0000440C  6000 003A 5775          bra       vsprintf_77
                    5776   vsprintf_73:
00004410  2042      5777          move.l    D2,A0
00004412  5282      5778          addq.l    #1,D2
00004414  10BC 0030 5779          move.b    #48,(A0)
00004418  5287      5780          addq.l    #1,D7
0000441A  206E 000C 5781          move.l    12(A6),A0
0000441E  1010      5782          move.b    (A0),D0
00004420  4880      5783          ext.w     D0
00004422  48C0      5784          ext.l     D0
00004424  0C80 0000 5785          cmp.l     #120,D0
00004428  0078      
0000442A  6712      5786          beq.s     vsprintf_79
0000442C  206E 000C 5787          move.l    12(A6),A0
00004430  1010      5788          move.b    (A0),D0
00004432  4880      5789          ext.w     D0
00004434  48C0      5790          ext.l     D0
00004436  0C80 0000 5791          cmp.l     #88,D0
0000443A  0058      
0000443C  660A      5792          bne.s     vsprintf_77
                    5793   vsprintf_79:
0000443E  2042      5794          move.l    D2,A0
00004440  5282      5795          addq.l    #1,D2
00004442  10BC 0078 5796          move.b    #120,(A0)
00004446  5287      5797          addq.l    #1,D7
                    5798   vsprintf_77:
00004448  2042      5799          move.l    D2,A0
0000444A  4210      5800          clr.b     (A0)
0000444C  206E 000C 5801          move.l    12(A6),A0
00004450  1010      5802          move.b    (A0),D0
00004452  4880      5803          ext.w     D0
00004454  48C0      5804          ext.l     D0
00004456  0C80 0000 5805          cmp.l     #105,D0
0000445A  0069      
0000445C  6700 0076 5806          beq       vsprintf_82
00004460  6E42      5807          bgt.s     vsprintf_93
00004462  0C80 0000 5808          cmp.l     #99,D0
00004466  0063      
00004468  6700 0084 5809          beq       vsprintf_96
0000446C  6E1C      5810          bgt.s     vsprintf_94
0000446E  0C80 0000 5811          cmp.l     #88,D0
00004472  0058      
00004474  6700 005E 5812          beq       vsprintf_82
00004478  6E00 0184 5813          bgt       vsprintf_80
0000447C  0C80 0000 5814          cmp.l     #69,D0
00004480  0045      
00004482  6700 0050 5815          beq       vsprintf_82
00004486  6000 0176 5816          bra       vsprintf_80
                    5817   vsprintf_94:
0000448A  0C80 0000 5818          cmp.l     #101,D0
0000448E  0065      
00004490  6700 0042 5819          beq       vsprintf_82
00004494  6E00 0168 5820          bgt       vsprintf_80
00004498  0C80 0000 5821          cmp.l     #100,D0
0000449C  0064      
0000449E  6734      5822          beq.s     vsprintf_82
000044A0  6000 015C 5823          bra       vsprintf_80
                    5824   vsprintf_93:
000044A4  0C80 0000 5825          cmp.l     #117,D0
000044A8  0075      
000044AA  6728      5826          beq.s     vsprintf_82
000044AC  6E1A      5827          bgt.s     vsprintf_95
000044AE  0C80 0000 5828          cmp.l     #115,D0
000044B2  0073      
000044B4  6700 0038 5829          beq       vsprintf_96
000044B8  6E00 0144 5830          bgt       vsprintf_80
000044BC  0C80 0000 5831          cmp.l     #111,D0
000044C0  006F      
000044C2  6710      5832          beq.s     vsprintf_82
000044C4  6000 0138 5833          bra       vsprintf_80
                    5834   vsprintf_95:
000044C8  0C80 0000 5835          cmp.l     #120,D0
000044CC  0078      
000044CE  6704      5836          beq.s     vsprintf_82
000044D0  6000 012C 5837          bra       vsprintf_80
                    5838   vsprintf_82:
000044D4  4A2E FFD2 5839          tst.b     -46(A6)
000044D8  6714      5840          beq.s     vsprintf_96
000044DA  4A2E FFCD 5841          tst.b     -51(A6)
000044DE  660E      5842          bne.s     vsprintf_96
000044E0  200D      5843          move.l    A5,D0
000044E2  9087      5844          sub.l     D7,D0
000044E4  4884      5845          ext.w     D4
000044E6  48C4      5846          ext.l     D4
000044E8  9084      5847          sub.l     D4,D0
000044EA  2D40 FFFC 5848          move.l    D0,-4(A6)
                    5849   vsprintf_96:
000044EE  202E FFFC 5850          move.l    -4(A6),D0
000044F2  0C80 0000 5851          cmp.l     #0,D0
000044F6  0000      
000044F8  6C04      5852          bge.s     vsprintf_98
000044FA  42AE FFFC 5853          clr.l     -4(A6)
                    5854   vsprintf_98:
000044FE  4A2E FFCD 5855          tst.b     -51(A6)
00004502  6600 0030 5856          bne       vsprintf_104
00004506  4884      5857          ext.w     D4
00004508  48C4      5858          ext.l     D4
0000450A  2004      5859          move.l    D4,D0
0000450C  D0AE FFFC 5860          add.l     -4(A6),D0
00004510  D087      5861          add.l     D7,D0
00004512  1D40 FFD1 5862          move.b    D0,-47(A6)
                    5863   vsprintf_102:
00004516  102E FFD1 5864          move.b    -47(A6),D0
0000451A  4880      5865          ext.w     D0
0000451C  48C0      5866          ext.l     D0
0000451E  220D      5867          move.l    A5,D1
00004520  534D      5868          subq.w    #1,A5
00004522  B081      5869          cmp.l     D1,D0
00004524  6C0E      5870          bge.s     vsprintf_104
00004526  4878 0020 5871          pea       32
0000452A  2F0A      5872          move.l    A2,-(A7)
0000452C  4E93      5873          jsr       (A3)
0000452E  504F      5874          addq.w    #8,A7
00004530  5286      5875          addq.l    #1,D6
00004532  60E2      5876          bra       vsprintf_102
                    5877   vsprintf_104:
00004534  41EE FFD4 5878          lea       -44(A6),A0
00004538  2408      5879          move.l    A0,D2
                    5880   vsprintf_105:
0000453A  2042      5881          move.l    D2,A0
0000453C  4A10      5882          tst.b     (A0)
0000453E  6716      5883          beq.s     vsprintf_107
00004540  2042      5884          move.l    D2,A0
00004542  5282      5885          addq.l    #1,D2
00004544  1210      5886          move.b    (A0),D1
00004546  4881      5887          ext.w     D1
00004548  48C1      5888          ext.l     D1
0000454A  2F01      5889          move.l    D1,-(A7)
0000454C  2F0A      5890          move.l    A2,-(A7)
0000454E  4E93      5891          jsr       (A3)
00004550  504F      5892          addq.w    #8,A7
00004552  5286      5893          addq.l    #1,D6
00004554  60E4      5894          bra       vsprintf_105
                    5895   vsprintf_107:
00004556  202E FFFC 5896          move.l    -4(A6),D0
0000455A  1D40 FFD1 5897          move.b    D0,-47(A6)
                    5898   vsprintf_108:
0000455E  102E FFD1 5899          move.b    -47(A6),D0
00004562  532E FFD1 5900          subq.b    #1,-47(A6)
00004566  4A00      5901          tst.b     D0
00004568  670E      5902          beq.s     vsprintf_110
0000456A  4878 0030 5903          pea       48
0000456E  2F0A      5904          move.l    A2,-(A7)
00004570  4E93      5905          jsr       (A3)
00004572  504F      5906          addq.w    #8,A7
00004574  5286      5907          addq.l    #1,D6
00004576  60E6      5908          bra       vsprintf_108
                    5909   vsprintf_110:
00004578  2043      5910          move.l    D3,A0
0000457A  4A10      5911          tst.b     (A0)
0000457C  6700 0048 5912          beq       vsprintf_113
00004580  206E 000C 5913          move.l    12(A6),A0
00004584  1010      5914          move.b    (A0),D0
00004586  4880      5915          ext.w     D0
00004588  48C0      5916          ext.l     D0
0000458A  0C80 0000 5917          cmp.l     #115,D0
0000458E  0073      
00004590  670C      5918          beq.s     vsprintf_116
00004592  6E18      5919          bgt.s     vsprintf_119
00004594  0C80 0000 5920          cmp.l     #99,D0
00004598  0063      
0000459A  6702      5921          beq.s     vsprintf_116
0000459C  600E      5922          bra.s     vsprintf_119
                    5923   vsprintf_116:
0000459E  2005      5924          move.l    D5,D0
000045A0  5385      5925          subq.l    #1,D5
000045A2  0C80 0000 5926          cmp.l     #0,D0
000045A6  0000      
000045A8  6E02      5927          bgt.s     vsprintf_119
000045AA  6016      5928          bra.s     vsprintf_115
                    5929   vsprintf_119:
000045AC  2043      5930          move.l    D3,A0
000045AE  5283      5931          addq.l    #1,D3
000045B0  1210      5932          move.b    (A0),D1
000045B2  4881      5933          ext.w     D1
000045B4  48C1      5934          ext.l     D1
000045B6  2F01      5935          move.l    D1,-(A7)
000045B8  2F0A      5936          move.l    A2,-(A7)
000045BA  4E93      5937          jsr       (A3)
000045BC  504F      5938          addq.w    #8,A7
000045BE  5286      5939          addq.l    #1,D6
000045C0  6002      5940          bra.s     vsprintf_112
                    5941   vsprintf_115:
000045C2  6002      5942          bra.s     vsprintf_113
                    5943   vsprintf_112:
000045C4  60B2      5944          bra       vsprintf_110
                    5945   vsprintf_113:
000045C6  4A2E FFCD 5946          tst.b     -51(A6)
000045CA  6700 0030 5947          beq       vsprintf_125
000045CE  4884      5948          ext.w     D4
000045D0  48C4      5949          ext.l     D4
000045D2  2004      5950          move.l    D4,D0
000045D4  D0AE FFFC 5951          add.l     -4(A6),D0
000045D8  D087      5952          add.l     D7,D0
000045DA  1D40 FFD1 5953          move.b    D0,-47(A6)
                    5954   vsprintf_123:
000045DE  102E FFD1 5955          move.b    -47(A6),D0
000045E2  4880      5956          ext.w     D0
000045E4  48C0      5957          ext.l     D0
000045E6  220D      5958          move.l    A5,D1
000045E8  534D      5959          subq.w    #1,A5
000045EA  B081      5960          cmp.l     D1,D0
000045EC  6C0E      5961          bge.s     vsprintf_125
000045EE  4878 0020 5962          pea       32
000045F2  2F0A      5963          move.l    A2,-(A7)
000045F4  4E93      5964          jsr       (A3)
000045F6  504F      5965          addq.w    #8,A7
000045F8  5386      5966          subq.l    #1,D6
000045FA  60E2      5967          bra       vsprintf_123
                    5968   vsprintf_125:
000045FC  6014      5969          bra.s     vsprintf_81
                    5970   vsprintf_80:
000045FE  206E 000C 5971          move.l    12(A6),A0
00004602  1210      5972          move.b    (A0),D1
00004604  4881      5973          ext.w     D1
00004606  48C1      5974          ext.l     D1
00004608  2F01      5975          move.l    D1,-(A7)
0000460A  2F0A      5976          move.l    A2,-(A7)
0000460C  4E93      5977          jsr       (A3)
0000460E  504F      5978          addq.w    #8,A7
00004610  5286      5979          addq.l    #1,D6
                    5980   vsprintf_81:
00004612  52AE 000C 5981          addq.l    #1,12(A6)
                    5982   vsprintf_2:
00004616  6000 F9D6 5983          bra       vsprintf_1
                    5984   vsprintf_3:
0000461A  4A92      5985          tst.l     (A2)
0000461C  6710      5986          beq.s     vsprintf_126
0000461E  4201      5987          clr.b     D1
00004620  C2BC 0000 5988          and.l     #255,D1
00004624  00FF      
00004626  2F01      5989          move.l    D1,-(A7)
00004628  2F0A      5990          move.l    A2,-(A7)
0000462A  4E93      5991          jsr       (A3)
0000462C  504F      5992          addq.w    #8,A7
                    5993   vsprintf_126:
0000462E  2006      5994          move.l    D6,D0
00004630  4CDF 3CFC 5995          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004634  4E5E      5996          unlk      A6
00004636  4E75      5997          rts
                    5998   @itoa_convert:
00004638  4E56 0000 5999          link      A6,#0
0000463C  48E7 3C00 6000          movem.l   D2/D3/D4/D5,-(A7)
00004640  242E 0008 6001          move.l    8(A6),D2
00004644  262E 0010 6002          move.l    16(A6),D3
00004648  2A2E 000C 6003          move.l    12(A6),D5
0000464C  2F05      6004          move.l    D5,-(A7)
0000464E  2F03      6005          move.l    D3,-(A7)
00004650  6100 0190 6006          bsr       ULDIV
00004654  202F 0004 6007          move.l    4(A7),D0
00004658  504F      6008          addq.w    #8,A7
0000465A  2800      6009          move.l    D0,D4
0000465C  BA83      6010          cmp.l     D3,D5
0000465E  651A      6011          blo.s     @itoa_convert_1
00004660  2F03      6012          move.l    D3,-(A7)
00004662  2F05      6013          move.l    D5,-(A7)
00004664  2F03      6014          move.l    D3,-(A7)
00004666  6100 017A 6015          bsr       ULDIV
0000466A  2217      6016          move.l    (A7),D1
0000466C  504F      6017          addq.w    #8,A7
0000466E  2F01      6018          move.l    D1,-(A7)
00004670  2F02      6019          move.l    D2,-(A7)
00004672  61C4      6020          bsr       @itoa_convert
00004674  DEFC 000C 6021          add.w     #12,A7
00004678  2400      6022          move.l    D0,D2
                    6023   @itoa_convert_1:
0000467A  0C84 0000 6024          cmp.l     #9,D4
0000467E  0009      
00004680  6E0A      6025          bgt.s     @itoa_convert_3
00004682  2004      6026          move.l    D4,D0
00004684  0680 0000 6027          add.l     #48,D0
00004688  0030      
0000468A  600E      6028          bra.s     @itoa_convert_4
                    6029   @itoa_convert_3:
0000468C  2004      6030          move.l    D4,D0
0000468E  0680 0000 6031          add.l     #97,D0
00004692  0061      
00004694  0480 0000 6032          sub.l     #10,D0
00004698  000A      
                    6033   @itoa_convert_4:
0000469A  2042      6034          move.l    D2,A0
0000469C  1080      6035          move.b    D0,(A0)
0000469E  2002      6036          move.l    D2,D0
000046A0  5280      6037          addq.l    #1,D0
000046A2  4CDF 003C 6038          movem.l   (A7)+,D2/D3/D4/D5
000046A6  4E5E      6039          unlk      A6
000046A8  4E75      6040          rts
                    6041   _ltoa:
000046AA  4E56 0000 6042          link      A6,#0
000046AE  48E7 3C00 6043          movem.l   D2/D3/D4/D5,-(A7)
000046B2  242E 0008 6044          move.l    8(A6),D2
000046B6  262E 000C 6045          move.l    12(A6),D3
000046BA  2A2E 0010 6046          move.l    16(A6),D5
000046BE  2803      6047          move.l    D3,D4
000046C0  0C85 0000 6048          cmp.l     #2,D5
000046C4  0002      
000046C6  6D08      6049          blt.s     ltoa_3
000046C8  0C85 0000 6050          cmp.l     #36,D5
000046CC  0024      
000046CE  6F06      6051          ble.s     ltoa_1
                    6052   ltoa_3:
000046D0  2003      6053          move.l    D3,D0
000046D2  6000 0052 6054          bra       ltoa_4
                    6055   ltoa_1:
000046D6  0C85 0000 6056          cmp.l     #10,D5
000046DA  000A      
000046DC  6600 0032 6057          bne       ltoa_5
000046E0  0C82 0000 6058          cmp.l     #0,D2
000046E4  0000      
000046E6  6C28      6059          bge.s     ltoa_5
000046E8  2002      6060          move.l    D2,D0
000046EA  4480      6061          neg.l     D0
000046EC  2400      6062          move.l    D0,D2
000046EE  0C82 0000 6063          cmp.l     #0,D2
000046F2  0000      
000046F4  6C12      6064          bge.s     ltoa_7
000046F6  4879 0000 6065          pea       @itoa_1
000046FA  4BEC      
000046FC  2F03      6066          move.l    D3,-(A7)
000046FE  6100 00D2 6067          bsr       _strcpy
00004702  504F      6068          addq.w    #8,A7
00004704  2003      6069          move.l    D3,D0
00004706  601E      6070          bra.s     ltoa_4
                    6071   ltoa_7:
00004708  2044      6072          move.l    D4,A0
0000470A  5284      6073          addq.l    #1,D4
0000470C  10BC 002D 6074          move.b    #45,(A0)
                    6075   ltoa_5:
00004710  2F05      6076          move.l    D5,-(A7)
00004712  2F02      6077          move.l    D2,-(A7)
00004714  2F04      6078          move.l    D4,-(A7)
00004716  6100 FF20 6079          bsr       @itoa_convert
0000471A  DEFC 000C 6080          add.w     #12,A7
0000471E  2800      6081          move.l    D0,D4
00004720  2044      6082          move.l    D4,A0
00004722  4210      6083          clr.b     (A0)
00004724  2003      6084          move.l    D3,D0
                    6085   ltoa_4:
00004726  4CDF 003C 6086          movem.l   (A7)+,D2/D3/D4/D5
0000472A  4E5E      6087          unlk      A6
0000472C  4E75      6088          rts
                    6089   _ultoa:
0000472E  4E56 0000 6090          link      A6,#0
00004732  48E7 3800 6091          movem.l   D2/D3/D4,-(A7)
00004736  262E 0010 6092          move.l    16(A6),D3
0000473A  282E 000C 6093          move.l    12(A6),D4
0000473E  2404      6094          move.l    D4,D2
00004740  0C83 0000 6095          cmp.l     #2,D3
00004744  0002      
00004746  6D08      6096          blt.s     ultoa_3
00004748  0C83 0000 6097          cmp.l     #36,D3
0000474C  0024      
0000474E  6F04      6098          ble.s     ultoa_1
                    6099   ultoa_3:
00004750  2004      6100          move.l    D4,D0
00004752  6018      6101          bra.s     ultoa_4
                    6102   ultoa_1:
00004754  2F03      6103          move.l    D3,-(A7)
00004756  2F2E 0008 6104          move.l    8(A6),-(A7)
0000475A  2F02      6105          move.l    D2,-(A7)
0000475C  6100 FEDA 6106          bsr       @itoa_convert
00004760  DEFC 000C 6107          add.w     #12,A7
00004764  2400      6108          move.l    D0,D2
00004766  2042      6109          move.l    D2,A0
00004768  4210      6110          clr.b     (A0)
0000476A  2004      6111          move.l    D4,D0
                    6112   ultoa_4:
0000476C  4CDF 001C 6113          movem.l   (A7)+,D2/D3/D4
00004770  4E5E      6114          unlk      A6
00004772  4E75      6115          rts
                    6116   _itoa:
00004774  4E56 0000 6117          link      A6,#0
00004778  2F2E 0010 6118          move.l    16(A6),-(A7)
0000477C  2F2E 000C 6119          move.l    12(A6),-(A7)
00004780  2F2E 0008 6120          move.l    8(A6),-(A7)
00004784  6100 FF24 6121          bsr       _ltoa
00004788  DEFC 000C 6122          add.w     #12,A7
0000478C  4E5E      6123          unlk      A6
0000478E  4E75      6124          rts
                    6125   _strlen:
00004790  206F 0004 6126          move.l    (4,A7),A0
00004794  2248      6127          move.l    A0,A1
                    6128   strlen_1:
00004796  4A19      6129          tst.b     (A1)+
00004798  66FC      6130          bne       strlen_1
0000479A  2009      6131          move.l    A1,D0
0000479C  9088      6132          sub.l     A0,D0
0000479E  5380      6133          subq.l    #1,D0
000047A0  4E75      6134          rts
                    6135   _putch:
000047A2  4E56 0000 6136          link      A6,#0
000047A6  48E7 2000 6137          movem.l   D2,-(A7)
000047AA  242E 0008 6138          move.l    8(A6),D2
000047AE  0C82 0000 6139          cmp.l     #10,D2
000047B2  000A      
000047B4  660A      6140          bne.s     putch_1
000047B6  4878 000D 6141          pea       13
000047BA  6100 C154 6142          bsr       __putch
000047BE  584F      6143          addq.w    #4,A7
                    6144   putch_1:
000047C0  2F02      6145          move.l    D2,-(A7)
000047C2  6100 C14C 6146          bsr       __putch
000047C6  584F      6147          addq.w    #4,A7
000047C8  2002      6148          move.l    D2,D0
000047CA  4CDF 0004 6149          movem.l   (A7)+,D2
000047CE  4E5E      6150          unlk      A6
000047D0  4E75      6151          rts
                    6152   _strcpy:
000047D2  206F 0004 6153          move.l    (4,A7),A0
000047D6  226F 0008 6154          move.l    (8,A7),A1
000047DA  2008      6155          move.l    A0,D0
                    6156   strcpy_1:
000047DC  10D9      6157          move.b    (A1)+,(A0)+
000047DE  66FC      6158          bne       strcpy_1
000047E0  4E75      6159          rts
                    6160   ULDIV:
000047E2  4E56 0000 6161          link    A6,#0
000047E6  48E7 C000 6162          movem.l D0/D1,-(A7)
000047EA  222E 0008 6163          move.l  8(A6),D1
000047EE  202E 000C 6164          move.l  12(A6),D0
000047F2  6036      6165          bra.s   ldiv_3
                    6166   LDIV:
000047F4  4E56 0000 6167          link    A6,#0
000047F8  48E7 C000 6168          movem.l D0/D1,-(A7)
000047FC  222E 0008 6169          move.l  8(A6),D1
00004800  202E 000C 6170          move.l  12(A6),D0
00004804  4A80      6171          tst.l   D0
00004806  6A0E      6172          bpl.s   ldiv_1
00004808  4480      6173          neg.l   D0
0000480A  4A81      6174          tst.l   D1
0000480C  6A14      6175          bpl.s   ldiv_2
0000480E  4481      6176          neg.l   D1
00004810  612A      6177          bsr.s   dodiv
00004812  4481      6178          neg.l   D1
00004814  6016      6179          bra.s   ldiv_4
                    6180   ldiv_1:
00004816  4A81      6181          tst.l   D1
00004818  6A10      6182          bpl.s   ldiv_3
0000481A  4481      6183          neg.l   D1
0000481C  611E      6184          bsr.s   dodiv
0000481E  4480      6185          neg.l   D0
00004820  600A      6186          bra.s   ldiv_4
                    6187   ldiv_2:
00004822  6118      6188          bsr.s   dodiv
00004824  4480      6189          neg.l   D0
00004826  4481      6190          neg.l   D1
00004828  6002      6191          bra.s   ldiv_4
                    6192   ldiv_3:
0000482A  6110      6193          bsr.s   dodiv
                    6194   ldiv_4:
0000482C  2D40 0008 6195          move.l  D0,8(A6)
00004830  2D41 000C 6196          move.l  D1,12(A6)
00004834  4CDF 0003 6197          movem.l (A7)+,D0/D1
00004838  4E5E      6198          unlk    A6
0000483A  4E75      6199          rts
                    6200   dodiv:
0000483C  0C81 0000 6201          cmpi.l  #$FFFF,D1
00004840  FFFF      
00004842  6236      6202          bhi.s   dodiv_2
00004844  0C80 0000 6203          cmpi.l  #$FFFF,D0
00004848  FFFF      
0000484A  6210      6204          bhi.s   dodiv_1
0000484C  80C1      6205          divu    D1,D0
0000484E  2200      6206          move.l  D0,D1
00004850  4241      6207          clr.w   D1
00004852  4841      6208          swap    D1
00004854  0280 0000 6209          andi.l  #$FFFF,D0
00004858  FFFF      
0000485A  4E75      6210          rts
                    6211   dodiv_1:
0000485C  48A7 A000 6212          movem.w D0/D2,-(A7)
00004860  4240      6213          clr.w   D0
00004862  4840      6214          swap    D0
00004864  80C1      6215          divu    D1,D0
00004866  3400      6216          move.w  D0,D2
00004868  301F      6217          move.w  (A7)+,D0
0000486A  80C1      6218          divu    D1,D0
0000486C  4840      6219          swap    D0
0000486E  4281      6220          clr.l   D1
00004870  3200      6221          move.w  D0,D1
00004872  3002      6222          move.w  D2,D0
00004874  4840      6223          swap    D0
00004876  341F      6224          move.w  (A7)+,D2
00004878  4E75      6225          rts
                    6226   dodiv_2:
0000487A  48E7 3800 6227          movem.l D2/D3/D4,-(A7)
0000487E  2401      6228          move.l  D1,D2
00004880  4242      6229          clr.w   D2
00004882  4842      6230          swap    D2
00004884  5282      6231          addq.l  #1,D2
00004886  2600      6232          move.l  D0,D3
00004888  2801      6233          move.l  D1,D4
0000488A  2202      6234          move.l  D2,D1
0000488C  61CE      6235          bsr.s   dodiv_1
0000488E  2204      6236          move.l  D4,D1
00004890  82C2      6237          divu    D2,D1
00004892  80C1      6238          divu    D1,D0
00004894  0280 0000 6239          andi.l  #$FFFF,D0
00004898  FFFF      
                    6240   dodiv_3:
0000489A  2204      6241          move.l  D4,D1
0000489C  2404      6242          move.l  D4,D2
0000489E  4842      6243          swap    D2
000048A0  C2C0      6244          mulu    D0,D1
000048A2  C4C0      6245          mulu    D0,D2
000048A4  4842      6246          swap    D2
000048A6  D282      6247          add.l   D2,D1
000048A8  9283      6248          sub.l   D3,D1
000048AA  620A      6249          bhi.s   dodiv_4
000048AC  4481      6250          neg.l   D1
000048AE  B881      6251          cmp.l   D1,D4
000048B0  6208      6252          bhi.s   dodiv_5
000048B2  5280      6253          addq.l  #1,D0
000048B4  60E4      6254          bra.s   dodiv_3
                    6255   dodiv_4:
000048B6  5380      6256          subq.l  #1,D0
000048B8  60E0      6257          bra.s   dodiv_3
                    6258   dodiv_5:
000048BA  4CDF 001C 6259          movem.l (A7)+,D2/D3/D4
000048BE  4E75      6260          rts
                    6261          section   const
                    6262   
                    6263   @m68kde~1_1:
000048C0  0D0A 556E 6264          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
000048C4  6B6E 6F77 
000048C8  6E20 436F 
000048CC  6D        
000048CD  6D61 6E64 6265          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
000048D1  2E2E 2E2E 
000048D5  2E0D 0A00 
                    6266   @m68kde~1_2:
000048DA  0D0A 5072 6267          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
000048DE  6F67 7261 
000048E2  6D20 456E 
000048E6  64        
000048E7  6564 2028 6268          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
000048EB  5452 4150 
000048EF  2023 3135 
000048F3  292E      
000048F5  2E2E 2E00 6269          dc.b      46,46,46,0
                    6270   @m68kde~1_3:
000048FA  0D0A 2D2D 6271          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
000048FE  2D2D 2D2D 
00004902  2D2D 2D2D 
00004906  2D2D 2D   
00004909  2D2D 2D2D 6272          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000490D  2D2D 2D2D 
00004911  2D2D 2D2D 
00004915  2D2D 2D   
00004918  2D2D 2D2D 6273          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000491C  2D2D 2D2D 
00004920  2D2D 2D2D 
00004924  2D2D 2D   
00004927  2D2D 2D2D 6274          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000492B  2D2D 2D2D 
0000492F  2D2D 2D2D 
00004933  2D2D 2D   
00004936  2D2D 2D2D 6275          dc.b      45,45,45,45,45,45,0
0000493A  2D2D 00   
                    6276   @m68kde~1_4:
0000493E  0D0A 2020 6277          dc.b      13,10,32,32,70,105,110,97,108,32,80,114,111
00004942  4669 6E61 
00004946  6C20 5072 
0000494A  6F        
0000494B  6A65 6374 6278          dc.b      106,101,99,116,0
0000494F  00        
                    6279   @m68kde~1_5:
00004950  0D0A 2020 6280          dc.b      13,10,32,32,84,32,32,32,32,45,32,82,117,110
00004954  5420 2020 
00004958  202D 2052 
0000495C  756E      
0000495E  2043 6F73 6281          dc.b      32,67,111,115,109,105,99,32,73,109,112,97,108
00004962  6D69 6320 
00004966  496D 7061 
0000496A  6C        
0000496B  6120 4761 6282          dc.b      97,32,71,97,109,101,0
0000496F  6D65 00   
                    6283   @m68kde~1_6:
00004972  0D0A 2020 6284          dc.b      13,10,32,32,71,32,32,32,32,45,32,82,117,110
00004976  4720 2020 
0000497A  202D 2052 
0000497E  756E      
00004980  2047 7261 6285          dc.b      32,71,114,97,112,104,105,99,115,32,84,101,115
00004984  7068 6963 
00004988  7320 5465 
0000498C  73        
0000498D  7400      6286          dc.b      116,0
                    6287   @m68kde~1_7:
00004990  0D0A 2300 6288          dc.b      13,10,35,0
                    6289   @m68kde~1_8:
00004994  0A52 756E 6290          dc.b      10,82,117,110,110,105,110,103,32,67,111,115
00004998  6E69 6E67 
0000499C  2043 6F73 
000049A0  6D69 6320 6291          dc.b      109,105,99,32,73,109,112,97,108,97,115,32,71
000049A4  496D 7061 
000049A8  6C61 7320 
000049AC  47        
000049AD  616D 650A 6292          dc.b      97,109,101,10,0
000049B1  00        
                    6293   @m68kde~1_9:
000049B2  0A52 756E 6294          dc.b      10,82,117,110,110,105,110,103,32,71,114,97,112
000049B6  6E69 6E67 
000049BA  2047 7261 
000049BE  70        
000049BF  6869 6373 6295          dc.b      104,105,99,115,32,84,101,115,116,10,0
000049C3  2054 6573 
000049C7  740A 00   
                    6296   @m68kde~1_10:
000049CA  0D0A 0D0A 6297          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000049CE  5072 6F67 
000049D2  7261 6D20 
000049D6  41        
000049D7  424F 5254 6298          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
000049DB  2021 2121 
000049DF  2121 210D 
000049E3  0A00      
                    6299   @m68kde~1_11:
000049E6  2573 0D0A 6300          dc.b      37,115,13,10,0
000049EA  00        
                    6301   @m68kde~1_12:
000049EC  0D0A 0D0A 6302          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000049F0  5072 6F67 
000049F4  7261 6D20 
000049F8  41        
000049F9  424F 5254 6303          dc.b      66,79,82,84,32,33,33,33,33,33,0
000049FD  2021 2121 
00004A01  2121 00   
                    6304   @m68kde~1_13:
00004A04  0D0A 556E 6305          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004A08  6861 6E64 
00004A0C  6C65 6420 
00004A10  49        
00004A11  6E74 6572 6306          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004A15  7275 7074 
00004A19  3A20 4952 
00004A1D  5125 6420 6307          dc.b      81,37,100,32,33,33,33,33,33,0
00004A21  2121 2121 
00004A25  2100      
                    6308   @m68kde~1_14:
00004A28  4144 4452 6309          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004A2C  4553 5320 
00004A30  4552 524F 
00004A34  523A 20   
00004A37  3136 206F 6310          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004A3B  7220 3332 
00004A3F  2042 6974 
00004A43  2054      
00004A45  7261 6E73 6311          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004A49  6665 7220 
00004A4D  746F 2F66 
00004A51  726F 6D20 6312          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004A55  616E 204F 
00004A59  4444 2041 
00004A5D  64        
00004A5E  6472 6573 6313          dc.b      100,114,101,115,115,46,46,46,46,0
00004A62  732E 2E2E 
00004A66  2E00      
                    6314   @m68kde~1_15:
00004A68  556E 6861 6315          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004A6C  6E64 6C65 
00004A70  6420 5472 
00004A74  6170 2021 6316          dc.b      97,112,32,33,33,33,33,33,0
00004A78  2121 2121 
00004A7C  00        
                    6317   @m68kde~1_16:
00004A7E  4255 5320 6318          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004A82  4572 726F 
00004A86  7221 00   
                    6319   @m68kde~1_17:
00004A8A  4144 4452 6320          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004A8E  4553 5320 
00004A92  4572 726F 
00004A96  7221      
00004A98  00        6321          dc.b      0
                    6322   @m68kde~1_18:
00004A9A  494C 4C45 6323          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004A9E  4741 4C20 
00004AA2  494E 5354 
00004AA6  5255 43   
00004AA9  5449 4F4E 6324          dc.b      84,73,79,78,0
00004AAD  00        
                    6325   @m68kde~1_19:
00004AAE  4449 5649 6326          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004AB2  4445 2042 
00004AB6  5920 5A45 
00004ABA  524F 00   
                    6327   @m68kde~1_20:
00004ABE  2743 484B 6328          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004AC2  2720 494E 
00004AC6  5354 5255 
00004ACA  4354 49   
00004ACD  4F4E 00   6329          dc.b      79,78,0
                    6330   @m68kde~1_21:
00004AD0  5452 4150 6331          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004AD4  5620 494E 
00004AD8  5354 5255 
00004ADC  4354 49   
00004ADF  4F4E 00   6332          dc.b      79,78,0
                    6333   @m68kde~1_22:
00004AE2  5052 4956 6334          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004AE6  494C 4547 
00004AEA  4520 5649 
00004AEE  4F4C 41   
00004AF1  5449 4F4E 6335          dc.b      84,73,79,78,0
00004AF5  00        
                    6336   @m68kde~1_23:
00004AF6  554E 494E 6337          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004AFA  4954 4941 
00004AFE  4C49 5345 
00004B02  4420 49   
00004B05  5251 00   6338          dc.b      82,81,0
                    6339   @m68kde~1_24:
00004B08  5350 5552 6340          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004B0C  494F 5553 
00004B10  2049 5251 
00004B14  00        
                    6341   @m68kde~1_25:
00004B16  4445 312D 6342          dc.b      68,69,49,45,54,56,107,32,49,53,47,49,49,47,50
00004B1A  3638 6B20 
00004B1E  3135 2F31 
00004B22  312F 32   
00004B25  3032 3420 6343          dc.b      48,50,52,32,49,52,58,52,52,0
00004B29  3134 3A34 
00004B2D  3400      
                    6344   @m68kde~1_26:
00004B30  436F 7079 6345          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00004B34  7269 6768 
00004B38  7420 2843 
00004B3C  2920 504A 6346          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00004B40  2044 6176 
00004B44  6965 7320 
00004B48  3230      
00004B4A  3136 00   6347          dc.b      49,54,0
                    6348   @m68kde~1_27:
00004B4E  5A61 6368 6349          dc.b      90,97,99,104,97,114,105,97,104,32,74,111,115
00004B52  6172 6961 
00004B56  6820 4A6F 
00004B5A  73        
00004B5B  6570 683A 6350          dc.b      101,112,104,58,32,52,53,53,48,48,48,53,53,0
00004B5F  2034 3535 
00004B63  3030 3035 
00004B67  3500      
                    6351   @m68kde~1_28:
00004B6A  0D0A 2573 6352          dc.b      13,10,37,115,0
00004B6E  00        
                    6353   @m68kde~1_29:
00004B70  0D0A 2573 6354          dc.b      13,10,37,115,0
00004B74  00        
                    6355   @m68kde~1_30:
00004B76  0D0A 2573 6356          dc.b      13,10,37,115,0
00004B7A  00        
                    6357   @graphi~1_1:
00004B7C  4845 4C4C 6358          dc.b      72,69,76,76,79,32,87,79,82,76,68,0
00004B80  4F20 574F 
00004B84  524C 4400 
                    6359   @cosmic~1_1:
00004B88  504C 4159 6360          dc.b      80,76,65,89,69,82,32,49,0
00004B8C  4552 2031 
00004B90  00        
                    6361   @cosmic~1_2:
00004B92  202A 2A2A 6362          dc.b      32,42,42,42,42,42,42,42,42,42,42,42,42,42,42
00004B96  2A2A 2A2A 
00004B9A  2A2A 2A2A 
00004B9E  2A2A 2A   
00004BA1  2A20 00   6363          dc.b      42,32,0
                    6364   @cosmic~1_3:
00004BA4  2A2A 2A20 6365          dc.b      42,42,42,32,32,32,32,32,32,32,32,32,32,32,42
00004BA8  2020 2020 
00004BAC  2020 2020 
00004BB0  2020 2A   
00004BB3  2A2A 00   6366          dc.b      42,42,0
                    6367   @cosmic~1_4:
00004BB6  2A2A 2020 6368          dc.b      42,42,32,32,71,65,77,69,32,79,86,69,82,32,32
00004BBA  4741 4D45 
00004BBE  204F 5645 
00004BC2  5220 20   
00004BC5  2A2A 00   6369          dc.b      42,42,0
                    6370   @cosmic~1_5:
00004BC8  2A2A 2A20 6371          dc.b      42,42,42,32,32,32,32,32,32,32,32,32,32,32,42
00004BCC  2020 2020 
00004BD0  2020 2020 
00004BD4  2020 2A   
00004BD7  2A2A 00   6372          dc.b      42,42,0
                    6373   @cosmic~1_6:
00004BDA  202A 2A2A 6374          dc.b      32,42,42,42,42,42,42,42,42,42,42,42,42,42,42
00004BDE  2A2A 2A2A 
00004BE2  2A2A 2A2A 
00004BE6  2A2A 2A   
00004BE9  2A20 00   6375          dc.b      42,32,0
                    6376          section   data
00004BEC            6377                   align
          0000 4BEC 6378   DataStart       equ       *
                    6379   
                    6380   *********************************************************************************************************
                    6381   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    6382   * to ram as part of the CStart routine in this file
                    6383   *********************************************************************************************************
                    6384   
                    6385   @itoa_1:
00004BEC  2D32 3134 6386          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00004BF0  3734 3833 
00004BF4  3634 3800 
                    6387          section   bss
00004BF8            6388                   align
          0000 4BF8 6389   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    6390   
                    6391   *********************************************************************************************************
                    6392   * Section for Uninitialised Data held in ROM as constants
                    6393   *********************************************************************************************************
                    6394   
08030000            6395                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 6396   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    6397   
                    6398   
08030000            6399   bss             org       bss
                    6400   
                    6401   *********************************************************************************************************
                    6402   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    6403   * install the exception handler using the C function InstallExceptionHandler()
                    6404   *********************************************************************************************************
                    6405   
                    6406   
                    6407   
08030000            6408   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            6409   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            6410   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            6411   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            6412   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            6413   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            6414   VCheck           ds.l    1      ditto
0803001C            6415   VTrapV           ds.l    1      ditto
08030020            6416   VPrivilege       ds.l    1      ditto
08030024            6417   VTrace           ds.l    1
08030028            6418   VLine1010emul    ds.l    1
0803002C            6419   VLine1111emul    ds.l    1
08030030            6420   VUnassigned1     ds.l    1
08030034            6421   VUnassigned2     ds.l    1
08030038            6422   VUnassigned3     ds.l    1
0803003C            6423   VUninit_IRQ      ds.l    1
08030040            6424   VUnassigned4     ds.l    1
08030044            6425   VUnassigned5     ds.l    1
08030048            6426   VUnassigned6     ds.l    1
0803004C            6427   VUnassigned7     ds.l    1
08030050            6428   VUnassigned8     ds.l    1
08030054            6429   VUnassigned9     ds.l    1
08030058            6430   VUnassigned10    ds.l    1
0803005C            6431   VUnassigned11    ds.l    1
08030060            6432   VSpuriousIRQ     ds.l    1
                    6433   
                    6434   * Interrupt handlers Vector 25-31
08030064            6435   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            6436   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            6437   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            6438   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            6439   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            6440   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            6441   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6442   
                    6443   * Trap Handler vectors 32-47
08030080            6444   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            6445   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            6446   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            6447   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            6448   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            6449   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            6450   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            6451   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            6452   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            6453   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            6454   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            6455   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            6456   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            6457   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            6458   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            6459   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6460   
                    6461   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    6462   
                    6463   ***********************************************************************************************************
                    6464   * Other Variables
                    6465   ***********************************************************************************************************
                    6466   *__DebugA5       ds.l    1
                    6467   *__UserA5        ds.l    1
                    6468   
                    6469   ***********************************************************************************************************
080300C0            6470   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            6471   __allocp:       ds.l    0       ; start of allocation units
080300C4            6472   __heap:         ds.l    0       ; pointers for malloc functions
                    6473   
                    6474   *__himem:       ds.l    himem            ; highest memory location + 1
                    6475   *__stklen:      ds.l    stklen           ; default stack size
                    6476   
                    6477   *********************************************************************************************************
                    6478   * Section for Heap
                    6479   *********************************************************************************************************
                    6480   
                    6481   _i:
080300C4            6482          ds.b      4
                    6483   _x:
080300C8            6484          ds.b      4
                    6485   _y:
080300CC            6486          ds.b      4
                    6487   _z:
080300D0            6488          ds.b      4
                    6489   _PortA_Count:
080300D4            6490          ds.b      4
                    6491   _Trace:
080300D8            6492          ds.b      4
                    6493   _GoFlag:
080300DC            6494          ds.b      4
                    6495   _Echo:
080300E0            6496          ds.b      4
                    6497   _d0:
080300E4            6498          ds.b      4
                    6499   _d1:
080300E8            6500          ds.b      4
                    6501   _d2:
080300EC            6502          ds.b      4
                    6503   _d3:
080300F0            6504          ds.b      4
                    6505   _d4:
080300F4            6506          ds.b      4
                    6507   _d5:
080300F8            6508          ds.b      4
                    6509   _d6:
080300FC            6510          ds.b      4
                    6511   _d7:
08030100            6512          ds.b      4
                    6513   _a0:
08030104            6514          ds.b      4
                    6515   _a1:
08030108            6516          ds.b      4
                    6517   _a2:
0803010C            6518          ds.b      4
                    6519   _a3:
08030110            6520          ds.b      4
                    6521   _a4:
08030114            6522          ds.b      4
                    6523   _a5:
08030118            6524          ds.b      4
                    6525   _a6:
0803011C            6526          ds.b      4
                    6527   _PC:
08030120            6528          ds.b      4
                    6529   _SSP:
08030124            6530          ds.b      4
                    6531   _USP:
08030128            6532          ds.b      4
                    6533   _SR:
0803012C            6534          ds.b      2
                    6535   _BreakPointAddress:
0803012E            6536          ds.b      32
                    6537   _BreakPointInstruction:
0803014E            6538          ds.b      16
                    6539   _BreakPointSetOrCleared:
0803015E            6540          ds.b      32
                    6541   _InstructionSize:
0803017E            6542          ds.b      4
                    6543   _WatchPointAddress:
08030182            6544          ds.b      32
                    6545   _WatchPointSetOrCleared:
080301A2            6546          ds.b      32
                    6547   _clock_count_ms:
080301C2            6548          ds.b      4
                    6549   _TempString:
080301C6            6550          ds.b      100
                    6551   _graphics_font8x8:
0803022A            6552          ds.b      504
                    6553   _FIRE1:
08030422            6554          ds.b      4
                    6555   _LEFT1:
08030426            6556          ds.b      4
                    6557   _RIGHT1:
0803042A            6558          ds.b      4
                    6559   _this_mode:
0803042E            6560          ds.b      2
                    6561   _next_mode:
08030430            6562          ds.b      2
                    6563   _enemy_index:
08030432            6564          ds.b      1
                    6565   _num_enemies:
08030434            6566          ds.b      1
                    6567   _player_x:
08030436            6568          ds.b      1
                    6569   _bullet_x:
08030438            6570          ds.b      1
                    6571   _bullet_y:
0803043A            6572          ds.b      1
                    6573   _bomb_x:
0803043C            6574          ds.b      1
                    6575   _bomb_y:
0803043E            6576          ds.b      1
                    6577   _attract:
08030440            6578          ds.b      1
                    6579   _credits:
08030442            6580          ds.b      1
                    6581   _curplayer:
08030444            6582          ds.b      1
                    6583   _score:
08030446            6584          ds.b      2
                    6585   _lives:
08030448            6586          ds.b      1
                    6587   _enemies:
0803044A            6588          ds.b      84
                    6589   _font8x8:
0803049E            6590          ds.b      504
                    6591   _player_bitmap:
08030696            6592          ds.b      56
                    6593   _bomb_bitmap:
080306CE            6594          ds.b      7
                    6595   _bullet_bitmap:
080306D6            6596          ds.b      4
                    6597   _enemy1_bitmap:
080306DA            6598          ds.b      34
                    6599   _enemy2_bitmap:
080306FC            6600          ds.b      34
                    6601   _enemy3_bitmap:
0803071E            6602          ds.b      34
                    6603   _enemy4_bitmap:
08030740            6604          ds.b      34
                    6605   _enemy_bitmaps:
08030762            6606          ds.b      16
                    6607   _seed:
08030772            6608          ds.b      4
                    6609   _frame:
08030776            6610          ds.b      1
                    6611          section   heap
08030778            6612                   align
          0803 0778 6613   bssEnd          equ *                   end of storage space for unitialised variables
                    6614   *                                       we have to copy all initialised variable from rom to here at startup
          0803 0778 6615   heap   equ       *
08030778            6616                    align
          0000 0000


SYMBOL TABLE

Symbol        Value        Symbol        Value        Symbol        Value
----------------------     ----------------------     ----------------------
@cosmic~1_1   00004B88     @cosmic~1_2   00004B92     @cosmic~1_3   00004BA4     
@cosmic~1_4   00004BB6     @cosmic~1_5   00004BC8     @cosmic~1_6   00004BDA     
@graphi~1_1   00004B7C     @itoa_1       00004BEC     @itoa_convert 00004638     
@itoa_..ert_1 0000467A     @itoa_..ert_3 0000468C     @itoa_..ert_4 0000469A     
@m68kde~1_1   000048C0     @m68kde~1_10  000049CA     @m68kde~1_11  000049E6     
@m68kde~1_12  000049EC     @m68kde~1_13  00004A04     @m68kde~1_14  00004A28     
@m68kde~1_15  00004A68     @m68kde~1_16  00004A7E     @m68kde~1_17  00004A8A     
@m68kde~1_18  00004A9A     @m68kde~1_19  00004AAE     @m68kde~1_2   000048DA     
@m68kde~1_20  00004ABE     @m68kde~1_21  00004AD0     @m68kde~1_22  00004AE2     
@m68kde~1_23  00004AF6     @m68kde~1_24  00004B08     @m68kde~1_25  00004B16     
@m68kde~1_26  00004B30     @m68kde~1_27  00004B4E     @m68kde~1_28  00004B6A     
@m68kde~1_29  00004B70     @m68kde~1_3   000048FA     @m68kde~1_30  00004B76     
@m68kde~1_4   0000493E     @m68kde~1_5   00004950     @m68kde~1_6   00004972     
@m68kde~1_7   00004990     @m68kde~1_8   00004994     @m68kde~1_9   000049B2     
@vspri.._copy 00003F24     @vspri..opy_1 00003F40     @vspri..opy_2 00003F4A     
@vspri..etval 00003F4E     @vspri..val_1 00003F80     @vspri..val_5 00003FCC     
AddressError  0000000C     BusError      00000008     Check         00000018     
DataEnd       00004BF8     DataLength    0000000C     DataStart     00004BEC     
DividebyZero  00000014     E_1010        00000826     E_1111        00000838     
E_AErro       000007A8     E_BErro       00000796     E_Check       000007DE     
E_DZero       000007CC     E_IInst       000007BA     E_Priv        00000802     
E_Spuri       0000084A     E_Trace       00000814     E_Trapv       000007F0     
E_UnitI       0000084A     E_Unnas1      0000084A     E_Unnas10     0000084A     
E_Unnas11     0000084A     E_Unnas2      0000084A     E_Unnas3      0000084A     
E_Unnas4      0000084A     E_Unnas5      0000084A     E_Unnas6      0000084A     
E_Unnas7      0000084A     E_Unnas8      0000084A     E_Unnas9      0000084A     
FlushK..ard_1 000009BE     FlushK..ard_4 000009DE     FlushK..ard_5 000009E0     
FlushK..ard_6 000009E2     Get2He..its_1 00000A64     IllegalInstr  00000010     
InitialPC     00000004     InitialSP     00000000     LDIV          000047F4     
LMUL          00003E70     Level1IRQ     00000064     Level1RamISR  0000042E     
Level2IRQ     00000068     Level2RamISR  00000440     Level3IRQ     0000006C     
Level3RamISR  00000452     Level4IRQ     00000070     Level4RamISR  00000464     
Level5IRQ     00000074     Level5RamISR  00000476     Level6IRQ     00000078     
Level6RamISR  00000580     Level7IRQ     0000007C     Level7RamISR  00000592     
Line1010emul  00000028     Line1111emul  0000002C     Privilege     00000020     
RamVec..Table 08030000     SpuriousIRQ   00000060     StackP..erVal 08040000     
Timer_ISR_1   00000D1E     Trace         00000024     Trap0         00000080     
Trap0RamISR   000005A4     Trap1         00000084     Trap10        000000A8     
Trap10RamISR  00000658     Trap11        000000AC     Trap11RamISR  0000066A     
Trap12        000000B0     Trap12RamISR  0000067C     Trap13        000000B4     
Trap13RamISR  0000068E     Trap14        000000B8     Trap14RamISR  000006A0     
Trap15        000000BC     Trap15RamISR  00000790     Trap1RamISR   000005B6     
Trap2         00000088     Trap2RamISR   000005C8     Trap3         0000008C     
Trap3RamISR   000005DA     Trap4         00000090     Trap4RamISR   000005EC     
Trap5         00000094     Trap5RamISR   000005FE     Trap6         00000098     
Trap6RamISR   00000610     Trap7         0000009C     Trap7RamISR   00000622     
Trap8         000000A0     Trap8RamISR   00000634     Trap9         000000A4     
Trap9RamISR   00000646     TrapV         0000001C     ULDIV         000047E2     
ULMUL         00003E5E     Unassigned1   00000030     Unassigned10  00000058     
Unassigned11  0000005C     Unassigned2   00000034     Unassigned3   00000038     
Unassigned4   00000040     Unassigned5   00000044     Unassigned6   00000048     
Unassigned7   0000004C     Unassigned8   00000050     Unassigned9   00000054     
Uninit_IRQ    0000003C     VAddressError 0803000C     VBusError     08030008     
VCheck        08030018     VDividebyZero 08030014     VIllegalInstr 08030010     
VInitialPC    08030004     VInitialSP    08030000     VL1IRQ        08030064     
VL2IRQ        08030068     VL3IRQ        0803006C     VL4IRQ        08030070     
VL5IRQ        08030074     VL6IRQ        08030078     VL7IRQ        0803007C     
VLine1010emul 08030028     VLine1111emul 0803002C     VPrivilege    08030020     
VSpuriousIRQ  08030060     VTrace        08030024     VTrap0        08030080     
VTrap1        08030084     VTrap10       080300A8     VTrap11       080300AC     
VTrap12       080300B0     VTrap13       080300B4     VTrap14       080300B8     
VTrap15       080300BC     VTrap2        08030088     VTrap3        0803008C     
VTrap4        08030090     VTrap5        08030094     VTrap6        08030098     
VTrap7        0803009C     VTrap8        080300A0     VTrap9        080300A4     
VTrapV        0803001C     VUnassigned1  08030030     VUnassigned10 08030058     
VUnassigned11 0803005C     VUnassigned2  08030034     VUnassigned3  08030038     
VUnassigned4  08030040     VUnassigned5  08030044     VUnassigned6  08030048     
VUnassigned7  0803004C     VUnassigned8  08030050     VUnassigned9  08030054     
VUninit_IRQ   0803003C     _AddressError 00000C90     _Break..dress 0803012E     
_Break..ction 0803014E     _Break..eared 0803015E     _BusError     00000C82     
_CallD..nitor 00000AF6     _Check        00000CBA     _Dividebyzero 00000CAC     
_Echo         080300E0     _FIRE1        08030422     _Flush..board 000009BA     
_Get2H..igits 00000A18     _Get4H..igits 00000A6C     _Get6H..igits 00000A92     
_Get8H..igits 00000AB8     _GoFlag       080300DC     _Help         00000B0C     
_IRQMessage   00000BEE     _Illeg..ction 00000C9E     _Init_RS232   000008E6     
_Insta..ndler 000008C6     _Instr..nSize 0803017E     _LEFT1        08030426     
_PC           08030120     _PortA_Count  080300D4     _Print..Abort 00000BC2     
_PrivError    00000CD6     _RIGHT1       0803042A     _SR           0803012C     
_SSP          08030124     _Spurious     00000CF2     _TempString   080301C6     
_Timer1_Init  00000D20     _Timer_ISR    00000D00     _Trace        080300D8     
_Trapv        00000CC8     _USP          08030128     _Unhan..dIRQ1 00000C1A     
_Unhan..dIRQ2 00000C26     _Unhan..dIRQ3 00000C32     _Unhan..dIRQ4 00000C3E     
_Unhan..dIRQ5 00000C4A     _Unhan..dIRQ6 00000C56     _Unhan..dIRQ7 00000C68     
_Unhan..dTrap 00000C74     _UnitIRQ      00000CE4     _Unkno..mmand 00000AE0     
_Watch..dress 08030182     _Watch..eared 080301A2     __allocp      080300C4     
__getch       0000093C     __heap        080300C4     __putch       00000910     
__ungetbuf    080300C0     __waitch      0000097A     _a0           08030104     
_a1           08030108     _a2           0803010C     _a3           08030110     
_a4           08030114     _a5           08030118     _a6           0803011C     
_add_score    00002306     _attract      08030440     _attract_mode 00002DC6     
_bcd_add      000021CC     _bomb_bitmap  080306CE     _bomb_x       0803043C     
_bomb_y       0803043E     _bulle..itmap 080306D6     _bullet_x     08030438     
_bullet_y     0803043A     _check..t_hit 000029FC     _check..press 00001E6C     
_clear_sprite 00001D44     _clock        00001EF2     _clock..nt_ms 080301C2     
_clrscr       00001F32     _cosmi.._main 00003DD4     _credits      08030442     
_curplayer    08030444     _d0           080300E4     _d1           080300E8     
_d2           080300EC     _d3           080300F0     _d4           080300F4     
_d5           080300F8     _d6           080300FC     _d7           08030100     
_delay_ms     00001EFA     _delete_enemy 000024CE     _destr..layer 000023FC     
_draw_.._word 00002160     _draw_bunker  0000275E     _draw_char    000020A6     
_draw_font    00001096     _draw_lives   0000224A     _draw_..field 0000287C     
_draw_score   000022BA     _draw_sprite  00001BE6     _draw_string  00002116     
_draw_vline   00001FBC     _drop_bomb    00002B56     _enemies      0803044A     
_enemy..itmap 080306DA     _enemy..itmap 080306FC     _enemy..itmap 0803071E     
_enemy..itmap 08030740     _enemy..tmaps 08030762     _enemy_index  08030432     
_erase_sprite 00001CD0     _find_..my_at 00002994     _fire_bullet  00002A3E     
_font8x8      0803049E     _frame        08030776     _game_..r_msg 00002D18     
_get_c.._rand 00002352     _getch_1      0000093E     _getch_3      00000950     
_getch_4      00000974     _go           0000084C     _graph.._char 00000FDC     
_graph..tring 0000104C     _graph..vline 00000EF2     _graph..nt8x8 0803022A     
_graph..lrscr 00000E68     _graph.._main 00001BC6     _graph..pixel 00000EAE     
_i            080300C4     _in_rect      00002906     _init_enemies 00002434     
_init_game    00002D02     _initi..tmaps 00002DD8     _initi.._font 00001124     
_itoa         00004774     _kbhit        000008F8     _lives        08030448     
_long_rand    00001ECC     _ltoa         000046AA     _main         00000D32     
_memmove      00003EFE     _menu         00000B5A     _move_bomb    00002BBA     
_move_bullet  00002A82     _move_player  00001DB4     _next_mode    08030430     
_num_enemies  08030434     _play_game    00002D98     _play_round   00002C7C     
_playe..itmap 08030696     _player_x     08030436     _printf       00003E2C     
_putch        000047A2     _putch_1      00000914     _putch_3      00000926     
_score        08030446     _seed         08030772     _srand        00001EBC     
_stop         0000084A     _strcpy       000047D2     _strlen       00004790     
_this_mode    0803042E     _toupper      00003E00     _ultoa        0000472E     
_updat..enemy 00002558     _vsprintf     00003FD6     _waitch_1     00000990     
_waitch_3     000009B6     _waitch_4     000009B4     _x            080300C8     
_xor_pixel    00001F78     _xor_p..derez 0000236C     _xor_sprite   00001C56     
_xtod         000009E6     _y            080300CC     _z            080300D0     
add_score_1   00002314     add_score_3   0000234E     attrac..ode_1 00002DCE     
bcd_add_1     000021EE     bcd_add_3     00002240     bcd_add_4     00002202     
bcd_add_5     00002230     bcd_add_6     00002232     bss           08030000     
bssEnd        08030778     check_..hit_1 00002A38     check_..ess_1 00001E96     
check_..ess_3 00001EA8     check_..ess_5 00001EB8     clear_..ite_1 00001D66     
clear_..ite_3 00001DAC     clear_..ite_4 00001D70     clear_..ite_6 00001DA8     
clrscr_1      00001F38     clrscr_3      00001F72     clrscr_4      00001F44     
clrscr_6      00001F6E     delay_ms_1    00001F08     delay_ms_3    00001F20     
dodiv         0000483C     dodiv_1       0000485C     dodiv_2       0000487A     
dodiv_3       0000489A     dodiv_4       000048B6     dodiv_5       000048BA     
domul         00003EAA     domul_1       00003EBE     domul_2       00003EC8     
domul_3       00003ECA     domul_4       00003EDE     draw_b..ord_1 00002176     
draw_b..ord_3 000021C4     draw_bunker_1 00002794     draw_bunker_3 0000282A     
draw_bunker_4 0000282C     draw_bunker_6 00002874     draw_char_1   000020FA     
draw_char_3   0000210E     draw_font_1   0000109A     draw_lives_1  00002262     
draw_lives_2  00002264     draw_lives_3  00002270     draw_lives_5  000022B4     
draw_lives_6  0000229E     draw_lives_7  000022A0     draw_p..eld_1 000028A8     
draw_p..eld_3 000028CA     draw_score_1  000022C8     draw_score_2  000022CA     
draw_sprite_1 00001C04     draw_sprite_3 00001C4E     draw_sprite_4 00001C0E     
draw_sprite_6 00001C4A     draw_string_1 0000211C     draw_string_2 0000215A     
draw_string_3 0000212C     draw_vline_1  00002080     draw_vline_2  0000209E     
draw_vline_3  0000204C     draw_vline_5  00002066     erase_..ite_1 00001CEE     
erase_..ite_3 00001D3C     erase_..ite_4 00001CF8     erase_..ite_6 00001D38     
find_e.._at_1 0000299E     find_e.._at_3 000029F2     find_e.._at_4 000029EE     
find_e.._at_6 000029F4     game_o..msg_1 00002D22     game_o..msg_3 00002D92     
graphi..har_1 00001030     graphi..har_3 00001044     graphi..ing_1 00001052     
graphi..ing_2 00001090     graphi..ing_3 00001062     graphi..ine_1 00000FB6     
graphi..ine_2 00000FD4     graphi..ine_3 00000F82     graphi..ine_5 00000F9C     
graphi..scr_1 00000E6E     graphi..scr_3 00000EA8     graphi..scr_4 00000E7A     
graphi..scr_6 00000EA4     heap          08030778     in_rect_1     0000298C     
in_rect_2     0000298E     init_e..ies_1 00002446     init_e..ies_3 0000249E     
init_e..ies_4 0000249A     kbhit_1       0000090C     kbhit_3       0000090E     
ldiv_1        00004816     ldiv_2        00004822     ldiv_3        0000482A     
ldiv_4        0000482C     lmul_1        00003E8E     lmul_2        00003E94     
lmul_3        00003E9C     lmul_4        00003E9E     ltoa_1        000046D6     
ltoa_3        000046D0     ltoa_4        00004726     ltoa_5        00004710     
ltoa_7        00004708     mainloop      00000426     memmove_0     00003F10     
memmove_1     00003F18     memmove_2     00003F1C     menu_1        00000B68     
menu_2        00000BC0     menu_4        00000BA4     menu_6        00000BBC     
move_bomb_1   00002C06     move_bomb_3   00002C4A     move_bomb_4   00002C76     
move_bomb_5   00002C42     move_bullet_1 00002B24     move_bullet_2 00002B50     
move_bullet_3 00002AD2     move_player_1 00001DC0     move_p..er_10 00001E26     
move_p..er_12 00001E4A     move_player_3 00001E6A     move_player_4 00001E08     
move_player_6 00001E00     move_player_8 00001E2E     play_game_1   00002DA6     
play_game_3   00002DC0     play_game_4   00002DBE     play_round_1  00002C9A     
play_round_3  00002D00     play_round_4  00002CD6     play_round_8  00002CF4     
play_round_9  00002CF8     putch_1       000047C0     start         00000400     
strcpy_1      000047DC     strlen_1      00004796     toupper_1     00003E22     
ultoa_1       00004754     ultoa_3       00004750     ultoa_4       0000476C     
update..emy_1 0000258A     update..my_11 000026E4     update..emy_3 00002664     
update..emy_5 0000265A     update..emy_7 000026AA     update..emy_9 000026A8     
vsprintf_1    00003FEE     vsprintf_102  00004516     vsprintf_104  00004534     
vsprintf_105  0000453A     vsprintf_107  00004556     vsprintf_108  0000455E     
vsprintf_11   00004086     vsprintf_110  00004578     vsprintf_112  000045C4     
vsprintf_113  000045C6     vsprintf_115  000045C2     vsprintf_116  0000459E     
vsprintf_119  000045AC     vsprintf_12   00004092     vsprintf_123  000045DE     
vsprintf_125  000045FC     vsprintf_126  0000462E     vsprintf_13   0000409E     
vsprintf_14   000040AA     vsprintf_15   0000407C     vsprintf_16   000040D6     
vsprintf_18   0000410C     vsprintf_2    00004616     vsprintf_20   00004128     
vsprintf_22   000042C0     vsprintf_23   000042CE     vsprintf_24   0000419A     
vsprintf_26   000041D6     vsprintf_27   0000420E     vsprintf_28   00004246     
vsprintf_3    0000461A     vsprintf_30   0000427E     vsprintf_31   000042A2     
vsprintf_33   00004172     vsprintf_34   00004166     vsprintf_35   0000418C     
vsprintf_36   000041BA     vsprintf_37   000041D2     vsprintf_38   000041F4     
vsprintf_39   0000420A     vsprintf_4    00004026     vsprintf_40   0000422C     
vsprintf_41   00004242     vsprintf_42   00004264     vsprintf_43   0000427A     
vsprintf_44   0000429A     vsprintf_45   0000429C     vsprintf_46   000042BE     
vsprintf_48   00004302     vsprintf_50   000042FE     vsprintf_51   00004300     
vsprintf_54   0000431C     vsprintf_56   0000433A     vsprintf_59   00004368     
vsprintf_6    00004050     vsprintf_60   000043AC     vsprintf_62   00004380     
vsprintf_63   0000439E     vsprintf_64   000043A6     vsprintf_65   000043DC     
vsprintf_67   000043D2     vsprintf_68   000043DA     vsprintf_7    000040B8     
vsprintf_73   00004410     vsprintf_76   00004404     vsprintf_77   00004448     
vsprintf_79   0000443E     vsprintf_8    000040BA     vsprintf_80   000045FE     
vsprintf_81   00004612     vsprintf_82   000044D4     vsprintf_9    000040B6     
vsprintf_93   000044A4     vsprintf_94   0000448A     vsprintf_95   000044C8     
vsprintf_96   000044EE     vsprintf_98   000044FE     xor_pl..rez_1 00002392     
xor_pl..rez_3 000023F4     xor_pl..rez_4 0000239C     xor_pl..rez_6 000023F0     
xor_sprite_1  00001C76     xor_sprite_3  00001CC6     xor_sprite_4  00001C80     
xor_sprite_6  00001CC2     xtod_1        000009FE     xtod_3        00000A12     
xtod_4        00000A0C     

Assembly errors: 0
